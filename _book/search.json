[{"path":"index.html","id":"pdsr","chapter":"PDSR","heading":"PDSR","text":"\nWelcome PDSR!\nbook aimed introductory- intermediate-level R programming learning resource.\nonline book UCSF Biostat 213/4, currently updated regularly.EDGUCSF LCM,\nSan Francisco, CA, July 2021","code":""},{"path":"preface.html","id":"preface","chapter":"1 Preface","heading":"1 Preface","text":"Throughout book see boxes R code followed output, . code (input) decorated teal border left separate output, like following example:Notice R adds numbers brackets beginning row. happens R prints contents vector. number integer index first element row. Therefore, first one always [1] number subsequent rows depends many elements fit line. output single element, still [1] front .Also notice enclose assignment operation variable parentheses, prints resulting value variable. Therefore, :equivalent :Note mouse input code box, clickable “Copy clipboard” appears top right box allowing copy paste R session file.Lastly, see following informational boxes times:\nNote\n\nTip\n\nImportant\n\nWarning\n\nCaution\nbook created using bookdown (Xie 2021)\n","code":"\nx <- rnorm(200)\nx[1:20] [1]  0.73978772  0.09416414  0.24307269 -0.86621246 -1.53587779 -0.90071742\n [7] -0.42088062  0.96870100 -0.30259308 -0.57730205 -0.62772927 -0.75827799\n[13]  0.90572488  0.29325163  1.23578310 -0.21677657  1.24685269  1.33748852\n[19] -0.10274750 -0.57857678\n(y <- 4)[1] 4\ny <- 4\ny[1] 4"},{"path":"introduction.html","id":"introduction","chapter":"2 Introduction","heading":"2 Introduction","text":"S Programming Language statistical\nprogramming language developed Bell Labs\n“turn ideas software, quickly faithfully” (Chambers 1998).R modern implementation \nS language part GNU Project.R interpreted language, allowing\ninteractive work data. written C, Fortran, R .R’s strengths:base language (.e. included R first install ) comes loaded \nfunctionality \ndata cleaning manipulation\nstatistical testing modeling\npowerful graphics\ndata cleaning manipulationstatistical testing modelingpowerful graphicsThe vast ecosystem third party packages brings unparalleled functionality \nstatistics, epidemiology, machine learning, visualization, image processing much . \nincludes specialized packages many biomedical applications.See also: R? \nR Project website.","code":""},{"path":"Rsetup.html","id":"Rsetup","chapter":"3 R setup, Packages & Docs","heading":"3 R setup, Packages & Docs","text":"","code":""},{"path":"Rsetup.html","id":"r","chapter":"3 R setup, Packages & Docs","heading":"3.1 R","text":"book compiled using R version 4.1.0 (2021-05-18).\nMake sure latest version visiting R project websiteIt’s good idea keep log version R installed packages beginning new project. easy way save output sessionInfo():","code":"\nsessionInfo()R version 4.1.0 (2021-05-18)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] knitr_1.33        xml2_1.3.2        magrittr_2.0.1    downlit_0.2.1    \n [5] R6_2.5.0          rlang_0.4.11      fansi_0.5.0       stringr_1.4.0    \n [9] tools_4.1.0       xfun_0.24         utf8_1.2.1        jquerylib_0.1.4  \n[13] htmltools_0.5.1.1 ellipsis_0.3.2    yaml_2.2.1        digest_0.6.27    \n[17] tibble_3.1.2      lifecycle_1.0.0   crayon_1.4.1      bookdown_0.22    \n[21] sass_0.4.0        vctrs_0.3.8       fs_1.5.0          evaluate_0.14    \n[25] rmarkdown_2.9     stringi_1.7.2     compiler_4.1.0    bslib_0.2.5.1    \n[29] pillar_1.6.1      jsonlite_1.7.2    pkgconfig_2.0.3  "},{"path":"Rsetup.html","id":"r-packages","chapter":"3 R setup, Packages & Docs","heading":"3.2 R packages","text":"","code":""},{"path":"Rsetup.html","id":"cran","chapter":"3 R setup, Packages & Docs","heading":"3.2.1 CRAN","text":"Comprehensive R Archive Network (CRAN) official R package repository currently hosts 16271 packages (2020-09-13). install package CRAN, use builtin install.packages command:","code":"\ninstall.packages('glmnet')"},{"path":"Rsetup.html","id":"check-for-outdated-packages","chapter":"3 R setup, Packages & Docs","heading":"3.2.1.1 Check for outdated packages","text":"","code":"\nold.packages()"},{"path":"Rsetup.html","id":"update-installed-packages","chapter":"3 R setup, Packages & Docs","heading":"3.2.1.2 Update installed packages","text":"don’t set ask = FALSE, accept package update separately.","code":"\nupdate.packages(ask = FALSE)"},{"path":"Rsetup.html","id":"github","chapter":"3 R setup, Packages & Docs","heading":"3.2.2 GitHub","text":"GitHub contains large number R packages, also exist CRAN, GitHub version may updated lot frequently. install GitHub, need remotes package CRAN first:Note: Running remotes::install_github(\"user/repo\") reinstall previously installed package, unless updated.","code":"\ninstall.packages(\"remotes\")\nremotes::install_github(\"username/reponame\")"},{"path":"Rsetup.html","id":"bioconductor","chapter":"3 R setup, Packages & Docs","heading":"3.2.3 Bioconductor","text":"Bioconductor repository includes tools analysis comprehension high-throughput genomic data, among others. install package Bioconductor, first install BiocManager package CRAN:use similar builtin install.packages:","code":"install.packages(“BiocManager\")\nBiocManager::install(\"packageName\")"},{"path":"Rsetup.html","id":"installed-packages","chapter":"3 R setup, Packages & Docs","heading":"3.2.4 Installed packages","text":"List R packages installed system installed.packages() (following block run prevent long output)List attached packages search():List attached packages system path:","code":"\ninstalled.packages()\nsearch()[1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n[4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n[7] \"package:methods\"   \"Autoloads\"         \"package:base\"     \nsearchpaths()[1] \".GlobalEnv\"                                                              \n[2] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/stats\"    \n[3] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/graphics\" \n[4] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/grDevices\"\n[5] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/utils\"    \n[6] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/datasets\" \n[7] \"/Library/Frameworks/R.framework/Versions/4.1/Resources/library/methods\"  \n[8] \"Autoloads\"                                                               \n[9] \"/Library/Frameworks/R.framework/Resources/library/base\"                  "},{"path":"Rsetup.html","id":"dependencies","chapter":"3 R setup, Packages & Docs","heading":"3.2.5 Dependencies","text":"R packages, whether CRAN, Bioconductor, GitHub, rely packages run. called dependencies. Many dependencies get installed automatically call install.packages() remotes::install_github(), etc. depends largely whether essential new package work. packages, especially provide large number functions may used users, may make dependencies optional. cases, try execute specific function depends uninstalled packages may get warning error type message indicating need install packages.","code":""},{"path":"Rsetup.html","id":"rstudio-ide","chapter":"3 R setup, Packages & Docs","heading":"3.3 RStudio IDE","text":"RStudio Integrated Development Environment (IDE) R, can make work R easier, productive, fun. Make sure keep installation --date; new features added often.recommended set new RStudio project data project: Select File > New Project… main menu.","code":""},{"path":"Rsetup.html","id":"builtin-documentation","chapter":"3 R setup, Packages & Docs","heading":"3.4 Builtin Documentation","text":"’ve successfully installed R RStudio, one first things know access search builtin documentation.","code":""},{"path":"Rsetup.html","id":"get-help-on-a-specific-item","chapter":"3 R setup, Packages & Docs","heading":"3.4.1 Get help on a specific item","text":"know name ’re looking (R function commonly, possibly also name dataset, package ), just type ? followed name said function, dataset, etc. R prompt:RStudio, example bring documentation sample function dedicated “Help” window, commonly situated bottom right (can moved user freely). running R directly system shell, information printed directly console.\nTry running example system.","code":"\n?sample"},{"path":"Rsetup.html","id":"search-the-docs","chapter":"3 R setup, Packages & Docs","heading":"3.4.2 Search the docs","text":"know name looking , can use double question marks, ??, followed query (short help.search command provides number arguments can look using ?help.search):","code":"\n??bootstrap"},{"path":"basicops.html","id":"basicops","chapter":"4 Basic operations","heading":"4 Basic operations","text":"First, even learning data types structures, may worth looking basic mathematical statistical operations R.","code":""},{"path":"basicops.html","id":"arithmetic","chapter":"4 Basic operations","heading":"4.1 Arithmetic","text":"Standard arithmetic operations expected:Exponentiation uses ^:\n(worth pointing , ^ likely common way represent exponentiation, symbol used exponentiation varies across languages)Square root sqrt():Integer division\n.e. Divide forget remainderi.e. many times denominator fits numerator, without taking fractions denominator. can applied decimals way:Modulo operation\n.e. Divide return just remainderTry figure following :\nround(x, digits) rounds x desired number digits used overcome rounding errors.\n","code":"\nx <- 10\ny <- 3\nx + y[1] 13\nx - y[1] 7\nx * y[1] 30\nx / 3[1] 3.333333\nx^3[1] 1000\nsqrt(81)[1] 9\nx %/% 3[1] 3\n9.5 %/% 3.1[1] 3\nx %% y[1] 1\nx <- (-10:10)[-11]\ny <- sample((-10:10)[-11], 20)\nx - (x %/% y) * y == x %% y [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE TRUE TRUE\nx <- rnorm(20)\ny <- rnorm(20)\nround(x - (x %/% y) * y, 5) == round(x %% y, 5) [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE TRUE TRUE"},{"path":"basicops.html","id":"logical-operations","chapter":"4 Basic operations","heading":"4.2 Logical operations","text":"Logical &Logical |Logical negation !Exclusive xor()\n(= one TRUE )Test elements TRUE ():Test element TRUE ():","code":"\nT & T[1] TRUE\nT & F[1] FALSE\nT | F[1] TRUE\nx <- TRUE\n!x[1] FALSE\na <- c(T, T, T, F, F, F)\nb <- c(F, F, T, F, T, T)\na & b[1] FALSE FALSE  TRUE FALSE FALSE FALSE\na | b[1]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\nxor(a, b)[1]  TRUE  TRUE FALSE FALSE  TRUE  TRUE\nall(a)[1] FALSE\nany(a)[1] TRUE"},{"path":"basicops.html","id":"common-descriptive-stats","chapter":"4 Basic operations","heading":"4.3 Common descriptive stats","text":"Let’s use rnorm function draw 200 numbers random normal distribution:Basic descriptive stat operations:","code":"\nx <- rnorm(200)\nmean(x)[1] 0.2022442\nmedian(x)[1] 0.1697613\nsd(x) # standard deviation[1] 1.046756\nmin(x)[1] -2.487476\nmax(x)[1] 2.429501\nrange(x)[1] -2.487476  2.429501\nsummary(x)   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-2.4875 -0.5679  0.1698  0.2022  1.0503  2.4295 "},{"path":"types.html","id":"types","chapter":"5 Data Types","heading":"5 Data Types","text":"\nR, everything object.\n\nEvery “action” function.\n\nFunctions also objects, means can passed arguments functions returned functions.\n\nshall see relevance , example, Loop Functions chapter.\n","code":""},{"path":"types.html","id":"base-types","chapter":"5 Data Types","heading":"5.1 Base types","text":"R includes number builtin data types.defined R core team: users define data types, can define classes - see section Classes Object-Oriented Programming.popular data types R :Logical (.k.. Boolean)Numeric, integerNumeric, doubleCharacterEnvironmentClosure (.e. function)\nMany errors R occur variable , gets coerced , wrong type accident.\n\nCheck variable types typeof() /str().\n","code":""},{"path":"types.html","id":"assignment","chapter":"5 Data Types","heading":"5.2 Assignment","text":"Use <- assignments:\nRStudio keyboard shortcut assignment operator <- Option - (MacOS) Alt - (Windows).\nTyping name object……equivalent printing itYou can also place assignment parentheses perform assignment print object:\nuse equal sign ‘=’ assignment, use pass arguments functions.\ncan assign value multiple objects - can useful initializing variables.Excitingly, R allows assignment opposite direction well:shall see later -> assignment can convenient end pipe.can even , fun (?) unlikely useful:Use c() combine multiple values vector - one widely used R functions:","code":"\nx <- 3\n# You can add comments within code blocks using the usual \"#\" prefix\nx[1] 3\nprint(x)[1] 3\n(x <- 3)[1] 3\nx <- z <- init <- 0\nx[1] 0\nz[1] 0\ninit[1] 0\n10 -> x\nx[1] 10\nx <- 7 -> z\nx[1] 7\nz[1] 7\nx <- c(-12, 3.5, 104)\nx[1] -12.0   3.5 104.0"},{"path":"types.html","id":"initialize---coerce---test-types","chapter":"5 Data Types","heading":"5.3 Initialize - coerce - test (types)","text":"following summary table lists functions initialize, coerce (=convert), test core data types, shown detail following paragraphs:","code":""},{"path":"types.html","id":"logical","chapter":"5 Data Types","heading":"5.4 Logical","text":"writing code, use TRUE FALSE.\nconsole, can abbreviate T F.","code":"\na <- c(TRUE, FALSE)\na <- c(T, F)\nx <- 4\nb <- x > 10\nb[1] FALSE\nstr(b) logi FALSE\ntypeof(b)[1] \"logical\""},{"path":"types.html","id":"integer","chapter":"5 Data Types","heading":"5.5 Integer","text":"Create range integers using colon notation start:end:Note assigning integer defaults type double:can force stored integer adding L suffix:","code":"\n(x <- 11:15)[1] 11 12 13 14 15\ntypeof(x)[1] \"integer\"\nstr(x) int [1:5] 11 12 13 14 15\nx <- 1\ntypeof(x)[1] \"double\"\nstr(x) num 1\nx <- 1L\ntypeof(x)[1] \"integer\"\nstr(x) int 1\nx <- c(1L, 3L, 5L)\nstr(x) int [1:3] 1 3 5"},{"path":"types.html","id":"double","chapter":"5 Data Types","heading":"5.6 Double","text":"","code":"\nx <- c(1.2, 3.4, 10.987632419834556)\nx[1]  1.20000  3.40000 10.98763\ntypeof(x)[1] \"double\"\nstr(x) num [1:3] 1.2 3.4 11"},{"path":"types.html","id":"character","chapter":"5 Data Types","heading":"5.7 Character","text":"character vector consists one elements, consists one actual characters, .e. vector single characters. (length character vector number individual elements, related number characters element)","code":"\nx <- \"word\"\ntypeof(x)[1] \"character\"\nlength(x)[1] 1\n(x <- c(\"a\", \"b\", \"gamma\", \"delta\"))[1] \"a\"     \"b\"     \"gamma\" \"delta\"\ntypeof(x)[1] \"character\"\nlength(x)[1] 4"},{"path":"types.html","id":"environment","chapter":"5 Data Types","heading":"5.8 Environment","text":"Defining environments probably advanced use :","code":"\nx <- new.env()\nx$name <- \"Guava\"\nx$founded <- 2020\nx<environment: 0x7fb7cf3bbb48>\ntypeof(x)[1] \"environment\""},{"path":"types.html","id":"closure-function","chapter":"5 Data Types","heading":"5.9 Closure (function)","text":"Closures functions - contain variable definitions.\nRead functions.","code":"\nsquare <- function(x) x^2\nsquare(3)[1] 9\ntypeof(square)[1] \"closure\""},{"path":"types.html","id":"initialize-vectors","chapter":"5 Data Types","heading":"5.10 Initialize vectors","text":"can create / initialize vectors specific type vector command specifying mode directly calling relevant function:aliases vector command (print source code see )","code":"\n(xl <- vector(mode = \"logical\", length = 10)) [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n(xd <- vector(mode = \"double\", length = 10)) [1] 0 0 0 0 0 0 0 0 0 0\n(xn <- vector(mode = \"numeric\", length = 10)) # same as \"double\" [1] 0 0 0 0 0 0 0 0 0 0\n(xi <- vector(mode = \"integer\", length = 10)) [1] 0 0 0 0 0 0 0 0 0 0\n(xc <- vector(mode = \"character\", length = 10)) [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\nxl <- logical(10)\nxd <- double(10)\nxn <- numeric(10) # same as double\nxi <- integer(10)\nxc <- character(10)"},{"path":"types.html","id":"explicit-coercion","chapter":"5 Data Types","heading":"5.11 Explicit coercion","text":"can explicitly convert objects one type different type using .* functions:Logical vectors converted 1s 0s expected:TRUE becomes 1 FALSE becomes 0Note converting numeric logical anything zero TRUE:conversions possible.\nmeaningful/consistent way convert character vector numeric.\nfollowing outputs NA values prints (helpful) error message.","code":"\n(x <- c(1.2, 2.3, 3.4))[1] 1.2 2.3 3.4\n(x <- as.logical(x))[1] TRUE TRUE TRUE\n(x <- as.double(x))[1] 1 1 1\n(x <- as.numeric(x))[1] 1 1 1\n(x <- as.integer(x))[1] 1 1 1\n(x <- as.character(x))[1] \"1\" \"1\" \"1\"\nx <- c(TRUE, TRUE, FALSE)\nas.numeric(x)[1] 1 1 0\nx <- seq(-2, 2, .5)\nas.logical(x)[1]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\nx <- c(\"mango\", \"banana\", \"tangerine\")\nas.numeric(x)Warning: NAs introduced by coercion[1] NA NA NA"},{"path":"types.html","id":"implicit-coercion","chapter":"5 Data Types","heading":"5.12 Implicit coercion","text":"Remember, language tries make life easier often automatically coerce one class another make requested operations possible.example, can sum logical vector.\nautomatically converted numeric saw earlier.hand, sum factor, example.\nget error explanation:\nNote: add error = TRUE Rmarkdown’s code block’s options (visible HTML output), otherwise compilation Rmarkdown document stop error.\nreason made sense, explicitly coerce numeric sum:","code":"\nx <- c(TRUE, TRUE, FALSE)\nsum(x)[1] 2\nx <- factor(c(\"mango\", \"banana\", \"mango\"))\nsum(x)Error in Summary.factor(structure(c(2L, 1L, 2L), .Label = c(\"banana\", : 'sum' not meaningful for factors\nx <- factor(c(\"mango\", \"banana\", \"mango\"))\nsum(as.numeric(x))[1] 5"},{"path":"types.html","id":"na-missing-values","chapter":"5 Data Types","heading":"5.13 NA: Missing Values","text":"Missing values data type - logical, integer, double, character - coded using NA.\ncheck presence NA values, use .na():.na() works similarly matrices:\nNote .na() returns response element (.e. vectorized) contrast .numeric(), .logical(), etc. makes sense, since latter chacking type whole object, former checking individual elements.\nanyNA() useful function check NA values object:\noperations NA results NA\nMultiple functions accept input object multiple values (vector, matrix, data.frame, etc.) return NA element NA:First, make sure NA values represent legitimate missing data error.\n, decide want handle .commands can pass na.rm = TRUE ignore NA values:chapter Handling Missing Data describes approaches handling missing data context statistics modeling, commonly supervised learning.","code":"\n(x <- c(1.2, 5.3, 4.8, NA, 9.6))[1] 1.2 5.3 4.8  NA 9.6\nis.na(x)[1] FALSE FALSE FALSE  TRUE FALSE\n(x <- c(\"mango\", \"banana\", NA, \"sugar\", \"ackee\"))[1] \"mango\"  \"banana\" NA       \"sugar\"  \"ackee\" \nis.na(x)[1] FALSE FALSE  TRUE FALSE FALSE\n(x <- c(T, T, F, T, F, F, NA))[1]  TRUE  TRUE FALSE  TRUE FALSE FALSE    NA\nis.na(x)[1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\nx <- matrix(1:20, 5)\nx[4, 3] <- NA\nis.na(x)      [,1]  [,2]  [,3]  [,4]\n[1,] FALSE FALSE FALSE FALSE\n[2,] FALSE FALSE FALSE FALSE\n[3,] FALSE FALSE FALSE FALSE\n[4,] FALSE FALSE  TRUE FALSE\n[5,] FALSE FALSE FALSE FALSE\nanyNA(x)[1] TRUE\nx <- c(1.2, 5.3, 4.8, NA, 9.6)\nx*2[1]  2.4 10.6  9.6   NA 19.2\nmean(x)[1] NA\nmedian(x)[1] NA\nsd(x)[1] NA\nmin(x)[1] NA\nmax(x)[1] NA\nrange(x)[1] NA NA\nmean(x, na.rm = TRUE)[1] 5.225\nmedian(x, na.rm = TRUE)[1] 5.05\nsd(x, na.rm = TRUE)[1] 3.441293\nmin(x, na.rm = TRUE)[1] 1.2\nmax(x, na.rm = TRUE)[1] 9.6\nrange(x, na.rm = TRUE)[1] 1.2 9.6"},{"path":"types.html","id":"nan-not-a-number","chapter":"5 Data Types","heading":"5.14 NaN: Not a number","text":"NaN special case NA can result undefined mathematical operations:Note class() returns “numeric”:test NaNs, use:NaNs also NA:opposite true:\nNaN can considered subtype NA, : .na(NaN) TRUE, .nan(NA) FALSE.\n","code":"\na <- log(-4)Warning in log(-4): NaNs produced\nclass(a)[1] \"numeric\"\nis.nan(a)[1] TRUE\nis.na(a)[1] TRUE\nis.nan(NA)[1] FALSE"},{"path":"types.html","id":"null-the-empty-object","chapter":"5 Data Types","heading":"5.15 NULL: the empty object","text":"NULL object represents empty object.\nNULL means empty, missing, therefore entirely different NA\nNULL shows example initializing list:can replaced normally:","code":"\na <- vector(\"list\", 4)\na[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL\n\n[[4]]\nNULL\na[[1]] <- 3\na[[1]]\n[1] 3\n\n[[2]]\nNULL\n\n[[3]]\nNULL\n\n[[4]]\nNULL"},{"path":"types.html","id":"replacing-with-null","chapter":"5 Data Types","heading":"5.15.1 Replacing with NULL","text":"replace one elements vector/matrix/array NULL NULL length 0 replacement requires object equal length:However, lists therefore also data frames, replacing element NULL removes element:Finally, NULL often used default value function’s argument. function definition must determine default behavior/value .","code":"\na <- 11:15\na[1] 11 12 13 14 15\na[1] <- NULLError in a[1] <- NULL: replacement has length zero\nal <- list(alpha = 11:15,\n           beta = rnorm(10),\n           gamma = c(\"mango\", \"banana\", \"tangerine\"))\nal$alpha\n[1] 11 12 13 14 15\n\n$beta\n [1] -0.60318659  0.27613345 -1.17800411  0.42018642 -0.88509221  1.13798129\n [7]  0.07946868 -1.24924520  0.28480113  1.62122773\n\n$gamma\n[1] \"mango\"     \"banana\"    \"tangerine\"\nal[[2]] <- NULL\nal$alpha\n[1] 11 12 13 14 15\n\n$gamma\n[1] \"mango\"     \"banana\"    \"tangerine\""},{"path":"structures.html","id":"structures","chapter":"6 Data Structures","heading":"6 Data Structures","text":"5 main data structures R:Vector: 1-dimensional; homogeneous collectionMatrix: 2-dimensional; homogeneous collectionArray: N-dimensional; homogeneous collectionList: 1-dimensional, can nested; heterogeneous collectionData frame: 2-dimensional: special type list; heterogeneous collection columnsHomogeneous vs. hetereogeneous refers kind data types (integer, double, character, logical, factor, etc.) structure can hold. means matrix can hold numbers characters, data frame can hold different types different columns. data frames popular data structure statistical work.\nFigure 6.1: R Data Structure summary - Best read chapter first refer back figure\n\nCheck object class class() /str().\n","code":""},{"path":"structures.html","id":"initialize---coerce---test-structures","chapter":"6 Data Structures","heading":"6.1 Initialize - coerce - test (structures)","text":"following summary table lists functions initialize, coerce (=convert), test core data structures, shown detail following paragraphs:","code":""},{"path":"structures.html","id":"vectors","chapter":"6 Data Structures","heading":"6.2 Vectors","text":"vector basic structure contains data R. structures contain data made one vectors.vector length() dim():","code":"\n(x <- c(1, 3, 5, 7))[1] 1 3 5 7\nclass(x)[1] \"numeric\"\ntypeof(x)[1] \"double\"\nlength(x)[1] 4\ndim(x)NULL\n(x2 <- 1:10) [1]  1  2  3  4  5  6  7  8  9 10\n(x3 <- rnorm(10)) [1]  0.2281925  1.1028625  0.2942686  0.7183776  0.1772955 -0.5592790\n [7]  0.9804452 -1.0775334 -0.4524279  0.1418661\n(x4 <- seq(0, 1, .1)) [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\nseq(10) [1]  1  2  3  4  5  6  7  8  9 10\n(x5 <- sample(seq(100), 20)) [1]  4 55 40 24 46 81 41 34 59 37 82 73 79  8 56 25 30 88 69 35"},{"path":"structures.html","id":"generating-sequences-with-seq","chapter":"6 Data Structures","heading":"6.2.1 Generating sequences with seq()","text":", , by1:nAlong length another objectfrom, length n","code":"\nseq(1, 10, .5) [1]  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0\n[16]  8.5  9.0  9.5 10.0\n(seq(12)) [1]  1  2  3  4  5  6  7  8  9 10 11 12\n# or \n(seq_len(12)) [1]  1  2  3  4  5  6  7  8  9 10 11 12\n# is same as\n1:12 [1]  1  2  3  4  5  6  7  8  9 10 11 12\nseq_along(iris)[1] 1 2 3 4 5\n1:ncol(iris)[1] 1 2 3 4 5\nseq(-5, 12, length.out = 11) [1] -5.0 -3.3 -1.6  0.1  1.8  3.5  5.2  6.9  8.6 10.3 12.0"},{"path":"structures.html","id":"initializing-a-vector","chapter":"6 Data Structures","heading":"6.2.2 Initializing a vector","text":"","code":"\nx <- vector(length = 10)\nx <- vector(\"numeric\", 10)\nx <- vector(\"list\", 10)"},{"path":"structures.html","id":"matrices","chapter":"6 Data Structures","heading":"6.3 Matrices","text":"matrix vector 2 dimensions.create matrix, pass vector matrix() command specify number rows using nrow /number columns using ncol:\nmatrix length (length(x)) equal number (, j) elements nrow * ncol (row index j column index) dimensions (dim(x)) expected:\n","code":"\nx <- matrix(sample(seq(1000), 30),\n            nrow = 10, ncol = 3)\nx      [,1] [,2] [,3]\n [1,]  775  859  723\n [2,]   90  958  719\n [3,]  225  410  849\n [4,]  521   64  741\n [5,]  896   21  456\n [6,]  769  702  328\n [7,]  104  807  863\n [8,]  340  693  757\n [9,]    1  934  737\n[10,]  227  648  552\nclass(x)[1] \"matrix\" \"array\" \nlength(x)[1] 30\ndim(x)[1] 10  3\nnrow(x)[1] 10\nncol(x)[1] 3"},{"path":"structures.html","id":"construct-by-row-or-by-column","chapter":"6 Data Structures","heading":"6.3.1 Construct by row or by column","text":"default, vectors constructed column (byrow = FALSE)","code":"\nx <- matrix(1:20, nrow = 10, ncol = 2, byrow = FALSE)\nx      [,1] [,2]\n [1,]    1   11\n [2,]    2   12\n [3,]    3   13\n [4,]    4   14\n [5,]    5   15\n [6,]    6   16\n [7,]    7   17\n [8,]    8   18\n [9,]    9   19\n[10,]   10   20\nx <- matrix(1:20, nrow = 10, ncol = 2, byrow = TRUE)\nx      [,1] [,2]\n [1,]    1    2\n [2,]    3    4\n [3,]    5    6\n [4,]    7    8\n [5,]    9   10\n [6,]   11   12\n [7,]   13   14\n [8,]   15   16\n [9,]   17   18\n[10,]   19   20"},{"path":"structures.html","id":"initialize-a-matrix","chapter":"6 Data Structures","heading":"6.3.2 Initialize a matrix","text":"","code":"\n(x <- matrix(NA, nrow = 6, ncol = 4))     [,1] [,2] [,3] [,4]\n[1,]   NA   NA   NA   NA\n[2,]   NA   NA   NA   NA\n[3,]   NA   NA   NA   NA\n[4,]   NA   NA   NA   NA\n[5,]   NA   NA   NA   NA\n[6,]   NA   NA   NA   NA\n(x <- matrix(0, nrow = 6, ncol = 4))     [,1] [,2] [,3] [,4]\n[1,]    0    0    0    0\n[2,]    0    0    0    0\n[3,]    0    0    0    0\n[4,]    0    0    0    0\n[5,]    0    0    0    0\n[6,]    0    0    0    0"},{"path":"structures.html","id":"bind-vectors-by-column-or-by-row","chapter":"6 Data Structures","heading":"6.3.3 Bind vectors by column or by row","text":"Use cbind (“column-bind”) convert set input vectors columns matrix. vectors must length:Similarly, can use rbind (“row-bind”) convert set input vectors rows matrix. vectors must length:","code":"\nx <- cbind(1:10, 11:20, 41:50)\nx      [,1] [,2] [,3]\n [1,]    1   11   41\n [2,]    2   12   42\n [3,]    3   13   43\n [4,]    4   14   44\n [5,]    5   15   45\n [6,]    6   16   46\n [7,]    7   17   47\n [8,]    8   18   48\n [9,]    9   19   49\n[10,]   10   20   50\nclass(x)[1] \"matrix\" \"array\" \nx <- rbind(1:10, 11:20, 41:50)\nx     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n[1,]    1    2    3    4    5    6    7    8    9    10\n[2,]   11   12   13   14   15   16   17   18   19    20\n[3,]   41   42   43   44   45   46   47   48   49    50\nclass(x)[1] \"matrix\" \"array\" "},{"path":"structures.html","id":"combine-matrices","chapter":"6 Data Structures","heading":"6.3.4 Combine matrices","text":"cbind() rbind() can used combine two matrices together - vector matrices:","code":"\ncbind(matrix(1, 5, 2), matrix(2, 5, 4))     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    1    1    2    2    2    2\n[2,]    1    1    2    2    2    2\n[3,]    1    1    2    2    2    2\n[4,]    1    1    2    2    2    2\n[5,]    1    1    2    2    2    2"},{"path":"structures.html","id":"arrays","chapter":"6 Data Structures","heading":"6.4 Arrays","text":"Arrays vectors dimensions.\ncan 1D, 2D -D, .e. ND arrays.","code":""},{"path":"structures.html","id":"d-array","chapter":"6 Data Structures","heading":"6.4.1 1D array","text":"1D array just like vector class array dim(x) equal length(x) (remember, vectors length(x) undefined dim(x)):quite unlikely need use 1D array instead vector.","code":"\nx <- 1:10\nxa <- array(1:10, dim = 10)\nclass(x)[1] \"integer\"\nis.vector(x)[1] TRUE\nlength(x)[1] 10\ndim(x)NULL\nclass(xa)[1] \"array\"\nis.vector(xa)[1] FALSE\nlength(xa)[1] 10\ndim(xa)[1] 10"},{"path":"structures.html","id":"d-array-1","chapter":"6 Data Structures","heading":"6.4.2 2D array","text":"2D array matrix:","code":"\nx <- array(1:40, dim = c(10, 4))\nclass(x)[1] \"matrix\" \"array\" \ndim(x)[1] 10  4"},{"path":"structures.html","id":"nd-array","chapter":"6 Data Structures","heading":"6.4.3 ND array","text":"can build N-dimensional array:can provide names dimensions using dimnames argument. accepts list elements character vector legth equal dimension length. Using example , pass three character vector length 5, 4, 3 match length dimensions:3D arrays can used represent color images. , just fun, use rasterImage show visualize image:","code":"\n(x <- array(1:60, dim = c(5, 4, 3))), , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    6   11   16\n[2,]    2    7   12   17\n[3,]    3    8   13   18\n[4,]    4    9   14   19\n[5,]    5   10   15   20\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]   21   26   31   36\n[2,]   22   27   32   37\n[3,]   23   28   33   38\n[4,]   24   29   34   39\n[5,]   25   30   35   40\n\n, , 3\n\n     [,1] [,2] [,3] [,4]\n[1,]   41   46   51   56\n[2,]   42   47   52   57\n[3,]   43   48   53   58\n[4,]   44   49   54   59\n[5,]   45   50   55   60\nclass(x)[1] \"array\"\nx <- array(1:60,\n            dim = c(5, 4, 3),\n            dimnames = list(letters[1:5],\n                            c(\"alpha\", \"beta\", \"gamma\", \"delta\"),\n                            c(\"x\", \"y\", \"z\")))\nx <- array(sample(1:255, 432, TRUE), dim = c(12, 12, 3))\npar(\"pty\")[1] \"m\"\npar(pty = \"s\")\nplot(NULL, NULL,\n     xlim = c(0, 100), ylim = c(0, 100),\n     axes = F, ann = F, pty = \"s\")\nrasterImage(x/255, 0, 0, 100, 100)"},{"path":"structures.html","id":"lists","chapter":"6 Data Structures","heading":"6.5 Lists","text":"define list, use list() pass number objects.\nobjects passed named arguments, names rename element names:","code":"\nx <- list(one = 1:4,\n          two = sample(seq(0, 100, .1), 10),\n          three = c(\"mango\", \"banana\", \"tangerine\"),\n          four = median)\nclass(x)[1] \"list\"\nstr(x)List of 4\n $ one  : int [1:4] 1 2 3 4\n $ two  : num [1:10] 36 87.4 25.8 16.3 9.6 87.7 45.7 65 61.2 31.1\n $ three: chr [1:3] \"mango\" \"banana\" \"tangerine\"\n $ four :function (x, na.rm = FALSE, ...)  "},{"path":"structures.html","id":"nested-lists","chapter":"6 Data Structures","heading":"6.5.1 Nested lists","text":"Since element can object , simple build nested list:","code":"\nx <- list(alpha = letters[sample(26, 4)],\n          beta = sample(12),\n          gamma = list(i = rnorm(10),\n                       j = runif(10),\n                       j = seq(0, 1000, length.out = 10)))\nx$alpha\n[1] \"b\" \"w\" \"k\" \"i\"\n\n$beta\n [1]  3  9  7  8  2 11 10 12  1  6  5  4\n\n$gamma\n$gamma$i\n [1]  1.612901811  0.607746017 -0.680081287 -0.001043907  1.517339177\n [6]  0.917328945 -1.532191188  0.221988037  0.244443591  1.327159248\n\n$gamma$j\n [1] 0.94858370 0.68754591 0.23983337 0.76477570 0.21280491 0.08073839\n [7] 0.51003002 0.38106618 0.77052183 0.08827202\n\n$gamma$j\n [1]    0.0000  111.1111  222.2222  333.3333  444.4444  555.5556  666.6667\n [8]  777.7778  888.8889 1000.0000"},{"path":"structures.html","id":"initialize-a-list","chapter":"6 Data Structures","heading":"6.5.2 Initialize a list","text":"","code":"\nx <- vector(\"list\", 4)\nx[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL\n\n[[4]]\nNULL"},{"path":"structures.html","id":"combine-lists","chapter":"6 Data Structures","heading":"6.5.3 Combine lists","text":"can combine lists c() (just like vectors):","code":"\nl1 <- list(q = 11:14, r = letters[11:14])\nl2 <- list(s = LETTERS[21:24], t = 100:97)\n(x <- c(l1, l2))$q\n[1] 11 12 13 14\n\n$r\n[1] \"k\" \"l\" \"m\" \"n\"\n\n$s\n[1] \"U\" \"V\" \"W\" \"X\"\n\n$t\n[1] 100  99  98  97\nlength(x)[1] 4"},{"path":"structures.html","id":"mixing-types-with-c","chapter":"6 Data Structures","heading":"6.5.4 Mixing types with c()","text":"’s best use c() either combine elements type vector, combine lists, otherwise must inspect outcome certain intended.’ve seen, arguments passed c() single type, get vector type:arguments passed c() mix numeric character, get coerced character.pass types objects (coerced character) get list, since structure can support together:\nconcatenating vectors type lists larger list, probably best avoid using c() directly constructing object want using, e.g. list().\n","code":"\n(x <- c(12.9, 94.67, 23.74, 46.901))[1] 12.900 94.670 23.740 46.901\nclass(x)[1] \"numeric\"\n(x <- c(23.54, \"mango\", \"banana\", 75))[1] \"23.54\"  \"mango\"  \"banana\" \"75\"    \nclass(x)[1] \"character\"\n(x <- c(42, mean, \"potatoes\"))[[1]]\n[1] 42\n\n[[2]]\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x7fb471ef4388>\n<environment: namespace:base>\n\n[[3]]\n[1] \"potatoes\"\nclass(x)[1] \"list\""},{"path":"structures.html","id":"data-frames","chapter":"6 Data Structures","heading":"6.6 Data frames","text":"\ndata frames special type list element length forms column, resulting 2D structure. Unlike matrices, column can contain different data type.\n","code":"\nx <- data.frame(Feat_1 = 1:5,\n                Feat_2 = rnorm(5),\n                Feat_3 = paste0(\"rnd_\", sample(seq(100), 5)))\nx  Feat_1      Feat_2 Feat_3\n1      1  0.01530612 rnd_89\n2      2 -1.44659523 rnd_24\n3      3 -1.27083971  rnd_8\n4      4 -0.88029316 rnd_33\n5      5 -0.67147436 rnd_11\nclass(x)[1] \"data.frame\"\nstr(x)'data.frame':   5 obs. of  3 variables:\n $ Feat_1: int  1 2 3 4 5\n $ Feat_2: num  0.0153 -1.4466 -1.2708 -0.8803 -0.6715\n $ Feat_3: chr  \"rnd_89\" \"rnd_24\" \"rnd_8\" \"rnd_33\" ...\nclass(x$Feat_1)[1] \"integer\"\nmat <- matrix(1:100, 10)\nlength(mat)[1] 100\ndf <- as.data.frame(mat)\nlength(df)[1] 10"},{"path":"structures.html","id":"attributes","chapter":"6 Data Structures","heading":"6.7 Attributes","text":"R objects may builtin attributes can add arbitrary attributes R object. used store additional information, sometimes called metadata.","code":""},{"path":"structures.html","id":"print-all-attributes","chapter":"6 Data Structures","heading":"6.7.1 Print all attributes","text":"print object’s attributes, use attributes:returns named list. case got names, class, row.names iris data frame.","code":"\nattributes(iris)$names\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\n$class\n[1] \"data.frame\"\n\n$row.names\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108\n[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126\n[127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144\n[145] 145 146 147 148 149 150"},{"path":"structures.html","id":"get-or-set-specific-attributes","chapter":"6 Data Structures","heading":"6.7.2 Get or set specific attributes","text":"can assign new attributes using attr:Printing vector adding new attribute, prints attribute name value underneath vector :trusty str function print attributes well","code":"\n(x <- c(1:10)) [1]  1  2  3  4  5  6  7  8  9 10\nattr(x, \"name\") <- \"Very special vector\"\nx [1]  1  2  3  4  5  6  7  8  9 10\nattr(,\"name\")\n[1] \"Very special vector\"\nstr(x) int [1:10] 1 2 3 4 5 6 7 8 9 10\n - attr(*, \"name\")= chr \"Very special vector\""},{"path":"structures.html","id":"a-matrix-is-a-vector---a-closer-look","chapter":"6 Data Structures","heading":"6.7.2.1 A matrix is a vector - a closer look","text":"Let’s see matrix literally just vector assigned dimensions.\nStart vector length 20:vector attributes - yet:convert matrix, normally pass vector matrix() function define number rows /columns:Just demonstration, let’s instead directly add dimension attribute vector:Just like , matrix.","code":"\nx <- 1:20\nx [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\nattributes(x)NULL\nxm <- matrix(x, 5)\nxm     [,1] [,2] [,3] [,4]\n[1,]    1    6   11   16\n[2,]    2    7   12   17\n[3,]    3    8   13   18\n[4,]    4    9   14   19\n[5,]    5   10   15   20\nattributes(xm)$dim\n[1] 5 4\nattr(x, \"dim\") <- c(5, 4)\nx     [,1] [,2] [,3] [,4]\n[1,]    1    6   11   16\n[2,]    2    7   12   17\n[3,]    3    8   13   18\n[4,]    4    9   14   19\n[5,]    5   10   15   20\nclass(x)[1] \"matrix\" \"array\" "},{"path":"structures.html","id":"common-builtin-attributes","chapter":"6 Data Structures","heading":"6.7.3 Common builtin attributes","text":"Vectors can named elements. new vector names, can add :Matrices data frames can column names (colnames) row names (rownames):Lists vectors names. can defined list created using name-value pairs added/changed time.Add/Change names:Remember data frame special type list. Therefore data frames colnames names equivalent:Note: saw, matrices colnames rownames. Using names matrix assign names individual elements, long vector - usually useful.","code":"\nx <- rnorm(10)\nnames(x)NULL\nnames(x) <- paste0(\"Value\", seq(x))\nx    Value1     Value2     Value3     Value4     Value5     Value6     Value7 \n-0.2664962 -0.3417241  0.2375586 -0.9246520 -0.4278786  1.3263591  0.8974578 \n    Value8     Value9    Value10 \n 1.0546539  0.4859710 -1.2453742 \nx <- matrix(1:15, 5)\ncolnames(x)NULL\nrownames(x)NULL\ncolnames(x) <- paste0(\"Feature\", seq(3))\nrownames(x) <- paste0(\"Case\", seq(5))\nx      Feature1 Feature2 Feature3\nCase1        1        6       11\nCase2        2        7       12\nCase3        3        8       13\nCase4        4        9       14\nCase5        5       10       15\nx <- list(HospitalName = \"CaliforniaGeneral\",\n          ParticipatingDepartments = c(\"Neurology\", \"Psychiatry\", \"Neurosurgery\"),\n          PatientIDs = 1001:1253)\nnames(x)[1] \"HospitalName\"             \"ParticipatingDepartments\"\n[3] \"PatientIDs\"              \nnames(x) <- c(\"Hospital\", \"Departments\", \"PIDs\")\nx$Hospital\n[1] \"CaliforniaGeneral\"\n\n$Departments\n[1] \"Neurology\"    \"Psychiatry\"   \"Neurosurgery\"\n\n$PIDs\n  [1] 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015\n [16] 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030\n [31] 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045\n [46] 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060\n [61] 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075\n [76] 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090\n [91] 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105\n[106] 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120\n[121] 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135\n[136] 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150\n[151] 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165\n[166] 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180\n[181] 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195\n[196] 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210\n[211] 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225\n[226] 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240\n[241] 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253\ncolnames(iris)[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \nnames(iris)[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     "},{"path":"factors.html","id":"factors","chapter":"7 Factors","heading":"7 Factors","text":"Factors R used store categorical variables therefore many important uses statistics / data science / machine learning.\nFigure 7.1: Factors R - Best read chapter first refer back figure\ncan create factor passing numeric character vector factor() .factor().\ndifference .factor() accept arguments factor() - can important. right .\nfactor contains three crucial pieces information:\n\n\nunderlying integer vector\n\n\nunderlying integer vector\n\n\nmapping integers labels\n\n\nmapping integers labels\n\n\nWhether factor ordered\n\n\nWhether factor ordered\nLet’s unpack .Begin simple factor:Internally, command sees two distinct labels, female male, defaults assigning integer numbers alphabetically, case female mapped ‘1’ male ‘2.’Printing factor prints vector labels followed levels, .e. unique labels.","code":"\nx <- c(\"a\", \"c\", \"d\", \"b\", \"a\", \"a\", \"d\", \"c\")\nxf <- factor(x)\nxf[1] a c d b a a d c\nLevels: a b c d\nclass(xf)[1] \"factor\"\nxftoo <- as.factor(x)\nxftoo[1] a c d b a a d c\nLevels: a b c d\nclass(xftoo)[1] \"factor\"\nx <- factor(c(\"female\", \"female\", \"female\", \"male\", \"male\"))\nx[1] female female female male   male  \nLevels: female male"},{"path":"factors.html","id":"the-underlying-integer-vector","chapter":"7 Factors","heading":"7.1 The underlying integer vector","text":"level assigned integer. (Internally, “data” forms elements factor vector). don’t see integers unless convert factor numeric (.numeric()) look (truncated) output str()","code":"\nas.numeric(x)[1] 1 1 1 2 2"},{"path":"factors.html","id":"the-mapping-of-integers-to-labels","chapter":"7 Factors","heading":"7.2 The mapping of integers to labels","text":"defines integer mapped label, .e. whether 1 mapped male female. can store information regardless one choose call 1 2.get mapping can use levels(). prints labels order:, means female mapped 1 male mapped 2.tells x factor,\ntwo levels labeled “female” “male,” order, .e. female level 1 male level 2.\nlast part shows first five elements (case whole vector) consists three elements level 1 (female) followed 2 elements level 2 (male)","code":"\nlevels(x)[1] \"female\" \"male\"  \nstr(x) Factor w/ 2 levels \"female\",\"male\": 1 1 1 2 2"},{"path":"factors.html","id":"setting-new-level-labels","chapter":"7 Factors","heading":"7.2.1 Setting new level labels","text":"can use levels() command assignment assign new labels factor (syntax use rownames() colnames() assign new row column names matrix data frame)","code":"\nxf <- factor(sample(c(\"patient_status_positive\", \"patient_status_negative\"), 10, T),\n             levels = c(\"patient_status_positive\", \"patient_status_negative\"))\nxf [1] patient_status_negative patient_status_negative patient_status_negative\n [4] patient_status_negative patient_status_positive patient_status_negative\n [7] patient_status_positive patient_status_negative patient_status_negative\n[10] patient_status_negative\nLevels: patient_status_positive patient_status_negative\nlevels(xf)[1] \"patient_status_positive\" \"patient_status_negative\"\nlevels(xf) <- c(\"positive\", \"negative\")\nxf [1] negative negative negative negative positive negative positive negative\n [9] negative negative\nLevels: positive negative"},{"path":"factors.html","id":"defining-the-mapping-of-labels-to-integers","chapter":"7 Factors","heading":"7.2.2 Defining the mapping of labels to integers","text":"want define mapping labels integer representation (default sorted alphabeticaly), use levels arguments factor() function.vector passed levels arguments must include least unique values passed factor(), otherwise get NA valuesWithout defining levels assigned alphabeticaly:Define levels:table command number useful applications, simplest form, tabulates number elements unique value found vector:forget (choose exclude) level, occurences replaced NA:know levels exist, even examples present sample, can includes extra levels:","code":"\nx <- factor(c(\"alpha\", \"alpha\", \"gamma\", \"delta\", \"delta\"))\nx[1] alpha alpha gamma delta delta\nLevels: alpha delta gamma\nx <- factor(c(\"alpha\", \"alpha\", \"gamma\", \"delta\", \"delta\"),\n levels = c(\"alpha\", \"gamma\", \"delta\"))\nx[1] alpha alpha gamma delta delta\nLevels: alpha gamma delta\ntable(x)x\nalpha gamma delta \n    2     1     2 \nx <- factor(c(\"alpha\", \"alpha\", \"gamma\", \"delta\", \"delta\"),\n levels = c(\"alpha\", \"gamma\"))\nx[1] alpha alpha gamma <NA>  <NA> \nLevels: alpha gamma\nx <- factor(c(\"alpha\", \"alpha\", \"gamma\", \"delta\", \"delta\"),\n levels = c(\"alpha\", \"beta\", \"gamma\", \"delta\"))\nx[1] alpha alpha gamma delta delta\nLevels: alpha beta gamma delta\ntable(x)x\nalpha  beta gamma delta \n    2     0     1     2 "},{"path":"factors.html","id":"is-the-factor-ordered","chapter":"7 Factors","heading":"7.3 Is the factor ordered","text":"looked can define order levels using levels argument factor(), affects integer mapping label.can affect applications treat different levels.top order mapping, can define quantitative relationship among levels form level 1 < level 2 < ... < level n. , turn, can affect factor treated functions, like functions fit statistical models.\nfactors’ levels appear order .\n\nordered factor indicates levels quantitative relationship form level 1 < level 2 < … < level n.\nFirst unordered factor:make ordered factor, need define order levels levels arguments also specify ordered ordered argument:Note levels now include < sign levels indicate ordering.","code":"\ndat <- sample(c(\"small\", \"medium\", \"large\"), 10, TRUE)\nx <- factor(dat)\nx [1] small  large  small  medium large  large  medium medium medium medium\nLevels: large medium small\nx <- factor(dat,\n            levels = c(\"small\", \"medium\", \"large\"),\n            ordered = TRUE)\nx [1] small  large  small  medium large  large  medium medium medium medium\nLevels: small < medium < large"},{"path":"factors.html","id":"change-order-of-levels-or-labels","chapter":"7 Factors","heading":"7.4 Change (order of levels) or (labels)","text":"’ve seen create factor defined order levels change level labels already. prone serious accidents, let’s look , together.change order levels existing factor use factor():Change order target first (.e. corresponds 1:change labels levels use levels():\nChanging levels factor levels() change internal integer representation changes every element’s label.\n","code":"\nx <- factor(c(\"target\", \"target\", \"control\", \"control\", \"control\"))\nx[1] target  target  control control control\nLevels: control target\nx <- factor(x, levels = c(\"target\", \"control\"))\nx[1] target  target  control control control\nLevels: target control\nx[1] target  target  control control control\nLevels: target control\nlevels(x) <- c(\"hit\", \"decoy\")\nx[1] hit   hit   decoy decoy decoy\nLevels: hit decoy"},{"path":"factors.html","id":"fatal-error-to-avoid","chapter":"7 Factors","heading":"7.5 Fatal error to avoid","text":"Example scenario: receive dataset classification outcome factor 1s 0s:classification procedures expect first level ‘positive’ outcome, decide reorder levels.mistakenly use levels() instead factor(x, levels=c(...)) hoping achieve .end flipping outcome values.zeros became ones ones became zeros.don’t notice .model exact opposite intended.-> Don’t ever .","code":"\noutcome <- factor(c(1, 1, 0, 0, 0, 1, 0))\noutcome[1] 1 1 0 0 0 1 0\nLevels: 0 1\nlevels(outcome) <- c(\"1\", \"0\")\noutcome[1] 0 0 1 1 1 0 1\nLevels: 1 0"},{"path":"factors.html","id":"factor-to-numeric","chapter":"7 Factors","heading":"7.6 Factor to numeric","text":"often makes sense factors words labels, can character includes numbers (.e. numbers treated labels)behaves just like factor rules learned .easy trap fall , ever decide convert factor numeric.first thing usually comes mind use .numeric().! already know return integer index, return labels numbers.understanding internal representation factor, .e. factor integer vector indexing set labels, can convert labels numeric exactly indexing set labels:suggests used index within brackets, f coerced integer, therefore understand :different way around may less confusing simply convert factor character numeric:","code":"\nf <- factor(c(3, 7, 7, 9, 3, 3, 9))\nf[1] 3 7 7 9 3 3 9\nLevels: 3 7 9\n# !don't do this!\nas.numeric(f)[1] 1 2 2 3 1 1 3\nlevels(f)[f][1] \"3\" \"7\" \"7\" \"9\" \"3\" \"3\" \"9\"\nlevels(f)[1] \"3\" \"7\" \"9\"\nlevels(f)[as.integer(f)][1] \"3\" \"7\" \"7\" \"9\" \"3\" \"3\" \"9\"\n# same as\nlevels(f)[f][1] \"3\" \"7\" \"7\" \"9\" \"3\" \"3\" \"9\"\nas.numeric(as.character(f))[1] 3 7 7 9 3 3 9"},{"path":"factors.html","id":"summary","chapter":"7 Factors","heading":"7.7 Summary","text":"\n\nFactors R integer vectors labels.\n\n\nFactors R integer vectors labels.\n\n\nfactor’s internal integer values range 1 number levels, .e. categories.\n\n\nfactor’s internal integer values range 1 number levels, .e. categories.\n\n\ninteger corresponds label.\n\n\ninteger corresponds label.\n\n\nUse factor(levels = c(…)) order levels\n\n\nUse factor(levels = c(…)) order levels\n\n\nUse levels(x) change levels’ labels\n\n\nUse levels(x) change levels’ labels\n\navoid confusion, use numbers level labels, possible.\n","code":""},{"path":"indexing.html","id":"indexing","chapter":"8 Indexing - Subsetting - Slicing","heading":"8 Indexing - Subsetting - Slicing","text":"index used select elements vector, matrix, array, list data frame.\ncan select (exclude) one multiple elements time.index one two types:logical index: elements object specify TRUE want include , FALSE exclude selection.integer index: define position elements select.main indexing operator R square bracket [.\nLogical indexes usually created output logical operation, e.g. elemntwise comparison.\nInteger indexing R 1-based, meaning first item vector position 1.\n(wondering even mention , know many programming languages use 0-based indexing)","code":""},{"path":"indexing.html","id":"indexvectors","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.1 Vectors","text":"Get 5th element vector (integer index):Get elements 6 9 vector (integer index):Select elements value greater 19 (logical index):","code":"\nx <- 15:24\nx [1] 15 16 17 18 19 20 21 22 23 24\nx[5][1] 19\nx[6:9][1] 20 21 22 23\nx[x > 19][1] 20 21 22 23 24"},{"path":"indexing.html","id":"indexmatrices","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.2 Matrices","text":"Reminder:matrix 2D vector contains elements one type (numeric, integer, character, factor).data frame 2D list column can contain different type data.index 2D structure, whether matrix data frame, use form [row, column]\nfollowing indexing operations therefore whether applied matrix data frame.get contents fifth row, second column:want select entire row entire column, leave row column index blank, - necessarily - use comma:Get first row:Get second column:Note colnames rownames added matrix convenience - absent, labels shown element.","code":"\nmat <- matrix(1:40, 10)\ncolnames(mat) <- paste0(\"Feature_\", seq(ncol(mat)))\nrownames(mat) <- paste0(\"Row_\", seq(nrow(mat)))\nmat       Feature_1 Feature_2 Feature_3 Feature_4\nRow_1          1        11        21        31\nRow_2          2        12        22        32\nRow_3          3        13        23        33\nRow_4          4        14        24        34\nRow_5          5        15        25        35\nRow_6          6        16        26        36\nRow_7          7        17        27        37\nRow_8          8        18        28        38\nRow_9          9        19        29        39\nRow_10        10        20        30        40\ndf <- as.data.frame(mat)\ndf       Feature_1 Feature_2 Feature_3 Feature_4\nRow_1          1        11        21        31\nRow_2          2        12        22        32\nRow_3          3        13        23        33\nRow_4          4        14        24        34\nRow_5          5        15        25        35\nRow_6          6        16        26        36\nRow_7          7        17        27        37\nRow_8          8        18        28        38\nRow_9          9        19        29        39\nRow_10        10        20        30        40\nmat[5, 2][1] 15\ndf[5, 2][1] 15\nmat[1, ]Feature_1 Feature_2 Feature_3 Feature_4 \n        1        11        21        31 \nmat[, 2] Row_1  Row_2  Row_3  Row_4  Row_5  Row_6  Row_7  Row_8  Row_9 Row_10 \n    11     12     13     14     15     16     17     18     19     20 "},{"path":"indexing.html","id":"range-of-rows-and-columns","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.2.1 Range of rows and columns","text":"can define ranges rows columns:can return rows /columns reversed desired:use vectors specify rows columns:","code":"\nmat[6:7, 2:4]      Feature_2 Feature_3 Feature_4\nRow_6        16        26        36\nRow_7        17        27        37\nmat[7:6, 4:2]      Feature_4 Feature_3 Feature_2\nRow_7        37        27        17\nRow_6        36        26        16\nmat[c(2, 4, 7), c(1, 4, 3)]      Feature_1 Feature_4 Feature_3\nRow_2         2        32        22\nRow_4         4        34        24\nRow_7         7        37        27"},{"path":"indexing.html","id":"matrix-of-indexes","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.2.2 Matrix of indexes","text":"quite less common, potentially useful. allows specify series individual [, j] indexes (.e. way select multiple non-contiguous elements)n--2 matrix can used index length n vector [row, colum] indexes. Therefore, matrix, return elements [2, 4], [4, 3], [7, 1]:","code":"\nidm <- matrix(c(2, 4, 7, 4, 3, 1), 3)\nidm     [,1] [,2]\n[1,]    2    4\n[2,]    4    3\n[3,]    7    1\nmat[idm][1] 32 24  7"},{"path":"indexing.html","id":"matidl","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.2.3 Logical index","text":"Select rows values greater 15 second column:logical index operation :can used directly index matrix:","code":"\nmat[, 2] > 15 Row_1  Row_2  Row_3  Row_4  Row_5  Row_6  Row_7  Row_8  Row_9 Row_10 \n FALSE  FALSE  FALSE  FALSE  FALSE   TRUE   TRUE   TRUE   TRUE   TRUE \nmat[mat[, 2] > 15, ]       Feature_1 Feature_2 Feature_3 Feature_4\nRow_6          6        16        26        36\nRow_7          7        17        27        37\nRow_8          8        18        28        38\nRow_9          9        19        29        39\nRow_10        10        20        30        40"},{"path":"indexing.html","id":"indexlists","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.3 Lists","text":"Reminder: list can contain elements different class different length:can access list element :$ followed name element (therefore works elements named)using double brackets [[ either name integer indexTo access third element:access element name integer index stored variable, bracket notation works - therefore programmatically always use double brackets access different elements:$ [[ return element.\ncontrast, single bracket [ indexing list returns pruned list:vs.Extract multiple list elements single brackets, expected:Beware (confusing) recursive indexing.\n(probably rarely used).\nUnlike single brackets example , colon notation double brackets accesses elements recursively given position.\nfollowing extracts 3rd element 2nd element list:can convert list one lone vector containing individual components original list using unlist(). Notice names automatically created based original structure:","code":"\n(x <- list(one = 1:4,\n           two = sample(seq(0, 100, .1), 10),\n           three = c(\"mango\", \"banana\", \"tangerine\"),\n           four = median))$one\n[1] 1 2 3 4\n\n$two\n [1] 19.3 43.7  9.0 59.0 40.4 23.8 13.6 77.3 27.4  3.8\n\n$three\n[1] \"mango\"     \"banana\"    \"tangerine\"\n\n$four\nfunction (x, na.rm = FALSE, ...) \nUseMethod(\"median\")\n<bytecode: 0x7fc81b0b08f8>\n<environment: namespace:stats>\nx$three[1] \"mango\"     \"banana\"    \"tangerine\"\nx[[\"three\"]][1] \"mango\"     \"banana\"    \"tangerine\"\nclass(x[[\"three\"]])[1] \"character\"\nx[[3]][1] \"mango\"     \"banana\"    \"tangerine\"\nidi <- 3\nidc <- \"three\"\nx[[idi]][1] \"mango\"     \"banana\"    \"tangerine\"\nx[[idc]][1] \"mango\"     \"banana\"    \"tangerine\"\nx[[idi]][1] \"mango\"     \"banana\"    \"tangerine\"\nclass(x[[idi]])[1] \"character\"\nx[idi]$three\n[1] \"mango\"     \"banana\"    \"tangerine\"\nclass(x[idi])[1] \"list\"\nx[2:3]$two\n [1] 19.3 43.7  9.0 59.0 40.4 23.8 13.6 77.3 27.4  3.8\n\n$three\n[1] \"mango\"     \"banana\"    \"tangerine\"\nclass(x[2:3])[1] \"list\"\nx[[2:3]][1] 9\n(x <- list(alpha = sample(seq(100), 10),\n          beta = sample(seq(100), 10),\n          gamma = sample(seq(100), 10)))$alpha\n [1] 63  5 10 83 98 30 24 79 34 66\n\n$beta\n [1] 50 56 75 85 47 68 43 28 79 34\n\n$gamma\n [1] 63 50 72 44 65 86  6 76 56 20\nunlist(x) alpha1  alpha2  alpha3  alpha4  alpha5  alpha6  alpha7  alpha8  alpha9 alpha10 \n     63       5      10      83      98      30      24      79      34      66 \n  beta1   beta2   beta3   beta4   beta5   beta6   beta7   beta8   beta9  beta10 \n     50      56      75      85      47      68      43      28      79      34 \n gamma1  gamma2  gamma3  gamma4  gamma5  gamma6  gamma7  gamma8  gamma9 gamma10 \n     63      50      72      44      65      86       6      76      56      20 "},{"path":"indexing.html","id":"idllist","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.3.1 Logical index","text":"can use logical index list well:","code":"\nx[c(T, F, T, F)]$alpha\n [1] 63  5 10 83 98 30 24 79 34 66\n\n$gamma\n [1] 63 50 72 44 65 86  6 76 56 20"},{"path":"indexing.html","id":"indexdfs","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.4 Data frames","text":"’ve already seen data frame can indexed ways matrix.\ntime, know data frame rectangular list. Like list, elements vectors type (integer, double, character, factor, ) , unlike list, length. data frame can also indexed way list.\nSimilar indexing list, notice methods return smaller data frame, others return vectors.\ncan index data frame using ways can index list ways can index matrix.\nLet’s create simple data frame:","code":"\nx <- data.frame(Feat_1 = 21:25,\n                Feat_2 = rnorm(5),\n                Feat_3 = paste0(\"rnd_\", sample(seq(100), 5)))\nx  Feat_1      Feat_2 Feat_3\n1     21  0.32486737 rnd_37\n2     22  0.70125433 rnd_54\n3     23 -0.08201909  rnd_2\n4     24 -0.24750644 rnd_74\n5     25  0.60954856 rnd_28"},{"path":"indexing.html","id":"extract-columns","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.4.1 Extract column(s)","text":"Just like list, using $ operator returns element, .e. vector:Accessing column name square brackets, returns single-column data.frame:, similar list, double square brackets, access element within data.frame, vector:Accessing column [row, column] either position name, return vector default:happens, default argument drop set TRUE. Set FALSE return data.frame:lists, exception $ notation, indexing slicing operations work variable holding either column name integer location:Extracting multiple columns returns data frame:","code":"\nx$Feat_2[1]  0.32486737  0.70125433 -0.08201909 -0.24750644  0.60954856\nclass(x$Feat_2)[1] \"numeric\"\nx[\"Feat_2\"]       Feat_2\n1  0.32486737\n2  0.70125433\n3 -0.08201909\n4 -0.24750644\n5  0.60954856\nclass(x[\"Feat_2\"])[1] \"data.frame\"\nx[[\"Feat_2\"]][1]  0.32486737  0.70125433 -0.08201909 -0.24750644  0.60954856\nx[, 2][1]  0.32486737  0.70125433 -0.08201909 -0.24750644  0.60954856\nclass(x[, 2])[1] \"numeric\"\nx[, \"Feat_2\"][1]  0.32486737  0.70125433 -0.08201909 -0.24750644  0.60954856\nclass(x[, \"Feat_2\"])[1] \"numeric\"\nclass(x[, 2, drop = FALSE])[1] \"data.frame\"\nclass(x[, \"Feat_2\", drop = FALSE])[1] \"data.frame\"\nidi <- 2\nidc <- \"Feat_2\"\nx[idi]       Feat_2\n1  0.32486737\n2  0.70125433\n3 -0.08201909\n4 -0.24750644\n5  0.60954856\nx[idc]       Feat_2\n1  0.32486737\n2  0.70125433\n3 -0.08201909\n4 -0.24750644\n5  0.60954856\nx[[idi]][1]  0.32486737  0.70125433 -0.08201909 -0.24750644  0.60954856\nx[[idc]][1]  0.32486737  0.70125433 -0.08201909 -0.24750644  0.60954856\nx[, idi][1]  0.32486737  0.70125433 -0.08201909 -0.24750644  0.60954856\nx[, idc][1]  0.32486737  0.70125433 -0.08201909 -0.24750644  0.60954856\nx[, idi, drop = F]       Feat_2\n1  0.32486737\n2  0.70125433\n3 -0.08201909\n4 -0.24750644\n5  0.60954856\nx[, idc, drop = F]       Feat_2\n1  0.32486737\n2  0.70125433\n3 -0.08201909\n4 -0.24750644\n5  0.60954856\nx[, 2:3]       Feat_2 Feat_3\n1  0.32486737 rnd_37\n2  0.70125433 rnd_54\n3 -0.08201909  rnd_2\n4 -0.24750644 rnd_74\n5  0.60954856 rnd_28\nclass(x[, 2:3])[1] \"data.frame\""},{"path":"indexing.html","id":"extract-rows","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.4.2 Extract rows","text":"row small data.frame, since contains multiple columns:Convert list using c():Convert (named) vector using unlist():","code":"\nx[1, ]  Feat_1    Feat_2 Feat_3\n1     21 0.3248674 rnd_37\nclass(x[1, ])[1] \"data.frame\"\nc(x[1, ])$Feat_1\n[1] 21\n\n$Feat_2\n[1] 0.3248674\n\n$Feat_3\n[1] \"rnd_37\"\nclass(c(x[1, ]))[1] \"list\"\nunlist(x[1, ])             Feat_1              Feat_2              Feat_3 \n               \"21\" \"0.324867365782229\"            \"rnd_37\" \nclass(unlist(x[1, ]))[1] \"character\""},{"path":"indexing.html","id":"dfidl","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.4.3 Logical index","text":"","code":"\nx[x$Feat_1 > 22, ]  Feat_1      Feat_2 Feat_3\n3     23 -0.08201909  rnd_2\n4     24 -0.24750644 rnd_74\n5     25  0.60954856 rnd_28"},{"path":"indexing.html","id":"logical---integer-indexing","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.5 Logical <-> Integer indexing","text":"saw, two types indexes/indices: integer logical.\n\nlogical index needs dimensions object indexing (unless really want recycle values - see chapter vectorization):\nspecifying whether include exclude element\n\n\nlogical index needs dimensions object indexing (unless really want recycle values - see chapter vectorization):\nspecifying whether include exclude element\n\n\ninteger index shorter object indexing: specifying subset elements include (- front, elements exclude)\n\n\ninteger index shorter object indexing: specifying subset elements include (- front, elements exclude)\n’s easy convert two types.example, start sequence integers:Let’s create logical index based two inequalities:","code":"\nx <- 21:30\nx [1] 21 22 23 24 25 26 27 28 29 30\nlogical_index <- x > 23 & x < 28\nlogical_index [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE"},{"path":"indexing.html","id":"logical-to-integer-index-with-which","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.5.1 Logical to integer index with which():","text":"\ncommon mistake attempt convert logical index integer index using .integer(). results vector 1’s 0’s, integer index.() converts logical index integer index.\n() literally gives position TRUE elements vector, thus converting logical integer index:.e. positions 4, 5, 6, 7 logical_index TRUE\nlogical integer index equivalent select exact elements\nLet’s check used index x, return result:","code":"\ninteger_index <- which(logical_index)\ninteger_index[1] 4 5 6 7\nx[logical_index][1] 24 25 26 27\nx[integer_index][1] 24 25 26 27\nall(x[logical_index] == x[integer_index])[1] TRUE"},{"path":"indexing.html","id":"integer-to-logical-index","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.5.2 Integer to logical index","text":"hand, want convert integer index logical index, can begin logical vector length dimension object want index FALSE values:use integer index replace corresponding elements TRUE:, course, logical index started .","code":"\nlogical_index_too <- vector(length = length(x))\nlogical_index_too [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nlogical_index_too[integer_index] <- TRUE\nlogical_index_too [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE\nall(logical_index == logical_index_too)[1] TRUE"},{"path":"indexing.html","id":"exclude-cases-using-an-index","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.6 Exclude cases using an index","text":"often, want use index, whether logical integer, exclude cases instead select cases.\nlogical integer, simply use exclamation point front index negate element (convert TRUE FALSE FALSE TRUE):exclude elements using integer index, R allows use negative indexing:\nget complement index, negate logical index (!logical_index) subtract integer index (-integer_index):\n","code":"\nlogical_index [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE\n!logical_index [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\nx[!logical_index][1] 21 22 23 28 29 30\nx[-integer_index][1] 21 22 23 28 29 30"},{"path":"indexing.html","id":"subset","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.7 subset()","text":"subset() allows filter cases meet certain conditions using subset argument, optionally also select columns using select argument:(head() returns first lines data frame. use avoid printing many lines)Note: can use column name Sepal.Length directly, .e. unquoted don’t need use iris$Sepal.Length. (called Non-Standard Evaluation, NSE)","code":"\nhead(iris)  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\niris_sl.gt.med <- subset(iris, Sepal.Length > median(Sepal.Length))\nx <- data.frame(one = 1:10,\n                two = rnorm(10),\n                group = c(rep(\"alpha\", 4),  rep(\"beta\", 6)))\nsubset(x, subset = two > 0, select = two)         two\n1  0.3610997\n2  0.9541543\n4  0.2316539\n5  1.2465727\n10 2.4799577\nsubset(x, two > 0, -one)         two group\n1  0.3610997 alpha\n2  0.9541543 alpha\n4  0.2316539 alpha\n5  1.2465727  beta\n10 2.4799577  beta\nsubset(x, two > 0, two:one)         two one\n1  0.3610997   1\n2  0.9541543   2\n4  0.2316539   4\n5  1.2465727   5\n10 2.4799577  10\nsubset(x, two > 0, two:group)         two group\n1  0.3610997 alpha\n2  0.9541543 alpha\n4  0.2316539 alpha\n5  1.2465727  beta\n10 2.4799577  beta"},{"path":"indexing.html","id":"split","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.8 split()","text":"Split data frame multiple data frames groups defined factor:","code":"\nx_by_group <- split(x, x$group)"},{"path":"indexing.html","id":"with","chapter":"8 Indexing - Subsetting - Slicing","heading":"8.9 with()","text":"Within () expression, can access data.frame columns without quoting using $ operator:","code":"\nwith(x, x[group == \"alpha\", ])  one        two group\n1   1  0.3610997 alpha\n2   2  0.9541543 alpha\n3   3 -0.2384525 alpha\n4   4  0.2316539 alpha\nwith(x, x[two > 0, ])   one       two group\n1    1 0.3610997 alpha\n2    2 0.9541543 alpha\n4    4 0.2316539 alpha\n5    5 1.2465727  beta\n10  10 2.4799577  beta"},{"path":"vectorization.html","id":"vectorization","chapter":"9 Vectorized Operations","heading":"9 Vectorized Operations","text":"built-R functions vectorized many functions external packages well.\nvectorized function operates elements vector time.\nVectorization efficient: can save human () time machine time.\nmany cases, applying function elements simultaneously may seem obvious expected behavior, since functions vectorized, make sure check documentation unsure.","code":""},{"path":"vectorization.html","id":"operations-between-vectors-of-equal-length","chapter":"9 Vectorized Operations","heading":"9.1 Operations between vectors of equal length","text":"operations applied corresponding elements vector:.e. equal c(x[1] + z[1], x[2] + z[2], ..., x[n] + z[n])","code":"\nx <- 1:10\nz <- 11:20\nx [1]  1  2  3  4  5  6  7  8  9 10\nz [1] 11 12 13 14 15 16 17 18 19 20\nx + z [1] 12 14 16 18 20 22 24 26 28 30"},{"path":"vectorization.html","id":"operations-between-a-vector-and-a-scalar","chapter":"9 Vectorized Operations","heading":"9.2 Operations between a vector and a scalar","text":"cases, scalar essentially recycled, .e. repeated match length vector:","code":"\n(x + 10) [1] 11 12 13 14 15 16 17 18 19 20\n(x * 2) [1]  2  4  6  8 10 12 14 16 18 20\n(x / 10) [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n(x ^ 2) [1]   1   4   9  16  25  36  49  64  81 100"},{"path":"vectorization.html","id":"operations-between-vectors-of-unequal-length-value-recycling","chapter":"9 Vectorized Operations","heading":"9.3 Operations between vectors of unequal length: value recycling","text":"Operations vector scalar special case operations vectors unequal length. Whenever perform operation two objects different length, shorter object’s elements recycled:\nOperations objects unequal length can occur mistake. shorter object’s length multiple longer object’s length, error warning, . Otherwise, warning (may confusing first) recycling still happens highly unlikely intentional:\n","code":"\nx + c(2:1) [1]  3  3  5  5  7  7  9  9 11 11\nx + c(1, 3, 9)Warning in x + c(1, 3, 9): longer object length is not a multiple of shorter\nobject length [1]  2  5 12  5  8 15  8 11 18 11"},{"path":"vectorization.html","id":"vectorized-matrix-operations","chapter":"9 Vectorized Operations","heading":"9.4 Vectorized matrix operations","text":"Operations matrices similarly vectorized, .e. performed corresponding elements:","code":"\na <- matrix(1:4, 2)\nb <- matrix(11:14, 2)\na     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\nb     [,1] [,2]\n[1,]   11   13\n[2,]   12   14\na + b     [,1] [,2]\n[1,]   12   16\n[2,]   14   18\na * b     [,1] [,2]\n[1,]   11   39\n[2,]   24   56\na / b           [,1]      [,2]\n[1,] 0.09090909 0.2307692\n[2,] 0.16666667 0.2857143"},{"path":"vectorization.html","id":"vectorized-functions","chapter":"9 Vectorized Operations","heading":"9.5 Vectorized functions","text":"examples common mathematical operations vectorized:","code":"\nlog(x) [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n [8] 2.0794415 2.1972246 2.3025851\nsqrt(x) [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\nsin(x) [1]  0.8414710  0.9092974  0.1411200 -0.7568025 -0.9589243 -0.2794155\n [7]  0.6569866  0.9893582  0.4121185 -0.5440211\ncos(x) [1]  0.5403023 -0.4161468 -0.9899925 -0.6536436  0.2836622  0.9601703\n [7]  0.7539023 -0.1455000 -0.9111303 -0.8390715"},{"path":"vectorization.html","id":"ifelse","chapter":"9 Vectorized Operations","heading":"9.6 ifelse()","text":"ifelse() vectorized can great compact alternative complicated expression:?equivalent :.e.Create logical index using testfor element test:\nelement TRUE, return yes[], else []\nelement TRUE, return yes[], else []another example, lets take integers 1:11 square odd ones cube even ones. use modulo operation %% test element odd even:","code":"\na <- 1:10\n(y <- ifelse(a > 5, 11:20, 21:30)) [1] 21 22 23 24 25 16 17 18 19 20\nidl <- a > 5\nyes <- 11:20\nno <- 21:30\nout <- vector(\"numeric\", 10)\nfor (i in seq(a)) {\n  if (idl[i]) {\n    out[i] <- yes[i]\n  } else {\n    out[i] <- no[i]\n  }\n}\nout [1] 21 22 23 24 25 16 17 18 19 20\nx <- 1:11\nxsc <- ifelse(x %% 2 == 0, c(1:11)^3, c(1:11)^2)\nxsc [1]    1    8    9   64   25  216   49  512   81 1000  121"},{"path":"dataio.html","id":"dataio","chapter":"10 Data Input/Output","heading":"10 Data Input/Output","text":"","code":""},{"path":"dataio.html","id":"r-datasets","chapter":"10 Data Input/Output","heading":"10.1 R datasets","text":"","code":""},{"path":"dataio.html","id":"datasets-included-with-r-in-package-datasets","chapter":"10 Data Input/Output","heading":"10.1.1 Datasets included with R (in package ‘datasets’)","text":"List built-datasets data() arguments:built-datasets normally readily available R console (datasets package automatically loaded)\ncan check case using search()","code":"\ndata()\nsearch()[1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n[4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n[7] \"package:methods\"   \"Autoloads\"         \"package:base\"     "},{"path":"dataio.html","id":"datasets-included-with-other-packages","chapter":"10 Data Input/Output","heading":"10.1.2 Datasets included with other packages","text":"List dataset included R package:Load dataset R package:Note: quotes around “Sonar” data() command optional.","code":"\ndata(package = \"glmnet\")\ndata(package = \"MASS\")\ndata(package = \"mlbench\")\ndata(Sonar, package = \"mlbench\")"},{"path":"dataio.html","id":"system-commands","chapter":"10 Data Input/Output","heading":"10.2 System commands","text":"Get working directory getwd()can set different working directory setwd()List files current directory:can execute command operating system (OS) -.e. MacOS, Linux, Windows- within R using system() function:Note: See issue ","code":"\ngetwd()\ndir()\nsystem(\"uname -a\")"},{"path":"dataio.html","id":"data-io","chapter":"10 Data Input/Output","heading":"10.3 Data I/O","text":"\nFigure 10.1: Common Data Input/Output commands R\n","code":""},{"path":"dataio.html","id":"read-local-csv","chapter":"10 Data Input/Output","heading":"10.3.1 Read local CSV","text":"read.table() core function reads data formatted text files R, cases correspond lines variables columns. many arguments allow read different formats.read.csv() alias read.table() defaults commas separators dots decimal points. (Run read.csv console print source see read documentation ?read.table).important arguments read.table() listed default values read.csv():sep = \",\": Character separate entries. Default comma; use \" tab-separated files (default setting read.delim())dec = \".\": Character decimal point. Default dot; cases comma used decimal point, entry separator sep may semicolon (default setting read.csv2())na.strings = \"NA\": Character vector strings coded “NA”","code":"\nmen <-  read.csv(\"../Data/pone.0204161.s001.csv\")"},{"path":"dataio.html","id":"read-data-from-the-web","chapter":"10 Data Input/Output","heading":"10.3.2 Read data from the web","text":"read.csv() can directly read online file. second example , also define missing data coded ? using na.strings argument:files read two popular online data repositories. Confusingly, neither file ends .csv, work read.csv(). Always look plain text file first determine can work read.table() /read.csv() settings use.","code":"\nparkinsons <- read.csv(\"https://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/parkinsons.data\")\n\nsleep <- read.csv(\"https://www.openml.org/data/get_csv/53273/sleep.arff\",\n                  na.strings = \"?\")"},{"path":"dataio.html","id":"read-zipped-data-from-the-web","chapter":"10 Data Input/Output","heading":"10.3.3 Read zipped data from the web","text":"","code":""},{"path":"dataio.html","id":"using-gzcon-and-csv.read","chapter":"10 Data Input/Output","heading":"10.3.3.1 using gzcon() and csv.read()","text":"read.table() /read.csv() also accepts “connection” input.\ndefine connection zipped file nesting gzcon() url():read connection specify file tab-separated, call read.delim():","code":"\ncon <- gzcon(url(\"https://github.com/EpistasisLab/pmlb/raw/master/datasets/breast_cancer_wisconsin/breast_cancer_wisconsin.tsv.gz\"),\n             text = TRUE)\nbcw <- read.csv(con, header = TRUE, sep = \"\\t\")\n\n#same as\nbcw <- read.delim(con, header = TRUE)"},{"path":"dataio.html","id":"using-data.tables-fread","chapter":"10 Data Input/Output","heading":"10.3.3.2 using data.table’s fread()","text":"can also use data.table’s fread(), directly handle zipped files:want stick using data frames, set argument data.table FALSE:","code":"\nlibrary(data.table)\nbcw2 <- fread(\"https://github.com/EpistasisLab/penn-ml-benchmarks/raw/master/datasets/classification/breast-cancer-wisconsin/breast-cancer-wisconsin.tsv.gz\")\nbcw2 <- fread(\"https://github.com/EpistasisLab/penn-ml-benchmarks/raw/master/datasets/classification/breast-cancer-wisconsin/breast-cancer-wisconsin.tsv.gz\",\n              data.table = FALSE)"},{"path":"dataio.html","id":"write-to-csv","chapter":"10 Data Input/Output","heading":"10.3.4 Write to CSV","text":"Use write.csv() function write R object (usually data frame matrix) CSV file. Setting row.names = FALSE usually good idea. (Instead storing data rownames, ’s usually best create new column.)Note case need save row names (just integers 1 150 add useless extra column output)","code":"\nwrite.csv(iris, \"../Data/iris.csv\", row.names = FALSE)"},{"path":"dataio.html","id":"read-.xslx-using-openxlsxread.xlsx","chapter":"10 Data Input/Output","heading":"10.3.5 Read .xslx using openxlsx::read.xlsx()","text":"example, can read csv saved earlier Excel save .xlsx file.Note: openxlsx::read.xlsx() work relative path like \"./Data/iris.xlsc\". Therefore used normalizePath() function give us full path file without type .Check data still identical:","code":"\niris.path <- normalizePath(\"../Data/iris.xlsx\")\niris2 <- openxlsx::read.xlsx(iris.path)\nall(iris == iris2)"},{"path":"dataio.html","id":"write-an-r-object-to-rds","chapter":"10 Data Input/Output","heading":"10.3.6 Write an R object to RDS","text":"can write R object directly file can recover time, share , etc. Remember since list can contain number objects type, can save collection objects RDS file. multiple objects, see also save.image() command .load object saved rds file, assign object using readRDS():","code":"\nsaveRDS(iris, \"iris.rds\")\niris_fromFile <- readRDS(\"iris.rds\")\nall(iris == iris_fromFile)"},{"path":"dataio.html","id":"write-multiple-r-objects-to-rdata-file-using-save","chapter":"10 Data Input/Output","heading":"10.3.7 Write multiple R objects to RData file using save()","text":"Note: learn use sapply() later “Loop functions”load variables .RData file saved, use load() command:Note load() adds objects workspace using original names. assign new object, unlike readRDS() call .","code":"\nmat1 <- sapply(seq_len(10), function(i) rnorm(500))\nmat2 <- sapply(seq_len(10), function(i) rnorm(500))\nsave(mat1, mat2, file = \"./mat.RData\")\nload(\"./Rmd/mat.RData\")"},{"path":"dataio.html","id":"write-your-entire-workspace-to-a-rdata-image-using-save.image","chapter":"10 Data Input/Output","heading":"10.3.8 Write your entire workspace to a RData image using save.image()","text":"can save entire workspace RData file using save.image() function., re-load workspace saved .RData file, use load() command:","code":"\nsave.image(\"workspace_10_05_2020.RData\")\nload(\"workspace_10_05_2020.RData\")"},{"path":"controlflow.html","id":"controlflow","chapter":"11 Control flow","heading":"11 Control flow","text":"Code often executed linearly (.e. line--line). Control flow (flow control) operations define order code segments executed.Execution often conditional (- - else switch).Segments code may repeated multiple times () long certain conditions met ().Control flow operations form fundamental building blocks programs. operation simple - combine enough can build amount complexity.[Condition] [Expression] else [Alternate Expression][Variable Sequence] [Expression][Condition] [Expression]repeat [Expression] breakbreak: break , repeat loopnext: skip current iteration proceed next","code":""},{"path":"controlflow.html","id":"if---then---else","chapter":"11 Control flow","heading":"11.1 if - then - else:","text":"","code":"\na <- 4\nif (a < 10) {\n  cat(\"a is not that big\")\n} else {\n  cat(\"a is not too small\")\n}a is not that big"},{"path":"controlflow.html","id":"if---then---else-if---else","chapter":"11 Control flow","heading":"11.2 if - then - else if - else:","text":"","code":"\na <- sample(seq(-2, 2, .5), 1)\na[1] -0.5\nif (a > 0) {\n  result <- \"positive\"\n} else if (a == 0) {\n  result <- \"zero\"\n} else {\n  result <- \"negative\"\n}\nresult[1] \"negative\""},{"path":"controlflow.html","id":"conditional-assignment-with-if---else","chapter":"11 Control flow","heading":"11.3 Conditional assignment with if - else:","text":"can use statement part assignment:","code":"\na <- 8\ny <- if (a > 5) {\n  10\n} else {\n  0\n}"},{"path":"controlflow.html","id":"conditional-assignment-with-ifelse","chapter":"11 Control flow","heading":"11.4 Conditional assignment with ifelse:","text":"ifelse vectorized:","code":"\na <- 3\n(y <- ifelse(a > 5, 10, 0))[1] 0\na <- 1:10\n(y <- ifelse(a > 7, a^2, a)) [1]   1   2   3   4   5   6   7  64  81 100"},{"path":"controlflow.html","id":"for-loops","chapter":"11 Control flow","heading":"11.5 for loops","text":"\nUse loops repeat execution block code certain number times.\nloop syntax (var vector) expression.\nexpression usually surrounded curly brackets can include number lines, amount code:loop executes length(vector) times.\niteration , var = vector[].\noften use value var inside loop (don’t ):letters built-constant includes 26 lowercase letters Roman alphabet; LETTERS similarly includes 26 uppercase letters.","code":"\nfor (i in 1:5) {\n  print(\"I love coffee\")\n}[1] \"I love coffee\"\n[1] \"I love coffee\"\n[1] \"I love coffee\"\n[1] \"I love coffee\"\n[1] \"I love coffee\"\nfor (i in seq(10)) {\n  cat(i^2, \"\\n\")\n}1 \n4 \n9 \n16 \n25 \n36 \n49 \n64 \n81 \n100 \nfor (letter in letters[1:5]) {\n  cat(letter, \"is a letter!\\n\")\n}a is a letter!\nb is a letter!\nc is a letter!\nd is a letter!\ne is a letter!"},{"path":"controlflow.html","id":"working-on-data-within-a-for-loop-fordata","chapter":"11 Control flow","heading":"11.5.1 Working on data within a for loop {fordata}","text":"common scenario involves working data object, whether vector, matrix, list, data.frame, performing operation elements, one time. lot operations often performed using loop functions instead, loops can certainly used.can start initializing object appropriate class dimensions hold output. , iteration loop assign output corresponding element/s object.following example transform mtcars built-dataset’s features z-scores.\nbuilt-command scale() quickly conveniently, demonstration purposes:First, initialize output desired class dimensions:, much simpler just make copy mtcars overwritten loop later:Standardization involves subtracting mean dividing standard deviation.loop - iterate column assign transformed data:Let’s compare output scale() command print first 3 rows columns :Note wrapped scale() around .data.frame() outputs matrix.can check elements ():","code":"\nclass(mtcars)[1] \"data.frame\"\ndim(mtcars)[1] 32 11\nmtcars_z <- data.frame(matrix(0, 32, 11))\ncolnames(mtcars_z) <- colnames(mtcars)\nmtcars_z <- mtcars\nfor (i in 1:ncol(mtcars)) {\n  mtcars_z[, i] <- (mtcars[, i] - mean(mtcars[, i])) / sd(mtcars[, i])\n}\nmtcars_z2 <- as.data.frame(scale(mtcars))\nmtcars_z[1:3, 1:3]                    mpg        cyl       disp\nMazda RX4     0.1508848 -0.1049878 -0.5706198\nMazda RX4 Wag 0.1508848 -0.1049878 -0.5706198\nDatsun 710    0.4495434 -1.2248578 -0.9901821\nmtcars_z2[1:3, 1:3]                    mpg        cyl       disp\nMazda RX4     0.1508848 -0.1049878 -0.5706198\nMazda RX4 Wag 0.1508848 -0.1049878 -0.5706198\nDatsun 710    0.4495434 -1.2248578 -0.9901821\nall(mtcars_z == mtcars_z2)[1] TRUE"},{"path":"controlflow.html","id":"nested-for-loops","chapter":"11 Control flow","heading":"11.5.2 Nested for loops","text":"","code":"\na <- matrix(1:9, 3)\nfor (i in seq(3)) {\n  for (j in seq(3)) {\n    cat(\"  a[\", i, \",\", j, \"] is \", a[i, j], \"\\n\", sep = \"\")\n  }\n}  a[1,1] is 1\n  a[1,2] is 4\n  a[1,3] is 7\n  a[2,1] is 2\n  a[2,2] is 5\n  a[2,3] is 8\n  a[3,1] is 3\n  a[3,2] is 6\n  a[3,3] is 9"},{"path":"controlflow.html","id":"select-one-of-multiple-alternatives-with-switch","chapter":"11 Control flow","heading":"11.6 Select one of multiple alternatives with switch","text":"Instead using multiple - else statements, can build compact call using switch. (best suited options type character, rather numeric)","code":"\ny <- sample(letters[seq(8)], 1)\ny[1] \"e\"\noutput <- switch(y,                      # 1. Some expression\n                 a = \"Well done\",        # 2. The possible values of the expression, unquoted\n                 b = \"Not bad\",          #    followed by the `=` and the conditional output\n                 c = \"Nice try\",\n                 d = \"Not a nice try\",\n                 e = \"This is bad\",\n                 f = \"Fail\",\n                 \"This is not even a possible grade\") # 3. An optional last argument is the default\n                                                      #    value, if there is no match above\noutput[1] \"This is bad\"\na <- rnorm(1)\na[1] 0.3697853\nout <- switch(as.integer(a > 0),\n              `1` = \"Input is positive\",\n              `0` = \"Input is not positive\")\nout[1] \"Input is positive\"\na <- rnorm(1)\na[1] 0.6376295\nout <- switch(as.character(a > 0),\n              `TRUE` = \"Input is positive\",\n              `FALSE` = \"Input is not positive\")\nout[1] \"Input is positive\""},{"path":"controlflow.html","id":"switch-example-http-status-codes","chapter":"11 Control flow","heading":"11.6.1 switch example: HTTP Status Codes","text":"","code":"\nstatus <- sample(400:410, 1)\nstatus[1] 408\nresponse <- switch(as.character(status),\n                   `400` = \"Bad Request\",\n                   `401` = \"Unauthorized\",\n                   `402` = \"Payment Required\",\n                   `403` = \"Forbidden\",\n                   `404` = \"Not Found\",\n                   `405` = \"Method Not Allowed\",\n                   `406` = \"Not Acceptable\",\n                   `407` = \"Proxy Authentication Required\",\n                   `408` = \"Request Timeout\",\n                   `409` = \"Conflict\",\n                   `410` = \"Gone\")\nresponse[1] \"Request Timeout\""},{"path":"controlflow.html","id":"while-loops","chapter":"11 Control flow","heading":"11.7 while loops","text":"","code":"\na <- 10\nwhile (a > 0) {\n  a <- a - 1\n  cat(\"a is equal to\", a, \"\\n\")\n}a is equal to 9 \na is equal to 8 \na is equal to 7 \na is equal to 6 \na is equal to 5 \na is equal to 4 \na is equal to 3 \na is equal to 2 \na is equal to 1 \na is equal to 0 \ncat(\"when all is said and done, a is\", a)when all is said and done, a is 0"},{"path":"controlflow.html","id":"break-stops-execution-of-a-loop","chapter":"11 Control flow","heading":"11.8 break stops execution of a loop:","text":"","code":"\nfor (i in seq(10)) {\n  if (i == 5) break()\n  cat(i, \"squared is\", i^2, \"\\n\")\n}1 squared is 1 \n2 squared is 4 \n3 squared is 9 \n4 squared is 16 "},{"path":"controlflow.html","id":"next-skips-the-current-iteration","chapter":"11 Control flow","heading":"11.9 next skips the current iteration:","text":"","code":"\nfor (i in seq(7)) {\n  if (i == 5) next()\n  cat(i, \"squared is\", i^2, \"\\n\")\n}1 squared is 1 \n2 squared is 4 \n3 squared is 9 \n4 squared is 16 \n6 squared is 36 \n7 squared is 49 "},{"path":"controlflow.html","id":"repeat-loops","chapter":"11 Control flow","heading":"11.10 repeat loops","text":"repeat initiates infinite loop must use break exit. Probably best use type loop instead.","code":"\ni <- 10\nrepeat {\n i <- i - 1\n if (i == 0) break()\n cat(\"i is\", i, \"\\n\")\n}i is 9 \ni is 8 \ni is 7 \ni is 6 \ni is 5 \ni is 4 \ni is 3 \ni is 2 \ni is 1 "},{"path":"loopfns.html","id":"loopfns","chapter":"12 Loop Functions","heading":"12 Loop Functions","text":"Loop functions widely used R functions. replace longer expressions created loop, example.\ncan result compact readable code often faster execute loop.apply(): Apply function array margins (.e. one dimensions)lapply(): Return list element result applying function element inputsapply(): lapply(), returns simplest possible R object (instead always returning list)vapply(): sapply(), pre-specify return type: safer may also fastertapply(): Apply function elements groups defined factormapply(): Multivariate version sapply(): Apply function using first elements inputs vectors, using second, third, \nFigure 12.1: *apply() function family summary (Best read chapter first refer back figure)\nstarting use functions, need learn anonymous functions, often used within apply functions.","code":""},{"path":"loopfns.html","id":"apply","chapter":"12 Loop Functions","heading":"12.1 apply()","text":"\napply() applies function one dimensions array 2 dimensions (includes matrices) data frame:\n\napply(array, MARGIN, FUN)\nMARGIN can integer vector character indicating dimensions ‘FUN’ applied.convention, rows come first (just like indexing), therefore:MARGIN = 1: apply function row\nMARGIN = 2: apply function columnLet’s calculate mean value first four columns iris dataset:\nHint: possibly easiest think “MARGIN” dimension want keep.\ncase, want mean variable, .e. want keep columns collapse rows.\nequivalent :wanted get mean rows (makes little sense case):\napply() works objects defined (.e. non-NULL) dim(), .e. arrays.\n\nTry think can’t use apply() apply function fn() vector v.\n\n…\n\n…\n\nfn(v)\n","code":"\nx <- iris[, -5]\niris_column_mean <- apply(x, MARGIN = 2, FUN = mean) \niris_column_meanSepal.Length  Sepal.Width Petal.Length  Petal.Width \n    5.843333     3.057333     3.758000     1.199333 \niris_column_mean <- numeric(ncol(x))\nnames(iris_column_mean) <- names(x)\n\nfor (i in seq(x)) {\n  iris_column_mean[i] <- mean(x[, i])\n}\niris_column_meanSepal.Length  Sepal.Width Petal.Length  Petal.Width \n    5.843333     3.057333     3.758000     1.199333 \nhead(apply(x, 1, mean))[1] 2.550 2.375 2.350 2.350 2.550 2.850"},{"path":"loopfns.html","id":"lapply","chapter":"12 Loop Functions","heading":"12.2 lapply()","text":"\nlapply() applies function element input returns list outputs.\nNote: ‘elements’ data frame columns (remember, data frame list equal-length elements). ‘elements’ matrix cell one one, column. Therefore lapply() different effect data frame matrix. lapply() commonly used iterate columns data frame.lapply() function *apply() family always returns list.equivalent :","code":"\niris.median <- lapply(iris[, -5], median)\niris.median$Sepal.Length\n[1] 5.8\n\n$Sepal.Width\n[1] 3\n\n$Petal.Length\n[1] 4.35\n\n$Petal.Width\n[1] 1.3\niris.median <- vector(\"list\", 4)\nnames(iris.median) <- colnames(iris[, -5])\nfor (i in 1:4) {\n  iris.median[[i]] <- median(iris[, 1])\n}"},{"path":"loopfns.html","id":"sapply","chapter":"12 Loop Functions","heading":"12.3 sapply()","text":"sapply() alias lapply(), followed call simplify2array().\n(Check source code sapply() typing sapply console hitting Enter).\nUnlike lapply(), output sapply() variable: simplest R object can hold data type(s) resulting operations, .e. vector, matrix, data frame, list.\n","code":"\niris.median <- sapply(iris[, -5], median)\niris.medianSepal.Length  Sepal.Width Petal.Length  Petal.Width \n        5.80         3.00         4.35         1.30 \niris.summary <- data.frame(Mean = sapply(iris[, -5], mean),\n                           SD = sapply(iris[, -5], sd))\niris.summary                 Mean        SD\nSepal.Length 5.843333 0.8280661\nSepal.Width  3.057333 0.4358663\nPetal.Length 3.758000 1.7652982\nPetal.Width  1.199333 0.7622377"},{"path":"loopfns.html","id":"vapply","chapter":"12 Loop Functions","heading":"12.4 vapply()","text":"Much less commonly used (possibly underused) lapply() sapply(), vapply() allows specify expected output looks like - example numeric vector length 2, character vector length 1.can two advantages:safer errorsIt sometimes little fasterYou add argument FUN.VALUE must correct type length expected result iteration., iteration returns median column, .e. numeric vector length 1.\nTherefore FUN.VALUE can numeric scalar.example, instead returned range column, FUN.VALUE numeric vector length 1:FUN.VALUE match returned value, get informative error:","code":"\nvapply(iris[, -5], median, FUN.VALUE = .1)Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n        5.80         3.00         4.35         1.30 \nvapply(iris[, -5], range, FUN.VALUE = rep(.1, 2))     Sepal.Length Sepal.Width Petal.Length Petal.Width\n[1,]          4.3         2.0          1.0         0.1\n[2,]          7.9         4.4          6.9         2.5\nvapply(iris[, -5], range, FUN.VALUE = .1)Error in vapply(iris[, -5], range, FUN.VALUE = 0.1): values must be length 1,\n but FUN(X[[1]]) result is length 2"},{"path":"loopfns.html","id":"tapply","chapter":"12 Loop Functions","heading":"12.5 tapply()","text":"tapply() one way (many) apply function subgroups data defined one factors.\nfollowing example, calculate mean Sepal.Length species iris dataset:equivalent :","code":"\nmean_Sepal.Length_by_Species <- tapply(iris$Sepal.Length, iris$Species, mean)\nmean_Sepal.Length_by_Species    setosa versicolor  virginica \n     5.006      5.936      6.588 \nspecies <- levels(iris$Species)\nmean_Sepal.Length_by_Species <- vector(\"numeric\", length(species))\nnames(mean_Sepal.Length_by_Species) <- species\n\nfor (i in seq(species)) {\n  mean_Sepal.Length_by_Species[i] <- \n    mean(iris$Sepal.Length[iris$Species == species[i]])\n}\nmean_Sepal.Length_by_Species    setosa versicolor  virginica \n     5.006      5.936      6.588 "},{"path":"loopfns.html","id":"mapply","chapter":"12 Loop Functions","heading":"12.6 mapply()","text":"functions work well iterating elements single object.mapply() allows execute function accepts two inputs, say fn(x, z) using -th element input, return:fn(x[1], z[1]), fn(x[2], z[2]), …, fn(x[n], z[n])Let’s create simple function accepts two numeric arguments, two vectors length 5 :Use mapply raise x corresponding p:equivalent :","code":"\nraise <- function(x, power) x^power\nx <- 2:6\np <- 6:2\nout <- mapply(raise, x, p)\nout[1]  64 243 256 125  36\nout <- vector(\"numeric\", 5)\nfor (i in seq(5)) {\n  out[i] <- raise(x[i], p[i])\n}\nout[1]  64 243 256 125  36"},{"path":"loopfns.html","id":"iterating-over-a-sequence-instead-of-an-object","chapter":"12 Loop Functions","heading":"12.7 Iterating over a sequence instead of an object","text":"lapply(), sapply() vapply() simple trick may often come handy:\nInstead iterating elements object, can iterate integer index whichever elements want access use accordingly within anonymous function.\nalternative approach much closer use integer sequence loop.\nclearer example:Get mean first four columns iris:Notice alternative approach, since passing object (iris, ) input lapply(), therefore needs specified within anonymous function.","code":"\n# original way: iterate through elements i.e. columns:\nsapply(iris[, -5], function(i) mean(i))Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n    5.843333     3.057333     3.758000     1.199333 \n# alternative way: iterate over integer index of elements:\nsapply(1:4, function(i) mean(iris[, i]))[1] 5.843333 3.057333 3.758000 1.199333\n# equivalent to:\nfor (i in 1:4) {\n  mean(iris[, i])\n}"},{"path":"loopfns.html","id":"applying-on-matrices-vs.-data-frames","chapter":"12 Loop Functions","heading":"12.8 *apply()ing on matrices vs. data frames","text":"consolidate learned , let’s focus difference working matrix vs. data frame.\nFirst, let’s create matrix data frame data:’ve seen apply() specify dimension operate works way matrices data frames:However, sapply() (lapply(), vapply()) acts element object, therefore meaningful pass matrix :returns mean element, .e. element , pointless.Since data frame list, columns elements, works great column operations data frames:want use sapply() matrix, iterate integer sequence shown previous section:shown help emphasize differences function data structures. practice, use apply() matrix.","code":"\namat <- matrix(21:70, 10)\ncolnames(amat) <- paste0(\"Feature_\", 1:ncol(amat))\namat      Feature_1 Feature_2 Feature_3 Feature_4 Feature_5\n [1,]        21        31        41        51        61\n [2,]        22        32        42        52        62\n [3,]        23        33        43        53        63\n [4,]        24        34        44        54        64\n [5,]        25        35        45        55        65\n [6,]        26        36        46        56        66\n [7,]        27        37        47        57        67\n [8,]        28        38        48        58        68\n [9,]        29        39        49        59        69\n[10,]        30        40        50        60        70\nadf <- as.data.frame(amat)\nadf   Feature_1 Feature_2 Feature_3 Feature_4 Feature_5\n1         21        31        41        51        61\n2         22        32        42        52        62\n3         23        33        43        53        63\n4         24        34        44        54        64\n5         25        35        45        55        65\n6         26        36        46        56        66\n7         27        37        47        57        67\n8         28        38        48        58        68\n9         29        39        49        59        69\n10        30        40        50        60        70\napply(amat, 2, mean)Feature_1 Feature_2 Feature_3 Feature_4 Feature_5 \n     25.5      35.5      45.5      55.5      65.5 \napply(adf, 2, mean)Feature_1 Feature_2 Feature_3 Feature_4 Feature_5 \n     25.5      35.5      45.5      55.5      65.5 \nsapply(amat, mean) [1] 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\n[26] 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70\nsapply(adf, mean)Feature_1 Feature_2 Feature_3 Feature_4 Feature_5 \n     25.5      35.5      45.5      55.5      65.5 \nsapply(1:ncol(amat), function(i) mean(amat[, i]))[1] 25.5 35.5 45.5 55.5 65.5"},{"path":"loopfns.html","id":"anonymous-functions","chapter":"12 Loop Functions","heading":"12.9 Anonymous functions","text":"Anonymous functions just like regular functions assigned object - .e. “named.”\nusually passed arguments functions used , hence need name .\nR, anonymous functions often used apply family functions.Example simple regular function:short function definition, can also written single line without curly brackets:equivalent anonymous function , omitting assignment:Let’s use squared() function within sapply() square first four columns iris dataset. examples, often wrap functions around head() prints first lines object avoid:Let’s , time using anonymous function:entire anonymous function definition passed function argument (FUN R documentation).","code":"\nsquared <- function(x) {\n  x^2\n}\nsquared <- function(x) x^2\nfunction(x) x^2function(x) x^2\nhead(iris[, 1:4])  Sepal.Length Sepal.Width Petal.Length Petal.Width\n1          5.1         3.5          1.4         0.2\n2          4.9         3.0          1.4         0.2\n3          4.7         3.2          1.3         0.2\n4          4.6         3.1          1.5         0.2\n5          5.0         3.6          1.4         0.2\n6          5.4         3.9          1.7         0.4\niris_sq <- sapply(iris[, 1:4], squared)\nhead(iris_sq)     Sepal.Length Sepal.Width Petal.Length Petal.Width\n[1,]        26.01       12.25         1.96        0.04\n[2,]        24.01        9.00         1.96        0.04\n[3,]        22.09       10.24         1.69        0.04\n[4,]        21.16        9.61         2.25        0.04\n[5,]        25.00       12.96         1.96        0.04\n[6,]        29.16       15.21         2.89        0.16\niris_sqtoo <- sapply(iris[, 1:4], function(x) x^2)\nhead(iris_sqtoo)     Sepal.Length Sepal.Width Petal.Length Petal.Width\n[1,]        26.01       12.25         1.96        0.04\n[2,]        24.01        9.00         1.96        0.04\n[3,]        22.09       10.24         1.69        0.04\n[4,]        21.16        9.61         2.25        0.04\n[5,]        25.00       12.96         1.96        0.04\n[6,]        29.16       15.21         2.89        0.16"},{"path":"summarize.html","id":"summarize","chapter":"13 Summarizing Data","heading":"13 Summarizing Data","text":"Let’s read dataset OpenML:","code":"\nheart <- read.csv(\"https://www.openml.org/data/get_csv/51/dataset_51_heart-h.arff\",\n                  na.strings = \"?\")"},{"path":"summarize.html","id":"get-summary-of-an-r-object-with-summary","chapter":"13 Summarizing Data","heading":"13.1 Get summary of an R object with summary()","text":"R includes summary() methods number different objects.","code":"\nsummary(heart)      age            sex             chest_pain           trestbps    \n Min.   :28.00   Length:294         Length:294         Min.   : 92.0  \n 1st Qu.:42.00   Class :character   Class :character   1st Qu.:120.0  \n Median :49.00   Mode  :character   Mode  :character   Median :130.0  \n Mean   :47.83                                         Mean   :132.6  \n 3rd Qu.:54.00                                         3rd Qu.:140.0  \n Max.   :66.00                                         Max.   :200.0  \n                                                       NA's   :1      \n      chol           fbs              restecg             thalach     \n Min.   : 85.0   Length:294         Length:294         Min.   : 82.0  \n 1st Qu.:209.0   Class :character   Class :character   1st Qu.:122.0  \n Median :243.0   Mode  :character   Mode  :character   Median :140.0  \n Mean   :250.8                                         Mean   :139.1  \n 3rd Qu.:282.5                                         3rd Qu.:155.0  \n Max.   :603.0                                         Max.   :190.0  \n NA's   :23                                            NA's   :1      \n    exang              oldpeak          slope                 ca     \n Length:294         Min.   :0.0000   Length:294         Min.   :0    \n Class :character   1st Qu.:0.0000   Class :character   1st Qu.:0    \n Mode  :character   Median :0.0000   Mode  :character   Median :0    \n                    Mean   :0.5861                      Mean   :0    \n                    3rd Qu.:1.0000                      3rd Qu.:0    \n                    Max.   :5.0000                      Max.   :0    \n                                                        NA's   :291  \n     thal               num           \n Length:294         Length:294        \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      "},{"path":"summarize.html","id":"fast-builtin-column-and-row-operations","chapter":"13 Summarizing Data","heading":"13.2 Fast builtin column and row operations","text":"saw Loop Functions can apply functions rows, columns, subsets data. R optimized builtin functions common operations, self-explanatory names:colSums(): column sumsrowSums(): row sumscolMeans(): column meansrowMeans(): row means","code":"\na <- matrix(1:20, 5)\na     [,1] [,2] [,3] [,4]\n[1,]    1    6   11   16\n[2,]    2    7   12   17\n[3,]    3    8   13   18\n[4,]    4    9   14   19\n[5,]    5   10   15   20\ncolSums(a)[1] 15 40 65 90\n# same as\napply(a, 2, sum)[1] 15 40 65 90\nrowSums(a)[1] 34 38 42 46 50\n# same as\napply(a, 1, sum)[1] 34 38 42 46 50\ncolMeans(a)[1]  3  8 13 18\n# same as\napply(a, 2, mean)[1]  3  8 13 18\nrowMeans(a)[1]  8.5  9.5 10.5 11.5 12.5\n# same as\napply(a, 1, mean)[1]  8.5  9.5 10.5 11.5 12.5"},{"path":"summarize.html","id":"optimized-matrix-operations-with-matrixstats","chapter":"13 Summarizing Data","heading":"13.3 Optimized matrix operations with matrixStats","text":"builtin operations already optimized faster equivalent calls, matrixStats package (Bengtsson 2019) offers number futher optimized matrix operations, including drop-replacements . prefered dealing bigger data:Note: matrixStats provides replacement functions named almost identically base counterpart - easy find - different - don’t mask base functions (important good software design).","code":"\nlibrary(matrixStats)\ncolSums2(a)[1] 15 40 65 90\nrowSums2(a)[1] 34 38 42 46 50\ncolMeans2(a)[1]  3  8 13 18\nrowMeans2(a)[1]  8.5  9.5 10.5 11.5 12.5"},{"path":"summarize.html","id":"grouped-summary-statistics-with-aggregate","chapter":"13 Summarizing Data","heading":"13.4 Grouped summary statistics with aggregate()","text":"aggregate() powerful way apply functions splits data. can replicate functionality *apply() family, can flexible/powerful supports formula input.Alternatively, compact formula notation can used get result.\n. left hand side represents features, excluding right hand side:define multiple specific variables left hand side formula within aggregate(), use cbind():Let’s make second grouping:“Group2” divides iris Species first last 25 cases.\nLet’s aggregate Species Group2:compact formula notation can convenient :Note: Using aggregate = list() argument easier code . formula notation might easier work real time console. can code formula notation, alternative ’s unlikely worth extra steps.","code":"\naggregate(iris[, -5], by = list(iris$Species), mean)     Group.1 Sepal.Length Sepal.Width Petal.Length Petal.Width\n1     setosa        5.006       3.428        1.462       0.246\n2 versicolor        5.936       2.770        4.260       1.326\n3  virginica        6.588       2.974        5.552       2.026\naggregate(. ~ Species, iris, mean)     Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n1     setosa        5.006       3.428        1.462       0.246\n2 versicolor        5.936       2.770        4.260       1.326\n3  virginica        6.588       2.974        5.552       2.026\naggregate(cbind(Sepal.Length, Sepal.Width) ~ Species, iris, mean)     Species Sepal.Length Sepal.Width\n1     setosa        5.006       3.428\n2 versicolor        5.936       2.770\n3  virginica        6.588       2.974\nirisd <- iris\nirisd$Group2 <- rep(1:2, 3, each = 25)\nirisd$Group2  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2\n [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [75] 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1\n[112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[149] 2 2\naggregate(irisd[, -c(5, 6)],\n          by = list(Species = irisd$Species, Group2 = irisd$Group2),\n          mean)     Species Group2 Sepal.Length Sepal.Width Petal.Length Petal.Width\n1     setosa      1        5.028       3.480        1.460       0.248\n2 versicolor      1        6.012       2.776        4.312       1.344\n3  virginica      1        6.576       2.928        5.640       2.044\n4     setosa      2        4.984       3.376        1.464       0.244\n5 versicolor      2        5.860       2.764        4.208       1.308\n6  virginica      2        6.600       3.020        5.464       2.008\naggregate(. ~ Species + Group2, irisd, mean)     Species Group2 Sepal.Length Sepal.Width Petal.Length Petal.Width\n1     setosa      1        5.028       3.480        1.460       0.248\n2 versicolor      1        6.012       2.776        4.312       1.344\n3  virginica      1        6.576       2.928        5.640       2.044\n4     setosa      2        4.984       3.376        1.464       0.244\n5 versicolor      2        5.860       2.764        4.208       1.308\n6  virginica      2        6.600       3.020        5.464       2.008"},{"path":"functions.html","id":"functions","chapter":"14 Functions","heading":"14 Functions","text":"Writing functions core part programming.\nwrite function?\nWhenever find repeating pieces code.\nimportant?\nWriting functions helps reduce total amount code, reduces chances error, makes code readable.Reminder: Functions R “first class objects.”\nmeans can pass functions objects like R structure.\nexample, seen can use command like apply(mat, 2, mean)Functions R part like mathematical functions: one inputs one output. inputs known function arguments. want return multiple outputs, can return list containing number R objects.","code":""},{"path":"functions.html","id":"simple-functions","chapter":"14 Functions","heading":"14.1 Simple functions","text":"Let’s start simple function: single argument default value:Notice x^2 automatically returned function. explicitly returning return()::function returns either:object passed return()value last expression within function definition x^2 .Note following function definition return anything:return() way end evaluation early:Multiple arguments, without defaults:","code":"\nsquare <- function(x) {\n  x^2\n}\n\nsquare(3)[1] 9\nsquare <- function(x) {\n  out <- x^2\n  return(out)\n}\n\nsquare(4)[1] 16\nsquare <- function(x) {\n  out <- x^2\n  out\n}\n\nsquare(5)[1] 25\nsq <- function(x) {\n  out <- x^2\n}\n\nsq(5)\nsquare.pos <- function(x) {\n  if (x > 0) {\n    return(x^2)\n  } else {\n    x\n  }\n  cat(\"The input was left unchanged\\n\")\n}\n\nx <- sample(-10:10, 1)\nx[1] 9\nsquare.pos(x)[1] 81\nraise <- function(x, power = 2) {\n  x^power\n}\n\nx <- sample(10, 1)\nx[1] 6\nraise(x)[1] 36\nraise(x, power = 3)[1] 216\nraise(x, 3)[1] 216"},{"path":"functions.html","id":"arguments-with-prescribed-list-of-allowed-values","chapter":"14 Functions","heading":"14.2 Arguments with prescribed list of allowed values","text":"can match specific values argument using match.arg():see partial matching using match.arg() able identify valid option, match, informative error printed.Partial matching also automatically done argument names , ’s important avoid depending .","code":"\nmyfn <- function(type = c(\"alpha\", \"beta\", \"gamma\")) {\n  type <- match.arg(type)\n  cat(\"You have selected type '\", type, \"'\\n\", sep = \"\")\n}\n\nmyfn(\"a\")You have selected type 'alpha'\nmyfn(\"b\")You have selected type 'beta'\nmyfn(\"g\")You have selected type 'gamma'\nmyfn(\"d\")Error in match.arg(type): 'arg' should be one of \"alpha\", \"beta\", \"gamma\"\nadsr <- function(attack = 100,\n                 decay = 250,\n                 sustain = 40,\n                 release = 1000) {\n  cat(\"Attack time:\", attack, \"ms\\n\",\n      \"Decay time:\", decay, \"ms\\n\",\n      \"Sustain level:\", sustain, \"\\n\",\n      \"Release time:\", release, \"ms\\n\")\n}\n\nadsr(50, s = 100, r = 500)Attack time: 50 ms\n Decay time: 250 ms\n Sustain level: 100 \n Release time: 500 ms"},{"path":"functions.html","id":"passing-extra-arguments-to-another-function-with-the-...-argument","chapter":"14 Functions","heading":"14.3 Passing extra arguments to another function with the ... argument","text":"Many functions include ... argument end. arguments otherwise matched collected . common use pass another function:... also used variable number iputs, often first argument function. example, look documentation c, cat, cbind, rbind, pasteNote: arguments ..., must named fully, .e. partially matched.","code":"\ncplot <- function(x, y,\n                  cex = 1.5,\n                  pch = 16,\n                  col = \"#18A3AC\",\n                  bty = \"n\", ...) {\n  plot(x, y, cex = cex, pch = pch, col = col, bty = bty, ...)\n                  }"},{"path":"functions.html","id":"return-multiple-objects","chapter":"14 Functions","heading":"14.4 Return multiple objects","text":"R function can return single object. much problem can simply put collection objects list return :","code":"\nlfn <- function(x, fn = square) {\n  xfn <- fn(x)\n  \n  list(x = x,\n       xfn = xfn,\n       fn = fn)\n}\n\nlfn(3)$x\n[1] 3\n\n$xfn\n[1] 9\n\n$fn\nfunction(x) {\n  out <- x^2\n  out\n}\n<bytecode: 0x7fa226688400>"},{"path":"functions.html","id":"warnings-and-errors","chapter":"14 Functions","heading":"14.5 Warnings and errors","text":"can produce warning point function evaluation using warning(\"warning message \"). cause warning message printed console warning, stop function evaluation.stop function execution, e.g. error encountered, use stop(). following function calculates\n\\[ e^{log_{10}(x)} \\]\ndefined negative x. case let R give error tries compute log10(x), check x write custom error:","code":"\nel10 <- function(x) {\n  if (x < 0) stop(\"x must be positive\")\n  exp(log10(x))\n}\n\nel10(-3)Error in el10(-3): x must be positive\nel10(3)[1] 1.611429"},{"path":"functions.html","id":"scoping","chapter":"14 Functions","heading":"14.6 Scoping","text":"Functions exist environment, .e. contain variable definitions.However, variable referenced within function local definition exists, interpreter look variable parent directory. best rely instead make sure variables passed functions need .following example, x defined outside function definition, referenced within .","code":"\nx <- 3\ny <- 4\nfn <- function(x, y) {\n  x <- 10*x\n  y <- 20*y\n  cat(\"Inside the function, x = \", x, \" and y = \", y, \"\\n\")\n}\n\nfn(x, y)Inside the function, x =  30  and y =  80 \ncat(\"Outside the function, x = \", x, \" and y = \", y, \"\\n\")Outside the function, x =  3  and y =  4 \nx <- 21\n\nitfn <- function(y, lr = 1) {\n  x + lr * y\n}\n\nitfn(3)[1] 24"},{"path":"functions.html","id":"function-vs.-for-loop","chapter":"14 Functions","heading":"14.6.1 function vs. for loop","text":"Let’s z-score built-mtcars dataset loop custom function. links back example seen earlier loop section. practice performed scale() command:Within loop, assigning columns directly object outside loop. following example, print environment outside inside loop function see . purely demonstration:function, operations remain local within function output must returned:Notice environment outside inside loop function , Global environemnt, environment within function different. objects created changed within function must returned want make available.","code":"\n# initialize new object 'mtcars_z'\nmtcars_z <- mtcars\ncat(\"environment outside for loop is: \")environment outside for loop is: \nprint(environment())<environment: R_GlobalEnv>\n# z-score one column at a time in a for loop\nfor (i in 1:ncol(mtcars)) {\n  mtcars_z[, i] <- (mtcars[, i] - mean(mtcars[, i])) / sd(mtcars[, i])\n  cat(\"environment inside for loop is: \")\n  print(environment())\n}environment inside for loop is: <environment: R_GlobalEnv>\nenvironment inside for loop is: <environment: R_GlobalEnv>\nenvironment inside for loop is: <environment: R_GlobalEnv>\nenvironment inside for loop is: <environment: R_GlobalEnv>\nenvironment inside for loop is: <environment: R_GlobalEnv>\nenvironment inside for loop is: <environment: R_GlobalEnv>\nenvironment inside for loop is: <environment: R_GlobalEnv>\nenvironment inside for loop is: <environment: R_GlobalEnv>\nenvironment inside for loop is: <environment: R_GlobalEnv>\nenvironment inside for loop is: <environment: R_GlobalEnv>\nenvironment inside for loop is: <environment: R_GlobalEnv>\nztransform <- function(x) {\n  cat(\"environment inside function body is: \")\n  print(environment())\n  z <- as.data.frame(sapply(mtcars, function(i) (i - mean(i))/sd(i)))\n  rownames(z) <- rownames(x)\n  z\n}\nmtcars_z2 <- ztransform(mtcars)environment inside function body is: <environment: 0x7fa226b456a0>\ncat(\"environment outside function body is: \")environment outside function body is: \nprint(environment())<environment: R_GlobalEnv>"},{"path":"functions.html","id":"pipe","chapter":"14 Functions","heading":"14.7 The pipe operator","text":"\nFigure 14.1: Illustration pipes R\npipe operator first introduced R magrittr\npackage %>% symbol. Note number packages allow endorse use pipes export pipe operator well.Starting R version 4.1, native pipe operator included language |> symbol.pipe allows writing f(x) x |> f() (native pipe) x %>% f (magrittr).\nNote native pipe requires parentheses, magrittr works without .pipe often used avoid multiple temporary assignments multistep procedure, alternative nesting functions. packages developers promote use, discourage . always, big subjective component try see suits .following:equivalent :equivalent :Pipes used extensively tidyverse packages.\ncan learn pipe operator magrittr vignette\nRStudio keyboard shortcut pipe operator Shift Command M (MacOS) Ctrl Shift M (Windows)\n","code":"\nx <- f1(x)\nx <- f2(x)\nx <- f3(x)\nx <- f3(f2(f1(x)))\nx <- x |> f1() |> f2() |> f3()\niris[, -5] |>\n  split(iris$Species) |>\n  lapply(function(i) sapply(i, mean))$setosa\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n       5.006        3.428        1.462        0.246 \n\n$versicolor\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n       5.936        2.770        4.260        1.326 \n\n$virginica\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n       6.588        2.974        5.552        2.026 "},{"path":"dataframes.html","id":"dataframes","chapter":"15 Working with data frames","heading":"15 Working with data frames","text":"","code":""},{"path":"dataframes.html","id":"column-and-row-names","chapter":"15 Working with data frames","heading":"15.1 Column and row names","text":"Example data.frame:Get column names row names colnames() rownames():set new column row names use formcolnames(df) <- new.nameswhere new.names character vector:","code":"\ndf <- data.frame(PID = c(111:119),\n                Hospital = c(\"UCSF\", \"HUP\", \"Stanford\",\n                             \"Stanford\", \"UCSF\", \"HUP\", \n                             \"HUP\", \"Stanford\", \"UCSF\"),\n                Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),\n                Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0),\n                row.names = \"PID\")\ncolnames(df)[1] \"Hospital\" \"Age\"      \"Sex\"     \nrownames(df)[1] \"111\" \"112\" \"113\" \"114\" \"115\" \"116\" \"117\" \"118\" \"119\"\ncolnames(df) <- c(\"Center\", \"Age_at_Dx\", \"Sex\")\nrownames(df) <- paste0(\"Patient_\", 1:9)\ndf            Center Age_at_Dx Sex\nPatient_1     UCSF        22   1\nPatient_2      HUP        34   1\nPatient_3 Stanford        41   0\nPatient_4 Stanford        19   1\nPatient_5     UCSF        53   0\nPatient_6      HUP        21   0\nPatient_7      HUP        63   1\nPatient_8 Stanford        22   0\nPatient_9     UCSF        19   0"},{"path":"dataframes.html","id":"delete-columns-or-rows","chapter":"15 Working with data frames","heading":"15.2 Delete columns or rows","text":"delete data.frame column, set NULL:delete data.frame row, can “index .” example, remove third row:","code":"\ndf$Sex <- NULL\ndf    Center Age_at_Dx\n1     UCSF        22\n2      HUP        34\n3 Stanford        41\n4 Stanford        19\n5     UCSF        53\n6      HUP        21\n7      HUP        63\n8 Stanford        22\n9     UCSF        19\ndf <- df[-3, ]\ndf    Center Age_at_Dx\n1     UCSF        22\n2      HUP        34\n4 Stanford        19\n5     UCSF        53\n6      HUP        21\n7      HUP        63\n8 Stanford        22\n9     UCSF        19"},{"path":"dataframes.html","id":"table-joins-i.e.-merging-data.frames","chapter":"15 Working with data frames","heading":"15.3 Table Joins (i.e. Merging data.frames)","text":"Scenario: received two tables data. table consists unique identifier (ID), shared among tables, plus number variables columns, may unique table. want merge one big table ID available variables.Let’s make data:four main types join operations:\nFigure 15.1: Common Join Operations\n","code":"\na <- data.frame(PID = c(1:9),\n                Hospital = c(\"UCSF\", \"HUP\", \"Stanford\",\n                             \"Stanford\", \"UCSF\", \"HUP\", \n                             \"HUP\", \"Stanford\", \"UCSF\"),\n                Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),\n                Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0))\n\nb  <- data.frame(PID = c(6:12),\n                 V1 = c(153, 89, 112, 228,  91, 190, 101),\n                 Department = c(\"Neurology\", \"Radiology\",\n                                \"Emergency\", \"Cardiology\",\n                                \"Surgery\", \"Neurology\", \"Psychiatry\"))\na  PID Hospital Age Sex\n1   1     UCSF  22   1\n2   2      HUP  34   1\n3   3 Stanford  41   0\n4   4 Stanford  19   1\n5   5     UCSF  53   0\n6   6      HUP  21   0\n7   7      HUP  63   1\n8   8 Stanford  22   0\n9   9     UCSF  19   0\nb  PID  V1 Department\n1   6 153  Neurology\n2   7  89  Radiology\n3   8 112  Emergency\n4   9 228 Cardiology\n5  10  91    Surgery\n6  11 190  Neurology\n7  12 101 Psychiatry\ndim(a)[1] 9 4\ndim(b)[1] 7 3"},{"path":"dataframes.html","id":"inner-join","chapter":"15 Working with data frames","heading":"15.3.1 Inner join","text":"default arguments merge() perform inner join:Note resulting table contains cases found data frames (.e. IDs 6 9)","code":"\n(ab.inner <- merge(a, b))  PID Hospital Age Sex  V1 Department\n1   6      HUP  21   0 153  Neurology\n2   7      HUP  63   1  89  Radiology\n3   8 Stanford  22   0 112  Emergency\n4   9     UCSF  19   0 228 Cardiology\n# same as\n(ab.inner <- merge(a, b, by = \"PID\"))  PID Hospital Age Sex  V1 Department\n1   6      HUP  21   0 153  Neurology\n2   7      HUP  63   1  89  Radiology\n3   8 Stanford  22   0 112  Emergency\n4   9     UCSF  19   0 228 Cardiology\n# same as\n(ab.inner <- merge(a, b, all = FALSE))  PID Hospital Age Sex  V1 Department\n1   6      HUP  21   0 153  Neurology\n2   7      HUP  63   1  89  Radiology\n3   8 Stanford  22   0 112  Emergency\n4   9     UCSF  19   0 228 Cardiology"},{"path":"dataframes.html","id":"outer-join","chapter":"15 Working with data frames","heading":"15.3.2 Outer join","text":"can perform outer join specifying = TRUE:Note resulting data frame contains IDs found either input data frame missing values represented NA","code":"\n(ab.outer <- merge(a, b, all = TRUE))   PID Hospital Age Sex  V1 Department\n1    1     UCSF  22   1  NA       <NA>\n2    2      HUP  34   1  NA       <NA>\n3    3 Stanford  41   0  NA       <NA>\n4    4 Stanford  19   1  NA       <NA>\n5    5     UCSF  53   0  NA       <NA>\n6    6      HUP  21   0 153  Neurology\n7    7      HUP  63   1  89  Radiology\n8    8 Stanford  22   0 112  Emergency\n9    9     UCSF  19   0 228 Cardiology\n10  10     <NA>  NA  NA  91    Surgery\n11  11     <NA>  NA  NA 190  Neurology\n12  12     <NA>  NA  NA 101 Psychiatry\n(ab.outer <- merge(a, b, by = \"PID\", all = TRUE))   PID Hospital Age Sex  V1 Department\n1    1     UCSF  22   1  NA       <NA>\n2    2      HUP  34   1  NA       <NA>\n3    3 Stanford  41   0  NA       <NA>\n4    4 Stanford  19   1  NA       <NA>\n5    5     UCSF  53   0  NA       <NA>\n6    6      HUP  21   0 153  Neurology\n7    7      HUP  63   1  89  Radiology\n8    8 Stanford  22   0 112  Emergency\n9    9     UCSF  19   0 228 Cardiology\n10  10     <NA>  NA  NA  91    Surgery\n11  11     <NA>  NA  NA 190  Neurology\n12  12     <NA>  NA  NA 101 Psychiatry"},{"path":"dataframes.html","id":"left-outer-join","chapter":"15 Working with data frames","heading":"15.3.3 Left outer join","text":"can perform left outer join specifying .x = TRUE:Note resulting data frame contains IDs present left input data frame .","code":"\n(ab.leftOuter <- merge(a, b, all.x = TRUE))  PID Hospital Age Sex  V1 Department\n1   1     UCSF  22   1  NA       <NA>\n2   2      HUP  34   1  NA       <NA>\n3   3 Stanford  41   0  NA       <NA>\n4   4 Stanford  19   1  NA       <NA>\n5   5     UCSF  53   0  NA       <NA>\n6   6      HUP  21   0 153  Neurology\n7   7      HUP  63   1  89  Radiology\n8   8 Stanford  22   0 112  Emergency\n9   9     UCSF  19   0 228 Cardiology"},{"path":"dataframes.html","id":"right-outer-join","chapter":"15 Working with data frames","heading":"15.3.4 Right outer join","text":"can perform right outer join specifying .y = TRUE:Note resulting data frame contains IDs present right input data frame .","code":"\n(ab.rightOuter <- merge(a, b, all.y = TRUE))  PID Hospital Age Sex  V1 Department\n1   6      HUP  21   0 153  Neurology\n2   7      HUP  63   1  89  Radiology\n3   8 Stanford  22   0 112  Emergency\n4   9     UCSF  19   0 228 Cardiology\n5  10     <NA>  NA  NA  91    Surgery\n6  11     <NA>  NA  NA 190  Neurology\n7  12     <NA>  NA  NA 101 Psychiatry"},{"path":"dataframes.html","id":"wide-to-long","chapter":"15 Working with data frames","heading":"15.4 Wide to Long","text":"\nFigure 15.2: Wide Long data format example. Take moment notice wide table left 3 cases (3 IDs) 3 variables gets converted 3 x 4 table 9 x 3 long table right. values (outlined magenta) present table: wide table form ID x Variable matrix, long stacked single column. IDs repeated long table, variable new ‘Variable’ column provide information present wide table’s column names.\nLet’s create example data frame:","code":"\nlibrary(tidyr)\nlibrary(data.table)\n(dat_wide <- data.frame(ID = c(1, 2, 3),\n                       mango = c(1.1, 2.1, 3.1),\n                       banana = c(1.2, 2.2, 3.2),\n                       tangerine = c(1.3, 2.3, 3.3)))  ID mango banana tangerine\n1  1   1.1    1.2       1.3\n2  2   2.1    2.2       2.3\n3  3   3.1    3.2       3.3"},{"path":"dataframes.html","id":"base","chapter":"15 Working with data frames","heading":"15.4.1 base","text":"reshape() function probably one complicated documentation clear, specifically regards arguments refer input vs. output data frame. Use following figure guide understand reshape()’s syntax. can use reference building reshape() command following steps 1 5:\nFigure 15.3: reshape() syntax Wide Long transformation.\ncan also define ‘varying’ character vector:varying = list(c(\"mango\", \"banana\",\"tangerine\")Explore resulting data frame’s attributes:attributes present long data set created wide . case, reshaping back wide data frame easy :","code":"\ndat_wide2long <- reshape(# Data in wide format\n                         data = dat_wide,\n                         # The column name that defines case ID\n                         idvar = \"ID\",\n                         # The columns whose values we want to keep\n                         varying = list(2:4),\n                         # The name of the new column which will contain all \n                         # the values from the columns above\n                         v.names = \"Score\",\n                         # The values/names, of length = (N columns in \"varying\"), \n                         #that will be recycled to indicate which column from the \n                         #wide dataset each row corresponds to\n                         times = c(colnames(dat_wide)[2:4]),\n                         # The name of the new column created to hold the values \n                         # defined by \"times\"\n                         timevar = \"Fruit\",                  \n                         direction = \"long\") \nattributes(dat_wide2long)$row.names\n[1] \"1.mango\"     \"2.mango\"     \"3.mango\"     \"1.banana\"    \"2.banana\"   \n[6] \"3.banana\"    \"1.tangerine\" \"2.tangerine\" \"3.tangerine\"\n\n$names\n[1] \"ID\"    \"Fruit\" \"Score\"\n\n$class\n[1] \"data.frame\"\n\n$reshapeLong\n$reshapeLong$varying\n$reshapeLong$varying[[1]]\n[1] \"mango\"     \"banana\"    \"tangerine\"\n\n\n$reshapeLong$v.names\n[1] \"Score\"\n\n$reshapeLong$idvar\n[1] \"ID\"\n\n$reshapeLong$timevar\n[1] \"Fruit\"\nreshape(dat_wide2long)        ID mango banana tangerine\n1.mango  1   1.1    1.2       1.3\n2.mango  2   2.1    2.2       2.3\n3.mango  3   3.1    3.2       3.3"},{"path":"dataframes.html","id":"tidyr","chapter":"15 Working with data frames","heading":"15.4.2 tidyr","text":"","code":"\ndat_wide2long_tv <- pivot_longer(dat_wide,\n                           cols = 2:4,\n                           names_to = \"Fruit\",\n                           values_to = \"Score\")\ndat_wide2long_tv# A tibble: 9 x 3\n     ID Fruit     Score\n  <dbl> <chr>     <dbl>\n1     1 mango       1.1\n2     1 banana      1.2\n3     1 tangerine   1.3\n4     2 mango       2.1\n5     2 banana      2.2\n6     2 tangerine   2.3\n7     3 mango       3.1\n8     3 banana      3.2\n9     3 tangerine   3.3"},{"path":"dataframes.html","id":"data.table","chapter":"15 Working with data frames","heading":"15.4.3 data.table","text":"","code":"\ndat_wide_dt <- as.data.table(dat_wide)\ndat_wide2long_dt <- melt(dat_wide_dt,\n                         id.vars = 1,\n                         measure.vars = 2:4,\n                         variable.name = \"Fruit\",\n                         value.name = \"Score\")\nsetorder(dat_wide2long_dt, \"ID\")\ndat_wide2long_dt      ID     Fruit Score\n   <num>    <fctr> <num>\n1:     1     mango   1.1\n2:     1    banana   1.2\n3:     1 tangerine   1.3\n4:     2     mango   2.1\n5:     2    banana   2.2\n6:     2 tangerine   2.3\n7:     3     mango   3.1\n8:     3    banana   3.2\n9:     3 tangerine   3.3"},{"path":"dataframes.html","id":"long-to-wide","chapter":"15 Working with data frames","heading":"15.5 Long to Wide","text":"Let’s create long dataset:","code":"\n(dat_long <- data.frame(ID = c(1, 2, 3, 1, 2, 3, 1, 2, 3),\n                       Fruit = c(\"mango\", \"mango\", \"mango\", \n                                 \"banana\", \"banana\", \"banana\", \n                                 \"tangerine\", \"tangerine\", \"tangerine\"),\n                       Score = c(1.1, 2.1, 3.1, 1.2, 2.2, 3.2, 1.3, 2.3, 3.3)))  ID     Fruit Score\n1  1     mango   1.1\n2  2     mango   2.1\n3  3     mango   3.1\n4  1    banana   1.2\n5  2    banana   2.2\n6  3    banana   3.2\n7  1 tangerine   1.3\n8  2 tangerine   2.3\n9  3 tangerine   3.3"},{"path":"dataframes.html","id":"base-1","chapter":"15 Working with data frames","heading":"15.5.1 base","text":"Using base reshape() long--wide transformation simpler wide--long:\nFigure 15.4: reshape() syntax Long Wide transformation.\n","code":"\ndat_long2wide <- reshape(dat_long,\n                         idvar = \"ID\",\n                         timevar = \"Fruit\",\n                         v.names = \"Score\",\n                         direction = \"wide\")\n# Optionally rename columns\ncolnames(dat_long2wide) <- gsub(\"Score.\", \"\", colnames(dat_long2wide))\ndat_long2wide  ID mango banana tangerine\n1  1   1.1    1.2       1.3\n2  2   2.1    2.2       2.3\n3  3   3.1    3.2       3.3"},{"path":"dataframes.html","id":"tidyr-1","chapter":"15 Working with data frames","heading":"15.5.2 tidyr","text":"","code":"\ndat_long2wide_tv <- pivot_wider(dat_long,\n                                id_cols = \"ID\",\n                                names_from = \"Fruit\",\n                                values_from = \"Score\")\ndat_long2wide_tv# A tibble: 3 x 4\n     ID mango banana tangerine\n  <dbl> <dbl>  <dbl>     <dbl>\n1     1   1.1    1.2       1.3\n2     2   2.1    2.2       2.3\n3     3   3.1    3.2       3.3"},{"path":"dataframes.html","id":"data.table-1","chapter":"15 Working with data frames","heading":"15.5.3 data.table","text":"data.table’s long wide procedure defined convenient formula notation:","code":"\ndat_long_dt <- as.data.table(dat_long)\ndat_long2wide_dt <- dcast(dat_long_dt,\n                          ID ~ Fruit,\n                          value.var = \"Score\")\ndat_long2wide_dtKey: <ID>\n      ID banana mango tangerine\n   <num>  <num> <num>     <num>\n1:     1    1.2   1.1       1.3\n2:     2    2.2   2.1       2.3\n3:     3    3.2   3.1       3.3"},{"path":"dataframes.html","id":"feature-transformation-with-transform","chapter":"15 Working with data frames","heading":"15.6 Feature transformation with transform()","text":"Make data:transform() probably used often, trivial direct assignment:can useful adding multiple variables /used pipe:","code":"\ndat <- data.frame(Sex = c(0, 0, 1, 1, 0),\n                  Height = c(1.5, 1.6, 1.55, 1.73, 1.8),\n                  Weight = c(55, 70, 69, 76, 91))\ndat <- transform(dat, BMI = Weight/Height^2)\ndat  Sex Height Weight      BMI\n1   0   1.50     55 24.44444\n2   0   1.60     70 27.34375\n3   1   1.55     69 28.72008\n4   1   1.73     76 25.39343\n5   0   1.80     91 28.08642\ndat$BMI <- dat$Weight/dat$Height^2\nlibrary(magrittr)\ndat %>% \n  subset(Sex == 0) %>%\n  transform(DeltaWeightFromMean = Weight - mean(Weight),\n            BMI = Weight/Height^2,\n            CI = Weight/Height^3)  Sex Height Weight      BMI DeltaWeightFromMean       CI\n1   0    1.5     55 24.44444                 -17 16.29630\n2   0    1.6     70 27.34375                  -2 17.08984\n5   0    1.8     91 28.08642                  19 15.60357"},{"path":"datatrans.html","id":"datatrans","chapter":"16 Data Transformations","heading":"16 Data Transformations","text":"","code":"\nlibrary(rtemis)  .:rtemis 0.8.1: Welcome, egenn\n  [x86_64-apple-darwin17.0 (64-bit): Defaulting to 4/4 available cores]\n  Documentation & vignettes: https://rtemis.lambdamd.org"},{"path":"datatrans.html","id":"continuous-variables","chapter":"16 Data Transformations","heading":"16.1 Continuous variables","text":"","code":""},{"path":"datatrans.html","id":"zscore","chapter":"16 Data Transformations","heading":"16.1.1 Standardization / Scaling & Centering with scale()","text":"Depending modeling needs / algorithms plan use, often important scale /center data. Note many functions, , automatically scale center data internally required algorithm. Check function documentation.Standardizing, .e. converting Z-scores, involves subtracting mean dividing standard deviation.\nScaling centering R performed scale function. default, arguments scale center set TRUE:First, let’s check hoping:Good - got effectively 0 mean standard deviation 1 column.\nmanually scaling /centering data supervised learning, must:\n\nPerform scaling centering training data\n\nSave centering scaling parameters feature\n\nApply training set-derived centering scaling parameters test set prior prediction/inference.\ncommon mistake either scale training testing data together beginning, scale independently.\nLet’s get scale center attributes:Let’s save scale center attributes check values clear happening:Note: Due limitation numerical precision, checking sets floats equality multiple operations recommended. good option plot, possible:","code":"\niris.scaled <- scale(iris[, -5])\ncolMeans(iris.scaled) Sepal.Length   Sepal.Width  Petal.Length   Petal.Width \n-4.480675e-16  2.035409e-16 -2.844947e-17 -3.714621e-17 \napply(iris.scaled, 2, sd)Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n           1            1            1            1 \nattributes(iris.scaled)$dim\n[1] 150   4\n\n$dimnames\n$dimnames[[1]]\nNULL\n\n$dimnames[[2]]\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\" \n\n\n$`scaled:center`\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n    5.843333     3.057333     3.758000     1.199333 \n\n$`scaled:scale`\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n   0.8280661    0.4358663    1.7652982    0.7622377 \n(.center <- attr(iris.scaled, \"scaled:center\"))Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n    5.843333     3.057333     3.758000     1.199333 \n(.scale <- attr(iris.scaled, \"scaled:scale\"))Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n   0.8280661    0.4358663    1.7652982    0.7622377 \nSepal.Length_scaled <- (iris$Sepal.Length - .center[1]) / .scale[1]\nall(Sepal.Length_scaled == iris.scaled[, \"Sepal.Length\"])[1] TRUE\nmplot3.fit(Sepal.Length_scaled, iris.scaled[, \"Sepal.Length\"])"},{"path":"datatrans.html","id":"log-transform-with-log","chapter":"16 Data Transformations","heading":"16.1.2 Log-transform with log()","text":"following example, x unknown feature new dataset just given.\nstart plotting distribution:can see highly skewed. log transform may help .\nLet’s check:Looks like good deal.","code":"\nmplot3.x(x)\nmplot3.x(log(x))"},{"path":"datatrans.html","id":"data-binning-with-cut","chapter":"16 Data Transformations","heading":"16.1.3 Data binning with cut()","text":"different approach variable might bin .\nLet’s look different ways bin continuous data.","code":""},{"path":"datatrans.html","id":"evenly-spaced-interval","chapter":"16 Data Transformations","heading":"16.1.3.1 Evenly-spaced interval","text":"cut() allows us bin numeric variable evenly-spaced intervals.\nbreaks argument defines number intervals:\nInterval Notation\n\n[3, 9) represents interval real numbers 3 9, including 3 excluding 9.\ndata skewed, equal intervals helpful case. majority data gets grouped single bin.\nLet’s visualize cuts.Note: used par.reset = FALSE stop mplot3.x() resetting custom par() settings can continue adding elements plot, case abline() command.","code":"\nx_cut4 <- cut(x, breaks = 4)\nhead(x_cut4)[1] (0.291,178] (0.291,178] (0.291,178] (0.291,178] (0.291,178] (0.291,178]\nLevels: (0.291,178] (178,355] (355,533] (533,711]\ntable(x_cut4)x_cut4\n(0.291,178]   (178,355]   (355,533]   (533,711] \n        977          19           3           1 \n(xcuts5 <- seq(min(x), max(x), length.out = 5))[1]   1.0000 178.2453 355.4905 532.7358 709.9811\nmplot3.x(x, par.reset = FALSE)\n# plot(density(x)) # in base R\nabline(v = xcuts5, col = \"red\", lwd = 1.5)"},{"path":"datatrans.html","id":"quantile-cuts","chapter":"16 Data Transformations","heading":"16.1.3.2 Quantile cuts","text":"Instead, can get quantiles quantile(). ask 5 quantiles using lngth.argument, corresponds 4 intervals:\nbreaks argument cut() allows us pass either integer define evenly-spaced breaks, numeric vector define position breaks.\ncan therefore pass quantile values break points.\nSince quantile values begin lowest value data, need define include.lowest = TRUE first interval inclusive lowest value:quantile cuts, bin contains roughly number observations (+/- 1).","code":"\n(xquants5 <- quantile(x, seq(0, 1, length.out = 5)))       0%       25%       50%       75%      100% \n  1.00000  11.53621  23.24769  47.20410 709.98108 \nmplot3.x(x, par.reset = F)\n# plot(density(x)) # in base R\nabline(v = xquants5, col = \"green\", lwd = 1.5)\nx_cutq4 <- cut(x, breaks = xquants5, include.lowest = TRUE)\ntable(x_cutq4)x_cutq4\n   [1,11.5] (11.5,23.2] (23.2,47.2]  (47.2,710] \n        250         250         250         250 "},{"path":"datatrans.html","id":"categorical-variables","chapter":"16 Data Transformations","heading":"16.2 Categorical variables","text":"Many algorithms (implementations) directly support categorical variables. use , must therefore convert categorical variables type numerical encoding.","code":""},{"path":"datatrans.html","id":"integer-encoding","chapter":"16 Data Transformations","heading":"16.2.1 Integer encoding","text":"categorical data ordinal, can simply convert integers.\nexample, following ordered factor:…can directly coerced integer:","code":"\n(brightness <- factor(c(\"bright\", \"brightest\", \"darkest\",\n                        \"bright\", \"dark\", \"dim\", \"dark\"),\n                      levels = c(\"darkest\", \"dark\", \"dim\", \"bright\", \"brightest\"),\n                      ordered = TRUE))[1] bright    brightest darkest   bright    dark      dim       dark     \nLevels: darkest < dark < dim < bright < brightest\nas.integer(brightness)[1] 4 5 1 4 2 3 2"},{"path":"datatrans.html","id":"one-hot-encoding","chapter":"16 Data Transformations","heading":"16.2.2 One-hot encoding","text":"categorical features ordinal, algorithm handle directly, can one-hot encode . one-hot encoding, categorical feature converted k binary features, k = number unique values input, one feature value 1 per case. similar creating dummy variables statistics, difference dummy variables create k - 1 new variables.can use rtemis oneHot() function:","code":"\nadmission_reasons <- c(\"plannedSurgery\", \"emergencySurgery\", \"medical\")\n(admission <- sample(admission_reasons, 10, T)) [1] \"emergencySurgery\" \"medical\"          \"medical\"          \"emergencySurgery\"\n [5] \"medical\"          \"emergencySurgery\" \"medical\"          \"medical\"         \n [9] \"emergencySurgery\" \"emergencySurgery\"\n(admission_oneHot <- oneHot(admission))      admission.emergencySurgery admission.medical\n [1,]                          1                 0\n [2,]                          0                 1\n [3,]                          0                 1\n [4,]                          1                 0\n [5,]                          0                 1\n [6,]                          1                 0\n [7,]                          0                 1\n [8,]                          0                 1\n [9,]                          1                 0\n[10,]                          1                 0"},{"path":"stringops.html","id":"stringops","chapter":"17 String Operations","heading":"17 String Operations","text":"","code":""},{"path":"stringops.html","id":"reminder-create---coerce---check","chapter":"17 String Operations","heading":"17.1 Reminder: create - coerce - check","text":"character(): Initialize empty character vectoras.character(): Coerce vector character vectoris.character(): Check object character","code":"\nx <- character(10)\nx [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\nv <- c(10, 20, 22, 43)\nx <- as.character(v)\nx[1] \"10\" \"20\" \"22\" \"43\"\nx <- c(\"PID\", \"Age\", \"Sex\", \"Handedness\")\nis.character(x)[1] TRUE"},{"path":"stringops.html","id":"nchar-get-number-of-characters-in-element","chapter":"17 String Operations","heading":"17.2 nchar(): Get number of characters in element","text":"nchar() counts number characters element type character vector:","code":"\nx <- c(\"a\", \"bb\", \"ccc\")\nnchar(x)[1] 1 2 3"},{"path":"stringops.html","id":"substr-get-substring","chapter":"17 String Operations","heading":"17.3 substr(): Get substring","text":"Neither start stop need valid character positions.\nexample, want get characters fourth one last one, can specify large stopIf start high index, end empty strings:Note: substring() also available, similar syntax substr(): (first, last) instead (start, stop). available compatibility S (check source code see ’s alias substr())","code":"\nx <- c(\"001Emergency\", \"010Cardiology\", \"018Neurology\", \n       \"020Anesthesia\", \"021Surgery\", \"051Psychiatry\")\nsubstr(x, start = 1, stop = 3)[1] \"001\" \"010\" \"018\" \"020\" \"021\" \"051\"\nsubstr(x, 4, 99)[1] \"Emergency\"  \"Cardiology\" \"Neurology\"  \"Anesthesia\" \"Surgery\"   \n[6] \"Psychiatry\"\nsubstr(x, 20, 24)[1] \"\" \"\" \"\" \"\" \"\" \"\""},{"path":"stringops.html","id":"strsplit-split-strings","chapter":"17 String Operations","heading":"17.4 strsplit(): Split strings","text":"","code":"\nx <- \"This is one sentence\"\nstrsplit(x, \" \")[[1]]\n[1] \"This\"     \"is\"       \"one\"      \"sentence\"\nx <- \"In the beginning, there was the command line\"\nstrsplit(x, \",\")[[1]]\n[1] \"In the beginning\"            \" there was the command line\""},{"path":"stringops.html","id":"paste-concatenate-strings","chapter":"17 String Operations","heading":"17.5 paste(): Concatenate strings","text":"paste() paste0() particularly useful commands.\nsimplest form, acts like .character():Combine strings multiple vectors, elementwise:Use sep argument define separator:paste0() alias commonly used paste(..., sep = \"\"):vectorized operations, value recycling can convenient:argument collapse helps output single character element collapsing string:","code":"\nv <- c(10, 20, 22, 43)\npaste(v)[1] \"10\" \"20\" \"22\" \"43\"\nid = c(\"001\", \"010\", \"018\", \"020\", \"021\", \"051\")\ndept = c(\"Emergency\", \"Cardiology\", \"Neurology\",\n         \"Anesthesia\", \"Surgery\", \"Psychiatry\")\npaste(id, dept)[1] \"001 Emergency\"  \"010 Cardiology\" \"018 Neurology\"  \"020 Anesthesia\"\n[5] \"021 Surgery\"    \"051 Psychiatry\"\npaste(id, dept, sep = \"+++\")[1] \"001+++Emergency\"  \"010+++Cardiology\" \"018+++Neurology\"  \"020+++Anesthesia\"\n[5] \"021+++Surgery\"    \"051+++Psychiatry\"\npaste0(id, dept)[1] \"001Emergency\"  \"010Cardiology\" \"018Neurology\"  \"020Anesthesia\"\n[5] \"021Surgery\"    \"051Psychiatry\"\npaste0(\"Feature_\", 1:10) [1] \"Feature_1\"  \"Feature_2\"  \"Feature_3\"  \"Feature_4\"  \"Feature_5\" \n [6] \"Feature_6\"  \"Feature_7\"  \"Feature_8\"  \"Feature_9\"  \"Feature_10\"\npaste0(\"Feature_\", 1:10, collapse = \", \")[1] \"Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10\""},{"path":"stringops.html","id":"cat-concatenate-and-print","chapter":"17 String Operations","heading":"17.6 cat(): Concatenate and print","text":"cat() concatenates strings order print screen (console) file. return value. therefore useful produce informative messages programs.","code":"\nsbp <- 130\ntemp <- 98.4\ncat(\"The blood pressure was\", sbp, \"and the temperature was\", temp, \"\\n\")The blood pressure was 130 and the temperature was 98.4 "},{"path":"stringops.html","id":"string-formatting","chapter":"17 String Operations","heading":"17.7 String formatting","text":"","code":""},{"path":"stringops.html","id":"change-case-with-toupper-and-tolower","chapter":"17 String Operations","heading":"17.7.1 Change case with toupper() and tolower()","text":"","code":"\nfeatures <- c(\"id\", \"age\", \"sex\", \"sbp\", \"dbp\", \"hct\", \"urea\", \"creatinine\")\nfeatures[1] \"id\"         \"age\"        \"sex\"        \"sbp\"        \"dbp\"       \n[6] \"hct\"        \"urea\"       \"creatinine\"\ntoupper(features)[1] \"ID\"         \"AGE\"        \"SEX\"        \"SBP\"        \"DBP\"       \n[6] \"HCT\"        \"UREA\"       \"CREATININE\"\ntolower(features)[1] \"id\"         \"age\"        \"sex\"        \"sbp\"        \"dbp\"       \n[6] \"hct\"        \"urea\"       \"creatinine\""},{"path":"stringops.html","id":"abbreviate","chapter":"17 String Operations","heading":"17.7.2 abbreviate()","text":"","code":"\nx <- c(\"Emergency\", \"Cardiology\", \"Surgery\", \"Anesthesia\", \"Neurology\", \"Psychiatry\", \"Clinical Psychology\")\nabbreviate(x)          Emergency          Cardiology             Surgery          Anesthesia \n             \"Emrg\"              \"Crdl\"              \"Srgr\"              \"Anst\" \n          Neurology          Psychiatry Clinical Psychology \n             \"Nrlg\"              \"Psyc\"              \"ClnP\" \nabbreviate(x, minlength = 3)          Emergency          Cardiology             Surgery          Anesthesia \n              \"Emr\"               \"Crd\"               \"Srg\"               \"Ans\" \n          Neurology          Psychiatry Clinical Psychology \n              \"Nrl\"               \"Psy\"               \"ClP\" "},{"path":"stringops.html","id":"pattern-matching","chapter":"17 String Operations","heading":"17.8 Pattern matching","text":"common task programming find +/- replace string patterns vector strings.grep() grepl() help find strings contain given pattern.sub() gsub() help find replace strings.","code":""},{"path":"stringops.html","id":"grep-get-an-integer-index-of-elements-that-include-a-pattern","chapter":"17 String Operations","heading":"17.8.1 grep(): Get an integer index of elements that include a pattern","text":"grep()’s value arguments defaults FALSE, allows returning matched string (value element) instead integer index:","code":"\nx <- c(\"001Age\", \"002Sex\", \"010Temp\", \"014SBP\", \"018Hct\", \"022PFratio\", \"030GCS\", \"112SBP-DBP\")\ngrep(pattern = \"SBP\", x = x)[1] 4 8\ngrep(\"SBP\", x, value = TRUE)[1] \"014SBP\"     \"112SBP-DBP\""},{"path":"stringops.html","id":"grepl-get-a-logical-index-of-elements-that-include-a-pattern","chapter":"17 String Operations","heading":"17.8.2 grepl(): Get a logical index of elements that include a pattern","text":"grepl() similar grep(), returns logical index instead:","code":"\ngrepl(\"SBP\", x)[1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE"},{"path":"stringops.html","id":"sub-find-replace-first-match-of-a-pattern","chapter":"17 String Operations","heading":"17.8.3 sub(): Find replace first match of a pattern","text":"“First match” refers element character vector:","code":"\nx <- c(\"The most important variable was PF ratio. Other significant variables are listed in the supplementary information.\")\nsub(pattern = \"variable\", replacement = \"feature\", x = x)[1] \"The most important feature was PF ratio. Other significant variables are listed in the supplementary information.\"\nx <- c(\"var 1, var 2\", \"var 3, var 4\")\nsub(\"var\", \"feat\", x)[1] \"feat 1, var 2\" \"feat 3, var 4\""},{"path":"stringops.html","id":"gsub-find-and-replace-all-matches-of-a-pattern","chapter":"17 String Operations","heading":"17.8.4 gsub(): Find and replace all matches of a pattern","text":"“matches” means matches across elements:","code":"\nx <- c(\"The most important variable was PF ratio. Other significant variables are listed in the supplementary information.\")\ngsub(pattern = \"variable\", replacement = \"feature\", x = x)[1] \"The most important feature was PF ratio. Other significant features are listed in the supplementary information.\"\nx <- c(\"var 1, var 2\", \"var 3, var 4\")\ngsub(\"var\", \"feat\", x)[1] \"feat 1, feat 2\" \"feat 3, feat 4\""},{"path":"stringops.html","id":"regular-expressions","chapter":"17 String Operations","heading":"17.9 Regular expressions","text":"Regular expressions allow perform flexible pattern matching. example, can look pattern specifically beginning end word, variable pattern certain characteristics.\nRegular expressions powerful heavily used. exist multiple programming languages - many similarities differences.\nmany rules defining regular expression. can read R manual typing ?base::regex.\nimportant rules:","code":""},{"path":"stringops.html","id":"match-a-pattern-at-the-beginning-of-a-linestring-with","chapter":"17 String Operations","heading":"17.9.1 Match a pattern at the beginning of a line/string with ^/\\\\<:","text":"Use caret sign ^ beginning pattern match strings begin pattern.\npattern 012 matches 2nd 3rd elements:adding ^ \\\\<, 2nd element matches:","code":"\n(x <- c(\"001xyz993\", \"012qwe764\", \"029aqw012\"))[1] \"001xyz993\" \"012qwe764\" \"029aqw012\"\ngrep(\"012\", x)[1] 2 3\ngrep(\"^012\", x)[1] 2\ngrep(\"\\\\<012\", x)[1] 2"},{"path":"stringops.html","id":"match-a-pattern-at-the-end-of-a-linestring-with","chapter":"17 String Operations","heading":"17.9.2 Match a pattern at the end of a line/string with $/\\\\>","text":"dollar sign $ used end pattern match strings end pattern:","code":"\nx[1] \"001xyz993\" \"012qwe764\" \"029aqw012\"\ngrep(\"012$\", x)[1] 3\ngrep(\"012\\\\>\", x)[1] 3\nx <- c(\"1one\", \"2one\", \"3two\", \"3three\")\ngrep(\"one$\", x)[1] 1 2\ngrep(\"one\\\\>\", x)[1] 1 2"},{"path":"stringops.html","id":"match-any-character","chapter":"17 String Operations","heading":"17.9.3 .: Match any character","text":"","code":"\ngrep(\"e.X\", c(\"eX\", \"enX\", \"ennX\", \"ennnX\", \"ennnnX\"))[1] 2"},{"path":"stringops.html","id":"match-preceding-character-one-or-more-times","chapter":"17 String Operations","heading":"17.9.4 +: Match preceding character one or more times:","text":"","code":"\ngrep(\"en+X\", c(\"eX\", \"enX\", \"ennX\", \"ennnX\", \"ennnnX\"))[1] 2 3 4 5"},{"path":"stringops.html","id":"n-match-preceding-character-n-times","chapter":"17 String Operations","heading":"17.9.5 {n}: Match preceding character n times:","text":"","code":"\ngrep(\"en{2}X\", c(\"eX\", \"enX\", \"ennX\", \"ennnX\", \"ennnnX\"))[1] 3"},{"path":"stringops.html","id":"n-match-preceding-character-n-or-more-times","chapter":"17 String Operations","heading":"17.9.6 {n,}: Match preceding character n or more times:","text":"","code":"\ngrep(\"en{2,}X\", c(\"eX\", \"enX\", \"ennX\", \"ennnX\", \"ennnnX\"))[1] 3 4 5"},{"path":"stringops.html","id":"nm-match-preceding-character-at-least-n-times-and-no-more-than-m-times","chapter":"17 String Operations","heading":"17.9.7 {n,m}: Match preceding character at least n times and no more than m times:","text":"","code":"\ngrep(\"en{2,3}X\", c(\"eX\", \"enX\", \"ennX\", \"ennnX\", \"ennnnX\"))[1] 3 4"},{"path":"stringops.html","id":"escaping-metacharacters","chapter":"17 String Operations","heading":"17.9.8 Escaping metacharacters","text":"following defined metacharacters, special meaning within regular expression: . \\ | ( ) [ { ^ $ * + ?.\nwant match one characters , must “escape” using double backslash:","code":"\nx <- c(\"dn3ONE\", \"d.3TWO\", \"dx3FIVE\")\ngrep(\"d\\\\.3\", x)[1] 2"},{"path":"stringops.html","id":"match-a-character-class","chapter":"17 String Operations","heading":"17.9.9 Match a character class","text":"can use brackets, [ ] define sets characters match order, present.\nwant replace $ @ underscore:number character classes predefined. surrounded brackets - use character class, need seconds set brackets around . common ones include:[:alnum:]: alphanumeric, .e. letters numbers[:alpha:]: letters[:digit:]: numbers[:lower:]: lowercase letters[:upper:]: uppercase letters[:punct:]: punctuation characters (! \" # $ % & ’ ( ) * + , - . / : ; < = > ? @ [  ] ^ _ ` { | } ~.)[:blank:]: spaces tabs[:space:]: spaces, tabs, newline characters, moreLet’s look examples.\nus [:digit:] remove numbers:can use [:alpha:] remove letters:can use caret ^ beginning character class match character character set:","code":"\nx <- c(\"Feat1$alpha\", \"Feat2$gamma\", \"Feat9@field2\")\ngsub(\"[$@]\", \"_\", x)[1] \"Feat1_alpha\"  \"Feat2_gamma\"  \"Feat9_field2\"\nx <- c(\"001Emergency\", \"010Cardiology\", \"018Neurology\", \"020Anesthesia\", \n       \"021Surgery\", \"051Psychiatry\")\ngsub(\"[[:digit:]]\", \"\", x)[1] \"Emergency\"  \"Cardiology\" \"Neurology\"  \"Anesthesia\" \"Surgery\"   \n[6] \"Psychiatry\"\ngsub(\"[[:alpha:]]\", \"\", x)[1] \"001\" \"010\" \"018\" \"020\" \"021\" \"051\"\nx <- c(\"001$Emergency\", \"010@Cardiology\", \"018*Neurology\", \"020!Anesthesia\", \n       \"021!Surgery\", \"051*Psychiatry\")\ngsub(\"[^[:alnum:]]\", \"_\", x)[1] \"001_Emergency\"  \"010_Cardiology\" \"018_Neurology\"  \"020_Anesthesia\"\n[5] \"021_Surgery\"    \"051_Psychiatry\""},{"path":"stringops.html","id":"combine-character-classes","chapter":"17 String Operations","heading":"17.9.10 Combine character classes","text":"Use | match multiple character classes:\ninformation regular expressions, start reading built-documentation: ?regex\n","code":"\nx <- c(\"123#$%alphaBeta\")\ngsub(\"[[:digit:]|[:punct:]]\", \"\", x)[1] \"alphaBeta\""},{"path":"datetime.html","id":"datetime","chapter":"18 Date and Time","heading":"18 Date and Time","text":"R includes builtin support working date +/- time data. number external packages extend support.three builtin classes:Date: Represents date information (time)POSIXct: Represents date time information signed number seconds since January 1, 1970 (Unix Time .k.. POSIX time .k.. Epoch time)POSIXlt: Represents date time information named list (See base::DateTimeClasses)Background info: Portable Operating System Interface (POSIX) set standards maintaining compatibility among operating systems.","code":""},{"path":"datetime.html","id":"date-objects","chapter":"18 Date and Time","heading":"18.1 Date objects","text":"","code":""},{"path":"datetime.html","id":"character-to-date-as.date","chapter":"18 Date and Time","heading":"18.1.1 Character to Date: as.Date()","text":"can create Date object string:tryFormats argument defines formats recognized.default tryFormats = c(\"%Y-%m-%d\", \"%Y/%m/%d\"), .e. date form “2020-11-16” “2020/11/16”","code":"\nx <- as.Date(\"1981-02-12\")\nx[1] \"1981-02-12\"\nclass(x)[1] \"Date\""},{"path":"datetime.html","id":"get-current-date-time","chapter":"18 Date and Time","heading":"18.1.2 Get current date & time","text":"Get current data:Get current date time:Get local timezone:","code":"\ntoday <- Sys.Date()\ntoday[1] \"2020-11-30\"\nclass(today)[1] \"Date\"\nnow <- Sys.time()\nnow[1] \"2020-11-30 02:21:09 PST\"\nclass(now)[1] \"POSIXct\" \"POSIXt\" \nSys.timezone()[1] \"America/Los_Angeles\""},{"path":"datetime.html","id":"math-on-dates","chapter":"18 Date and Time","heading":"18.1.3 Math on Dates","text":"reason care Date objects R can apply useful mathematical operations .example, can substract date objects get time intervals:Note: can use subtraction operator -, advised use difftime() function perform subtraction dates instead, allows specify units:\noption “months” “years” units?\n\nThink .\n\n, unlike seconds, minutes, hours, days, weeks, months years fixed length, .e. literally month year “units” time.\n\ncan always get difference days divide 365 (365.242.\n","code":"\nstart_date <- as.Date(\"2020-09-15\")\ntime_diff <- Sys.Date() - start_date\ntime_diffTime difference of 76 days\nclass(time_diff)[1] \"difftime\"\ntimepoint1 <- as.Date(\"2020-01-07\")\ntimepoint2 <- as.Date(\"2020-02-03\")\ndifftime(timepoint2, timepoint1, units = \"weeks\")Time difference of 3.857143 weeks\ndifftime(timepoint2, timepoint1, units = \"days\")Time difference of 27 days\ndifftime(timepoint2, timepoint1, units = \"hours\")Time difference of 648 hours\ndifftime(timepoint2, timepoint1, units = \"mins\")Time difference of 38880 mins\ndifftime(timepoint2, timepoint1, units = \"secs\")Time difference of 2332800 secs\nDOB <- as.Date(\"1969-08-04\")\nAge <- Sys.Date() - DOB\nAgeTime difference of 18746 days\ncat(\"Age today is\", round(Age/365), \"years\")Age today is 51 years"},{"path":"datetime.html","id":"meanmedian-date","chapter":"18 Date and Time","heading":"18.1.4 mean/median Date","text":"check median, can mathematical operation using mmultiplication subtraction addition, result still Date(!):","code":"\nx <- as.Date(c(5480, 5723, 5987, 6992), origin = \"1970-01-01\")\nx[1] \"1985-01-02\" \"1985-09-02\" \"1986-05-24\" \"1989-02-22\"\nmean(x)[1] \"1986-07-21\"\nmedian(x)[1] \"1986-01-12\"\nx[2] + .5 * (x[3] - x[2])[1] \"1986-01-12\""},{"path":"datetime.html","id":"sequence-of-dates","chapter":"18 Date and Time","heading":"18.1.5 Sequence of dates","text":"can create sequence dates using seq().\ninteger passed , unit assumed days:Unlike mathematical operations like difftime() require strict units time, seq() can work months years.can one :“day,” “week,” “month,” “quarter,” “year.”therefore equivalent :numeric sequences, can also define length.argument:integer can provided part character input :","code":"\nstart_date <- as.Date(\"2020-09-14\")\nend_date <- as.Date(\"2020-12-07\")\nseq(from = start_date, to = end_date, by = 7) [1] \"2020-09-14\" \"2020-09-21\" \"2020-09-28\" \"2020-10-05\" \"2020-10-12\"\n [6] \"2020-10-19\" \"2020-10-26\" \"2020-11-02\" \"2020-11-09\" \"2020-11-16\"\n[11] \"2020-11-23\" \"2020-11-30\" \"2020-12-07\"\nseq(from = start_date, to = end_date, by = \"week\") [1] \"2020-09-14\" \"2020-09-21\" \"2020-09-28\" \"2020-10-05\" \"2020-10-12\"\n [6] \"2020-10-19\" \"2020-10-26\" \"2020-11-02\" \"2020-11-09\" \"2020-11-16\"\n[11] \"2020-11-23\" \"2020-11-30\" \"2020-12-07\"\nstart_date <- as.Date(\"2020-01-20\")\nseq(from = start_date, by = \"year\", length.out = 4)[1] \"2020-01-20\" \"2021-01-20\" \"2022-01-20\" \"2023-01-20\"\nstart_date <- as.Date(\"2020-01-20\")\nend_date <- as.Date(\"2021-01-20\")\nseq(start_date, end_date, by = \"2 months\")[1] \"2020-01-20\" \"2020-03-20\" \"2020-05-20\" \"2020-07-20\" \"2020-09-20\"\n[6] \"2020-11-20\" \"2021-01-20\""},{"path":"datetime.html","id":"date-time-objects","chapter":"18 Date and Time","heading":"18.2 Date-Time objects","text":"","code":""},{"path":"datetime.html","id":"character-to-date-time-as.posixct-as.posixlt-strptime","chapter":"18 Date and Time","heading":"18.2.1 Character to Date-Time: as.POSIXct(), as.POSIXlt(), strptime():","text":"(always, can informative look source code. Many functions call eachother internally)Read strptime()’s documentation conversion specifications. define order format characters read year, month, day, hour, minute, second information.example, ISO 8601 international standard defined :\"%Y-%m-%d %H:%M:%S\"%Y: Year century, (0-9999 accepted) e.g. 2020%m: Month, 01-12, e.g. 03%d: Day, 01-31, e.g. 04%H: Hours, 00-23, e.g. 13%M: Minutes, 00-59, e.g. 38%S: Seconds, 00-61 (!) allowing two leap seconds, e.g. 54Use attributres() see difference POSIXct POSIXlt classes:can compose really large number combination formats match data.","code":"\ndt <- \"2020-03-04 13:38:54\"\ndt[1] \"2020-03-04 13:38:54\"\nclass(dt)[1] \"character\"\ndt_posixct <- as.POSIXct(dt)\ndt_posixct[1] \"2020-03-04 13:38:54 PST\"\nclass(dt_posixct)[1] \"POSIXct\" \"POSIXt\" \nstr(dt_posixct) POSIXct[1:1], format: \"2020-03-04 13:38:54\"\nattributes(dt_posixct)$class\n[1] \"POSIXct\" \"POSIXt\" \n\n$tzone\n[1] \"\"\ndt_posixlt <- as.POSIXlt(dt)\ndt_posixlt[1] \"2020-03-04 13:38:54 PST\"\nclass(dt_posixlt)[1] \"POSIXlt\" \"POSIXt\" \nstr(dt_posixlt) POSIXlt[1:1], format: \"2020-03-04 13:38:54\"\ndt_posixlt$year[1] 120\nattributes(dt_posixlt)$names\n [1] \"sec\"    \"min\"    \"hour\"   \"mday\"   \"mon\"    \"year\"   \"wday\"   \"yday\"  \n [9] \"isdst\"  \"zone\"   \"gmtoff\"\n\n$class\n[1] \"POSIXlt\" \"POSIXt\" \ndt2 <- c(\"03.04.20 01:38.54 pm\")\ndt2_posix <- as.POSIXct(dt2, format = \"%m.%d.%y %I:%M.%S %p\")\ndt2_posix[1] \"2020-03-04 13:38:54 PST\""},{"path":"datetime.html","id":"format-dates","chapter":"18 Date and Time","heading":"18.3 format() Dates","text":"format() operates Date POSIX objects convert representationsDefine Date US format:Convert European format:","code":"\ndt_us <- as.Date(\"07-04-2020\", format = \"%m-%d-%Y\")\ndt_us[1] \"2020-07-04\"\ndt_eu <- format(dt_us, \"%d.%m.%y\")\ndt_eu[1] \"04.07.20\""},{"path":"datetime.html","id":"extract-partial-date-information","chapter":"18 Date and Time","heading":"18.4 Extract partial date information","text":"weekdays(): Get name day weekmonths(): Get name monthquarters(): Get quarterjulia(): Get number days since specific origin","code":"\nx <- as.Date(c(18266, 18299, 18359, 18465), origin = \"1970-01-01\")\nx[1] \"2020-01-05\" \"2020-02-07\" \"2020-04-07\" \"2020-07-22\"\nweekdays(x)[1] \"Sunday\"    \"Friday\"    \"Tuesday\"   \"Wednesday\"\nmonths(x)[1] \"January\"  \"February\" \"April\"    \"July\"    \nquarters(x)[1] \"Q1\" \"Q1\" \"Q2\" \"Q3\"\njulian(x)[1] 18266 18299 18359 18465\nattr(,\"origin\")\n[1] \"1970-01-01\"\njulian(x, origin = as.Date(\"2020-01-01\"))[1]   4  37  97 203\nattr(,\"origin\")\n[1] \"2020-01-01\""},{"path":"datetime.html","id":"handling-dates-with-lubridate","chapter":"18 Date and Time","heading":"18.5 Handling dates with lubridate","text":"Instead defining Date /time formats using POSIX standard abbreviations, can let lubridate package guesswork us, works well time.Note timezone defaults UTC (Coordinated Universal Time) must set manually. PST defined “America/Los_Angeles” (officially deprecated) “US/Pacific” (tz database)dt2 got misinterpreted year-month-day.\ncases, lubridate includes number convenient functions narrow guessing. functions named using permutations y, m, d. letter order signifies order information appears character trying import, .e. ymd, dmy, mdy, ydm, myd","code":"\nlibrary(lubridate)\ndt <- c(\"2020-03-04 13:38:54\")\ndt_posix <- as_datetime(dt)\ndt_posix[1] \"2020-03-04 13:38:54 UTC\"\ndt_posix <- as_datetime(dt, tz = \"America/Los_Angeles\")\ndt_posix[1] \"2020-03-04 13:38:54 PST\"\ndt2_posix <- as_datetime(dt2)\ndt2_posix[1] \"2003-04-20 13:38:54 UTC\"\ndt2 <- c(\"03.04.20 01:38.54 pm\")\ndt2_posix <- mdy_hms(dt2, tz = \"America/Los_Angeles\")\ndt2_posix[1] \"2020-03-04 13:38:54 PST\""},{"path":"missingdata.html","id":"missingdata","chapter":"19 Handling Missing data","heading":"19 Handling Missing data","text":"Missing data common issue statistics data science.Data may missing variety reasons. often characterize type missingness using following three types(Mack, Su, Westreich 2018):Missing completely random (MCAR):\n“fact data missing independent observed unobserved data”Missing random (MAR):\n“fact data missing systematically related observed unobserved data”Missing random (MNAR):\n“fact data missing systematically related unobserved data”","code":"\nlibrary(rtemis)  .:rtemis 0.8.1: Welcome, egenn\n  [x86_64-apple-darwin17.0 (64-bit): Defaulting to 4/4 available cores]\n  Documentation & vignettes: https://rtemis.lambdamd.org"},{"path":"missingdata.html","id":"check-for-missing-data","chapter":"19 Handling Missing data","heading":"19.1 Check for missing data","text":"can use favorite base commands check missing data, row, column, total, etc.Let’s load PimaIndiansDiabetes2 dataset package mlbench make copy variable dat. Remember check class new object didn’t create class(), check dimensions, applicable, dim(), get summary structure including data types str():Check missing values anywhere data.frame anyNA():suggests least one NA value dataset.can create logical index NA values using .na(). dimensions dataset. print first lines head():One way count missing values sum(.na()). Remember logical array coerced integer array mathematical operations, TRUE becomes 1 FALSE becomes 0. Therefore, calling sum() logical index counts number TRUE elements (since applying index NA values, counts number elements missing values):652 NA values total data.frame.Let’s count number missing values per feature (.e. column) using sapply():features insulin triceps NA values.Let’s count number missing values per case (.e. row):wanted get row missing values, can use .max():Row 50 4 missing values.","code":"\ndata(\"PimaIndiansDiabetes2\", package = \"mlbench\")\ndat <- PimaIndiansDiabetes2\nclass(dat)[1] \"data.frame\"\ndim(dat)[1] 768   9\nstr(dat)'data.frame':   768 obs. of  9 variables:\n $ pregnant: num  6 1 8 1 0 5 3 10 2 8 ...\n $ glucose : num  148 85 183 89 137 116 78 115 197 125 ...\n $ pressure: num  72 66 64 66 40 74 50 NA 70 96 ...\n $ triceps : num  35 29 NA 23 35 NA 32 NA 45 NA ...\n $ insulin : num  NA NA NA 94 168 NA 88 NA 543 NA ...\n $ mass    : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 NA ...\n $ pedigree: num  0.627 0.351 0.672 0.167 2.288 ...\n $ age     : num  50 31 32 21 33 30 26 29 53 54 ...\n $ diabetes: Factor w/ 2 levels \"neg\",\"pos\": 2 1 2 1 2 1 2 1 2 2 ...\nanyNA(dat)[1] TRUE\nna_index <- is.na(dat)\ndim(na_index)[1] 768   9\nhead(na_index)  pregnant glucose pressure triceps insulin  mass pedigree   age diabetes\n1    FALSE   FALSE    FALSE   FALSE    TRUE FALSE    FALSE FALSE    FALSE\n2    FALSE   FALSE    FALSE   FALSE    TRUE FALSE    FALSE FALSE    FALSE\n3    FALSE   FALSE    FALSE    TRUE    TRUE FALSE    FALSE FALSE    FALSE\n4    FALSE   FALSE    FALSE   FALSE   FALSE FALSE    FALSE FALSE    FALSE\n5    FALSE   FALSE    FALSE   FALSE   FALSE FALSE    FALSE FALSE    FALSE\n6    FALSE   FALSE    FALSE    TRUE    TRUE FALSE    FALSE FALSE    FALSE\nsum(is.na(dat))[1] 652\nsapply(dat, function(i) sum(is.na(i)))pregnant  glucose pressure  triceps  insulin     mass pedigree      age \n       0        5       35      227      374       11        0        0 \ndiabetes \n       0 \nsapply(1:nrow(dat), function(i) sum(is.na(dat[i, ])))  [1] 1 1 2 0 0 2 0 3 0 3 2 2 2 0 0 3 0 2 0 0 0 2 2 1 0 0 2 0 0 2 1 0 0 2 1 0 2\n [38] 1 1 0 0 2 1 0 2 1 2 1 1 4 0 0 0 0 0 1 0 0 2 0 4 2 2 0 2 1 1 2 0 0 0 0 2 0\n [75] 1 2 2 1 3 1 1 4 0 1 2 0 1 0 0 1 2 0 0 2 0 0 1 0 0 0 2 2 2 0 2 0 2 0 0 0 0\n[112] 0 0 2 0 2 2 2 1 0 0 1 0 2 2 0 0 0 0 2 0 2 0 1 0 0 0 0 2 0 2 1 0 2 0 2 1 0\n[149] 2 1 0 2 0 0 2 1 0 0 0 0 1 0 0 1 2 0 1 2 2 0 2 0 2 0 0 0 2 0 2 2 2 0 1 2 2\n[186] 1 0 0 0 0 2 0 2 3 1 0 2 0 0 0 1 2 1 0 0 1 0 2 0 1 1 1 1 0 0 0 0 0 1 2 0 2\n[223] 3 0 0 0 2 1 0 0 2 0 0 2 0 2 0 1 1 2 1 0 2 0 0 1 2 0 0 1 2 2 0 1 0 1 1 1 0\n[260] 0 0 3 1 1 2 0 3 1 2 3 1 0 2 0 2 0 1 0 2 0 2 0 0 2 2 0 0 0 0 0 0 0 0 0 2 0\n[297] 0 0 0 2 3 0 0 2 2 0 0 0 0 0 1 0 0 0 1 0 0 2 0 2 0 1 1 0 1 0 0 2 0 0 1 0 3\n[334] 2 0 0 3 2 0 2 0 0 2 2 2 0 0 3 0 2 2 2 1 0 2 2 0 2 0 0 0 2 1 2 0 0 2 1 0 0\n[371] 0 1 0 0 0 0 0 0 2 0 0 1 0 0 0 0 1 1 0 0 0 2 0 0 2 0 0 1 2 1 2 2 0 1 2 0 2\n[408] 2 2 0 1 0 0 0 0 0 1 1 2 0 0 0 0 1 0 0 4 0 0 0 3 0 0 2 1 3 1 2 1 2 1 0 0 2\n[445] 1 0 0 0 0 0 0 2 0 3 0 1 2 0 0 0 0 2 0 1 2 0 0 0 3 0 1 1 1 2 2 1 0 0 0 1 0\n[482] 1 0 0 3 0 0 0 1 2 0 1 1 0 4 2 2 0 0 0 0 1 2 0 1 2 0 0 0 2 1 0 2 2 0 0 0 2\n[519] 2 0 0 0 4 2 2 1 0 0 0 2 0 2 0 3 0 3 2 2 0 0 0 0 1 0 0 0 0 0 0 1 1 0 2 0 0\n[556] 0 1 2 1 2 2 0 0 0 2 0 0 0 0 0 2 2 0 0 0 0 0 2 2 1 1 1 1 2 0 1 2 2 0 3 1 0\n[593] 2 0 0 0 2 0 2 0 1 3 1 0 3 1 0 0 0 0 0 0 0 1 0 2 2 0 1 3 0 1 2 0 2 0 2 2 2\n[630] 1 2 0 2 0 2 2 2 0 0 0 0 2 2 3 0 0 0 0 0 1 0 0 0 2 0 0 0 0 2 0 2 1 0 0 1 0\n[667] 1 1 0 0 0 1 0 0 2 2 2 2 2 0 0 1 0 2 3 0 2 1 0 0 2 2 0 0 2 0 0 3 0 2 0 1 1\n[704] 3 0 1 4 0 2 0 0 0 1 0 2 0 0 1 0 1 1 0 0 0 2 1 0 1 2 2 0 2 0 0 2 1 0 1 0 2\n[741] 0 0 0 2 0 0 1 0 0 2 2 0 1 0 1 0 1 2 2 2 0 1 2 0 1 0 2 1\nwhich.max(sapply(1:nrow(dat), function(i) sum(is.na(dat[i, ]))))[1] 50\nsum(is.na(dat[50, ]))[1] 4"},{"path":"missingdata.html","id":"visualize","chapter":"19 Handling Missing data","heading":"19.1.1 Visualize","text":"may helpful visualize missing data get quick impression missingness. rtemis, can use mplot.missing().Missing data shown magenta default. row image shows total NA values per column","code":"\nlibrary(rtemis)\nmplot.missing(dat)"},{"path":"missingdata.html","id":"summarize-1","chapter":"19 Handling Missing data","heading":"19.1.2 Summarize","text":"Get N missing per column:rtemis::checkData() includes information missing data:","code":"\nsapply(dat, function(i) sum(is.na(i)))pregnant  glucose pressure  triceps  insulin     mass pedigree      age \n       0        5       35      227      374       11        0        0 \ndiabetes \n       0 \ncheckData(dat)  Dataset: dat \n\n  [[ Summary ]]\n  768 cases with 9 features: \n  * 8 continuous features \n  * 0 integer features \n  * 1 categorical feature, which is not ordered\n  * 0 constant features \n  * 0 duplicated cases \n  * 5 features include 'NA' values; 652 'NA' values total\n    ** Max percent missing in a feature is 48.70% (insulin)\n    ** Max percent missing in a case is 44.44% (case #50)\n\n  [[ Recommendations ]]\n  * Consider imputing missing values or use complete cases only\n\n"},{"path":"missingdata.html","id":"handle-missing-data","chapter":"19 Handling Missing data","heading":"19.2 Handle missing data","text":"Different approaches can used handle missing data:nothing! - algorithm(s) can handle missing data (decision trees!)Exclude data: Use complete cases onlyFill (make ) data: Replace Impute\nReplace median/mean\nPredict missing present\nSingle imputation\nMultiple imputation\n\nReplace median/meanPredict missing present\nSingle imputation\nMultiple imputation\nSingle imputationMultiple imputation","code":""},{"path":"missingdata.html","id":"do-nothing","chapter":"19 Handling Missing data","heading":"19.2.1 Do nothing","text":"Algorithms like decision trees ensemble methods use decision trees like random forest gradient boosting can handle missing data, depending particular implementation. example, rpart::rpart() used rtemis::s.CART() trouble missing data predictors:","code":"\ndat.cart <- s.CART(dat)[2020-11-09 01:06:30 s.CART] Hello, egenn \n\n[2020-11-09 01:06:30 dataPrepare] Imbalanced classes: using Inverse Probability Weighting \n\n[[ Classification Input Summary ]]\n   Training features: 768 x 8 \n    Training outcome: 768 x 1 \n    Testing features: Not available\n     Testing outcome: Not available\n\n[2020-11-09 01:06:32 s.CART] Training CART... \n\n[[ CART Classification Training Summary ]]\n                   Reference \n        Estimated  neg  pos  \n              neg  426   89\n              pos   74  179\n\n                   Overall  \n      Sensitivity  0.8520 \n      Specificity  0.6679 \nBalanced Accuracy  0.7600 \n              PPV  0.8272 \n              NPV  0.7075 \n               F1  0.8394 \n         Accuracy  0.7878 \n              AUC  0.7854 \n\n  Positive Class:  neg \n\n[2020-11-09 01:06:32 s.CART] Run completed in 0.04 minutes (Real: 2.15; User: 1.28; System: 0.11) \n"},{"path":"missingdata.html","id":"use-complete-cases-only","chapter":"19 Handling Missing data","heading":"19.2.2 Use complete cases only","text":"R’s builtin complete.cases() function returns, name suggests, logical index cases (.e. rows) missing values, .e. complete.lost 376 cases example. ’s quite , , dataset, probably want look options exclude cases.","code":"\ndim(dat)[1] 768   9\nindex_cc <- complete.cases(dat)\nclass(index_cc)[1] \"logical\"\nlength(index_cc)[1] 768\nhead(index_cc)[1] FALSE FALSE FALSE  TRUE  TRUE FALSE\ndat_cc <- dat[index_cc, ]\ndim(dat_cc)[1] 392   9"},{"path":"missingdata.html","id":"replace-with-a-fixed-value","chapter":"19 Handling Missing data","heading":"19.2.3 Replace with a fixed value","text":"can manually replace missing values mean median case continuous variable, mode case categorical feature.\nexample, replace first feature’s missing values mean:rtemis::preprocess() can replace missing values mean (numeric features) mode (factors) columns:Verify missing data rerunning checkData():may want include “missingness” column indicates cases imputed include model. can create simply running:preprocess() includes option missingness add corresponding indicator columns imputation:","code":"\npressure_mean <- mean(dat$pressure, na.rm = TRUE)\ndat_im <- dat\ndat_im$pressure[is.na(dat_im$pressure)] <- pressure_mean\ndat_pre <- preprocess(dat, impute = TRUE, impute.type = \"meanMode\")[2020-11-09 01:06:33 preprocess] Imputing missing values using mean and getMode... \n[2020-11-09 01:06:33 preprocess] Done \n\ncheckData(dat_pre)  Dataset: dat_pre \n\n  [[ Summary ]]\n  768 cases with 9 features: \n  * 8 continuous features \n  * 0 integer features \n  * 1 categorical feature, which is not ordered\n  * 0 constant features \n  * 0 duplicated cases \n  * 0 features include 'NA' values\n\n  [[ Recommendations ]]\n  * Everything looks good\n\n\npressure_missing = factor(as.integer(is.na(dat$pressure)))\ndat_pre <- preprocess(dat, impute = TRUE, impute.type = \"meanMode\",\n                      missingness = TRUE)[2020-11-09 01:06:33 preprocess] Created missingness indicator for glucose \n[2020-11-09 01:06:33 preprocess] Created missingness indicator for pressure \n[2020-11-09 01:06:33 preprocess] Created missingness indicator for triceps \n[2020-11-09 01:06:33 preprocess] Created missingness indicator for insulin \n[2020-11-09 01:06:33 preprocess] Created missingness indicator for mass \n[2020-11-09 01:06:33 preprocess] Imputing missing values using mean and getMode... \n[2020-11-09 01:06:33 preprocess] Done \n\nhead(dat_pre)  pregnant glucose pressure  triceps  insulin mass pedigree age diabetes\n1        6     148       72 35.00000 155.5482 33.6    0.627  50      pos\n2        1      85       66 29.00000 155.5482 26.6    0.351  31      neg\n3        8     183       64 29.15342 155.5482 23.3    0.672  32      pos\n4        1      89       66 23.00000  94.0000 28.1    0.167  21      neg\n5        0     137       40 35.00000 168.0000 43.1    2.288  33      pos\n6        5     116       74 29.15342 155.5482 25.6    0.201  30      neg\n  glucose_missing pressure_missing triceps_missing insulin_missing mass_missing\n1               0                0               0               1            0\n2               0                0               0               1            0\n3               0                0               1               1            0\n4               0                0               0               0            0\n5               0                0               0               0            0\n6               0                0               1               1            0"},{"path":"missingdata.html","id":"add-new-level-missing","chapter":"19 Handling Missing data","heading":"19.2.3.1 Add new level “missing”","text":"One option handle missing data categorical variables, introduce new level “missing” factor, instead replacing mode, example. bin continuous variable convert categorical, can also applied.Since factors missing values current dataset create copy replace data NA:Replace NA values new level missing:","code":"\ndat2 <- dat\ndat2$diabetes[sample(1:NROW(dat2), 35)] <- NA\nsum(is.na(dat2$diabetes))[1] 35\nlevels(dat2$diabetes)[1] \"neg\" \"pos\"\ndat_pre2 <- preprocess(dat2, factorNA2missing = TRUE)[2020-11-09 01:06:33 preprocess] Converting NA in factors to level \"missing\"... \n[2020-11-09 01:06:33 preprocess] Done \n\nanyNA(dat_pre2$diabetes)[1] FALSE\nlevels(dat_pre2$diabetes)[1] \"neg\"     \"pos\"     \"missing\""},{"path":"missingdata.html","id":"last-observation-carried-forward-locf","chapter":"19 Handling Missing data","heading":"19.2.4 Last observation carried forward (LOCF)","text":"longitudinal / timeseries data, may want replace missing values last observed value. called last observation carried forward (LOCF). always, whether procedure appropriate depend reasons missingness. zoo DescTool packages provide commands perform LOCF.simulated data. missing blood pressure measurements Saturdays Sundays:zoo package includes na.locf().Similar functionality included DescTools’ LOCF() function:","code":"\ndat <- data.frame(Day = rep(c(\"Mon\", \"Tues\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"), 3),\n                  SBP = sample(105:125, 21, TRUE))\ndat$SBP[dat$Day == \"Sat\" | dat$Day == \"Sun\"] <- NA\ndat    Day SBP\n1   Mon 115\n2  Tues 116\n3   Wed 111\n4   Thu 112\n5   Fri 119\n6   Sat  NA\n7   Sun  NA\n8   Mon 106\n9  Tues 113\n10  Wed 109\n11  Thu 112\n12  Fri 108\n13  Sat  NA\n14  Sun  NA\n15  Mon 111\n16 Tues 109\n17  Wed 108\n18  Thu 120\n19  Fri 107\n20  Sat  NA\n21  Sun  NA\ndat$SBPlocf <- zoo::na.locf(dat$SBP)\ndat    Day SBP SBPlocf\n1   Mon 115     115\n2  Tues 116     116\n3   Wed 111     111\n4   Thu 112     112\n5   Fri 119     119\n6   Sat  NA     119\n7   Sun  NA     119\n8   Mon 106     106\n9  Tues 113     113\n10  Wed 109     109\n11  Thu 112     112\n12  Fri 108     108\n13  Sat  NA     108\n14  Sun  NA     108\n15  Mon 111     111\n16 Tues 109     109\n17  Wed 108     108\n18  Thu 120     120\n19  Fri 107     107\n20  Sat  NA     107\n21  Sun  NA     107\nDescTools::LOCF(dat$SBP) [1] 115 116 111 112 119 119 119 106 113 109 112 108 108 108 111 109 108 120 107\n[20] 107 107"},{"path":"missingdata.html","id":"replace-missing-values-with-estimated-values","chapter":"19 Handling Missing data","heading":"19.2.5 Replace missing values with estimated values","text":"","code":""},{"path":"missingdata.html","id":"single-imputation","chapter":"19 Handling Missing data","heading":"19.2.5.1 Single imputation","text":"can use non-missing data predict missing data iterative procedure (Buuren Groothuis-Oudshoorn 2010)(Stekhoven Bühlmann 2012).\nmissRanger package uses optimized (parallel-capable) package ranger (Wright Ziegler 2015) iteratively train random forest models imputation.Note: default method preprocess(impute = TRUE) use missRanger.","code":"\nlibrary(missRanger)\ndat <- iris\nset.seed(2020)\ndat[sample(1:150, 5), 1] <- dat[sample(1:150, 22), 4] <- dat[sample(1:150, 18), 4] <- NA\ndat_rfimp <- missRanger(dat, num.trees = 100)\nMissing value imputation by random forests\n\n  Variables to impute:      Sepal.Length, Petal.Width\n  Variables used to impute: Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species\niter 1: ..\niter 2: ..\niter 3: ..\niter 4: ..\nhead(dat_rfimp)  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1     5.100000         3.5          1.4         0.2  setosa\n2     4.900000         3.0          1.4         0.2  setosa\n3     4.732533         3.2          1.3         0.2  setosa\n4     4.600000         3.1          1.5         0.2  setosa\n5     5.000000         3.6          1.4         0.2  setosa\n6     5.400000         3.9          1.7         0.4  setosa\ncheckData(dat_rfimp)  Dataset: dat_rfimp \n\n  [[ Summary ]]\n  150 cases with 5 features: \n  * 4 continuous features \n  * 0 integer features \n  * 1 categorical feature, which is not ordered\n    ** 1 unordered categorical feature has more than 2 levels\n  * 0 constant features \n  * 1 duplicated case \n  * 0 features include 'NA' values\n\n  [[ Recommendations ]]\n  * Remove the duplicated case \n  * Check the unordered categorical feature with more than 2 levels and consider\n    if ordering would make sense\n\n"},{"path":"missingdata.html","id":"multiple-imputation","chapter":"19 Handling Missing data","heading":"19.2.5.2 Multiple imputation","text":"Multiple imputation creates multiple estimates missing data. statistically valid small datasets, especially goal get accurate estimates summary statistics, may practical larger datasets. usually considered option machine learning (duplicating cases may add bias complexity resampling). package mice popular choice multiple imputation R.","code":"\nlibrary(mice)\ndat_mice <- mice(dat)"},{"path":"classes.html","id":"classes","chapter":"20 Classes and Object-Oriented Programming","heading":"20 Classes and Object-Oriented Programming","text":"Object-Oriented Programming (OOP) programming paradigm built around objects associated data, known attributes, functions, known methods.4 main class systems R:S3: informally defined, minimal, lean, methods dispatch based class; base stats packages use S3 exclusivelyS4: formally defined, allows method dispatch multiple argumentsRC: Reference class: Reference semantics; similar programming languages; methods part objectR6: 3rd party class system similar RC, lightweight, fasterS3 S4 methods part generic functions. RC R6 methods part object, can () write generic functions well.chapter focus ubiquitous S3 system. advanced (real OOP) applications, recommend looking R6 system.","code":""},{"path":"classes.html","id":"s3","chapter":"20 Classes and Object-Oriented Programming","heading":"20.1 S3","text":"R objects using far S3 objects. Data frames common S3 objects.Generic functions functions act differently based class input object. already used many . example, summary() works differently data.frame, factor, glm object, etc.Generic functions R saved functionname.classname() called automatically, based class first argument. allows function, e.g. print(), summary(), c(), different effect objects different classes.\nexample, print() function applied data frame, actually call print.data.frame(), applied factor, call print.factor().\nmeans type print(iris) calls print.data.frame(iris)Note R documentation lists usage information separately S3 method, e.g. ## S3 method class 'factor'","code":""},{"path":"classes.html","id":"s3methods","chapter":"20 Classes and Object-Oriented Programming","heading":"20.1.1 methods()","text":"get list available methods defined specific class,\n.e. “different functions can use object?”Conversely, get list available methods generic function (.e. classes )\n(.e. “objects can use function ?”)","code":"\nmethods(class = \"data.frame\") [1] [             [[            [[<-          [<-           $<-          \n [6] aggregate     anyDuplicated anyNA         as.data.frame as.list      \n[11] as.matrix     by            cbind         coerce        dim          \n[16] dimnames      dimnames<-    droplevels    duplicated    edit         \n[21] format        formula       head          initialize    is.na        \n[26] Math          merge         na.exclude    na.omit       Ops          \n[31] plot          print         prompt        rbind         row.names    \n[36] row.names<-   rowsum        show          slotsFromS3   split        \n[41] split<-       stack         str           subset        summary      \n[46] Summary       t             tail          transform     type.convert \n[51] unique        unstack       within       \nsee '?methods' for accessing help and source code\nmethods(generic.function = \"plot\") [1] plot.acf*           plot.data.frame*    plot.decomposed.ts*\n [4] plot.default        plot.dendrogram*    plot.density*      \n [7] plot.ecdf           plot.factor*        plot.formula*      \n[10] plot.function       plot.hclust*        plot.histogram*    \n[13] plot.HoltWinters*   plot.isoreg*        plot.lm*           \n[16] plot.medpolish*     plot.mlm*           plot.ppr*          \n[19] plot.prcomp*        plot.princomp*      plot.profile.nls*  \n[22] plot.R6*            plot.raster*        plot.spec*         \n[25] plot.stepfun        plot.stl*           plot.table*        \n[28] plot.ts             plot.tskernel*      plot.TukeyHSD*     \nsee '?methods' for accessing help and source code"},{"path":"classes.html","id":"defining-custom-s3-classes","chapter":"20 Classes and Object-Oriented Programming","heading":"20.1.2 Defining custom S3 classes","text":"simple assign object new class.\nformal class definition, object directly assigned class name. object can belong multiple classes:hierarchy classes goes left right, meaning generic methods searched classes order appear output class().print x, since print method class specialvector numeric, default print.default() command automatically called:create custom print() function new class specialvector, define function named print.[classname]:Now, print object class specialvector, custom print() command invoked:needed, can call default another appropriate method directly:can change vector back regular numeric vector, different class, just easily:","code":"\nx <- 1:10\nclass(x) <- c(\"specialvector\", \"numeric\")\nclass(x)[1] \"specialvector\" \"numeric\"      \nprint(x) [1]  1  2  3  4  5  6  7  8  9 10\nattr(,\"class\")\n[1] \"specialvector\" \"numeric\"      \nprint.default(x) [1]  1  2  3  4  5  6  7  8  9 10\nattr(,\"class\")\n[1] \"specialvector\" \"numeric\"      \nprint.specialvector <- function(x, ...) {\n  cat(\"This is a special vector of length\", length(x), \"\\n\")\n  cat(\"Its mean value is\", mean(x, na.rm = TRUE), \"and its median is\", median(x, na.rm = TRUE))\n  cat(\"\\nHere are the first few elements:\\n\", head(x), \"\\n\")\n}\nxThis is a special vector of length 10 \nIts mean value is 5.5 and its median is 5.5\nHere are the first few elements:\n 1 2 3 4 5 6 \nprint.default(x) [1]  1  2  3  4  5  6  7  8  9 10\nattr(,\"class\")\n[1] \"specialvector\" \"numeric\"      \nclass(x) <- \"numeric\"\nx [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"datatable.html","id":"datatable","chapter":"21 Efficient data analysis with data.table","heading":"21 Efficient data analysis with data.table","text":"data.table package provides modern highly optimized version R’s data.frame structure. highly memory efficient automatically parallelizes internal operations achieve substantial speed improvements data.frames. data.table package weighs just kilobytes, zero dependencies, maintains compatibility R versions going far back possible.","code":""},{"path":"datatable.html","id":"installation","chapter":"21 Efficient data analysis with data.table","heading":"21.0.1 Installation","text":"can install data.table CRAN GitHub. Check data.table wiki info.","code":""},{"path":"datatable.html","id":"data.table-significantly-extends-the-data.frame","chapter":"21 Efficient data analysis with data.table","heading":"21.0.2 data.table significantly extends the data.frame","text":"two main ways data.table differs data.frame:can perform many operations “-place” without creating copy (.e. make changes data.table without assign back ).lot indexing slicing can within data.table’s “frame” .e. square brackets data.table, like applying custom function specific columns /cases.data.table operations remain close possible data.frame operations, trying extend rather replace latter’s functionality. great lot R user already familiar using data.frames applicable well.","code":"\nlibrary(rtemis)  .:rtemis 0.8.1: Welcome, egenn\n  [x86_64-apple-darwin17.0 (64-bit): Defaulting to 4/4 available cores]\n  Documentation & vignettes: https://rtemis.lambdamd.org\nlibrary(data.table)\nAttaching package: 'data.table'The following object is masked from 'package:rtemis':\n\n    cube"},{"path":"datatable.html","id":"create-a-data.table","chapter":"21 Efficient data analysis with data.table","heading":"21.1 Create a data.table","text":"","code":""},{"path":"datatable.html","id":"by-assignment-data.table","chapter":"21 Efficient data analysis with data.table","heading":"21.1.1 By assignment: data.table()","text":"syntax data.frame():Notice data.table inherits data.frame. means method exist data.table, method data.frame used (review classes generic functions.\nOne difference data.frame(), can see , stringsAsFactors defaults FALSE data.table(). part improving efficieny, data.tables away row names. Instead using rownames, can add extra column information - advisable working data.frames well.rather convenient option data.tables print column’s class column name. can pass argument class = TRUE print() set global option datatable.print.class using options()","code":"\n(df <- data.frame(A = 1:5,\n                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),\n                  C = c(\"a\", \"b\", \"b\", \"a\", \"a\")))  A   B C\n1 1 1.2 a\n2 2 4.3 b\n3 3 9.7 b\n4 4 5.6 a\n5 5 8.1 a\nclass(df)[1] \"data.frame\"\n(dt <- data.table(A = 1:5,\n                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),\n                  C = c(\"a\", \"b\", \"b\", \"a\", \"a\")))       A     B      C\n   <int> <num> <char>\n1:     1   1.2      a\n2:     2   4.3      b\n3:     3   9.7      b\n4:     4   5.6      a\n5:     5   8.1      a\nclass(dt)[1] \"data.table\" \"data.frame\"\noptions(datatable.print.class = TRUE)\ndt       A     B      C\n   <int> <num> <char>\n1:     1   1.2      a\n2:     2   4.3      b\n3:     3   9.7      b\n4:     4   5.6      a\n5:     5   8.1      a\n(dt <- data.table(A = 1:5,\n                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),\n                  C = c(\"a\", \"b\", \"b\", \"a\", \"a\"),\n                  stringsAsFactors = TRUE))       A     B      C\n   <int> <num> <fctr>\n1:     1   1.2      a\n2:     2   4.3      b\n3:     3   9.7      b\n4:     4   5.6      a\n5:     5   8.1      a"},{"path":"datatable.html","id":"by-coercion-as.data.table","chapter":"21 Efficient data analysis with data.table","heading":"21.1.2 By coercion: as.data.table()","text":"","code":"\ndat <- data.frame(A = 1:5,\n                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),\n                  C = c(\"a\", \"b\", \"b\", \"a\", \"a\"))\n(dat2 <- as.data.table(dat))       A     B      C\n   <int> <num> <char>\n1:     1   1.2      a\n2:     2   4.3      b\n3:     3   9.7      b\n4:     4   5.6      a\n5:     5   8.1      a"},{"path":"datatable.html","id":"by-coercion-in-place-setdt","chapter":"21 Efficient data analysis with data.table","heading":"21.1.3 By coercion in-place: setDT()","text":"setDT converts list data.frame data.table -place. Note: original object changed, need assign output setDT new name.can similarly convert data.table data.frame, -place:","code":"\ndat <- data.frame(A = 1:5,\n                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),\n                  C = c(\"a\", \"b\", \"b\", \"a\", \"a\"))\nclass(dat)[1] \"data.frame\"\nsetDT(dat)\nclass(dat)[1] \"data.table\" \"data.frame\"\nsetDF(dat)\nclass(dat)[1] \"data.frame\""},{"path":"datatable.html","id":"read-into-data.table-from-file","chapter":"21 Efficient data analysis with data.table","heading":"21.1.4 Read into data.table from file","text":"data.table includes fread() function read data files, similar way base functions read.csv() read.table(). orders magnitude faster large data (e.g. thousands millions rows) can read directly URLs, zipped files. sep arguments defines separator (read.csv() read.table()), set \"auto\" (default) great job figuring .speed convenience, fread() recommended read.csv()/read.table() even intend work data.frame exclusively, case can pass argument data.table = FALSE fread()","code":"\ndat <- fread(\"path/to/file.csv\")\ndat <- fread(\"https::/url/to/file.csv.gz\")"},{"path":"datatable.html","id":"write-a-data.table-to-file-fwrite","chapter":"21 Efficient data analysis with data.table","heading":"21.1.5 Write a data.table to file: fwrite()","text":"","code":"\nfwrite(dt, \"/path/to/file.csv\")"},{"path":"datatable.html","id":"combine-data.tables","chapter":"21 Efficient data analysis with data.table","heading":"21.2 Combine data.tables","text":"cbind() rbind() work data.tables data.frames:","code":"\ndt1 <- data.table(a = 1:5)\ndt2 <- data.table(b = 11:15)\ncbind(dt1, dt2)       a     b\n   <int> <int>\n1:     1    11\n2:     2    12\n3:     3    13\n4:     4    14\n5:     5    15\nrbind(dt1, dt1)        a\n    <int>\n 1:     1\n 2:     2\n 3:     3\n 4:     4\n 5:     5\n 6:     1\n 7:     2\n 8:     3\n 9:     4\n10:     5"},{"path":"datatable.html","id":"str-works-the-same-and-you-should-keep-using-it","chapter":"21 Efficient data analysis with data.table","heading":"21.3 str works the same (and you should keep using it!)","text":"","code":"\nstr(df)'data.frame':   5 obs. of  3 variables:\n $ A: int  1 2 3 4 5\n $ B: num  1.2 4.3 9.7 5.6 8.1\n $ C: chr  \"a\" \"b\" \"b\" \"a\" ...\nstr(dt)Classes 'data.table' and 'data.frame':  5 obs. of  3 variables:\n $ A: int  1 2 3 4 5\n $ B: num  1.2 4.3 9.7 5.6 8.1\n $ C: Factor w/ 2 levels \"a\",\"b\": 1 2 2 1 1\n - attr(*, \".internal.selfref\")=<externalptr> "},{"path":"datatable.html","id":"indexing-a-data.table","chapter":"21 Efficient data analysis with data.table","heading":"21.4 Indexing a data.table","text":"Indexing largely unchanged, notable exceptions.\nInteger indexing mostly :Selecting single column integer indexing data.table drop vector (.e. similar drop = FALSE data.frame):data.table, can access column names directly without quoting using $:Think working inside data.table frame (.e. “[…]”) like environment. direct access variables within .\nwant refer variables outside data.table, prefix variable name ... similar access contents directory current directory terminal:tells data.table “don’t look ‘varname’ data.table, go outside find ”","code":"\ndf[1, ]  A   B C\n1 1 1.2 a\ndt[1, ]       A     B      C\n   <int> <num> <fctr>\n1:     1   1.2      a\ndf[, 1][1] 1 2 3 4 5\ndf[, 1, drop = FALSE]  A\n1 1\n2 2\n3 3\n4 4\n5 5\ndt[, 1]       A\n   <int>\n1:     1\n2:     2\n3:     3\n4:     4\n5:     5\ndf[, \"B\"][1] 1.2 4.3 9.7 5.6 8.1\ndf$B[1] 1.2 4.3 9.7 5.6 8.1\ndt[, B][1] 1.2 4.3 9.7 5.6 8.1\ndf[df$B > 5, ]  A   B C\n3 3 9.7 b\n4 4 5.6 a\n5 5 8.1 a\nwith(df, df[B > 5, ])  A   B C\n3 3 9.7 b\n4 4 5.6 a\n5 5 8.1 a\ndt[B > 5, ]       A     B      C\n   <int> <num> <fctr>\n1:     3   9.7      b\n2:     4   5.6      a\n3:     5   8.1      a\nvarname = \"C\"\ndf[, varname][1] \"a\" \"b\" \"b\" \"a\" \"a\"\ndt[, ..varname]        C\n   <fctr>\n1:      a\n2:      b\n3:      b\n4:      a\n5:      a"},{"path":"datatable.html","id":"conditionally-select-cases","chapter":"21 Efficient data analysis with data.table","heading":"21.4.1 Conditionally select cases:","text":"easy select cases combining conditions using column names directly. Note data.table require add “,” select columns specified rows - works just include :way conditionally select data.frame:data.table equivalent probably simplest:","code":"\ndf[df$A > mean(df$A) & df$B > mean(df$B), ]  A   B C\n5 5 8.1 a\nsubset(df, A > mean(A) & B > mean(B))  A   B C\n5 5 8.1 a\nwith(df, df[A > mean(A) & B > mean(B), ])  A   B C\n5 5 8.1 a\ndt[A > mean(A) & B > mean(B)]       A     B      C\n   <int> <num> <fctr>\n1:     5   8.1      a\n(a <- rnormmat(10, 5, seed = 2020, return.df = TRUE))           V1          V2          V3          V4          V5\n1   0.3769721 -0.85312282  2.17436525 -0.81250466  0.90850113\n2   0.3015484  0.90925918  1.09818265 -0.74370217 -0.50505960\n3  -1.0980232  1.19637296  0.31822032  1.09534507 -0.30100401\n4  -1.1304059 -0.37158390 -0.07314756  2.43537371 -0.72603598\n5  -2.7965343 -0.12326023  0.83426874  0.38811847 -1.18007703\n6   0.7205735  1.80004312  0.19875064  0.29062767  0.25307471\n7   0.9391210  1.70399588  1.29784138 -0.28559829 -0.37071130\n8  -0.2293777 -3.03876461  0.93671831  0.07601472  0.02217956\n9   1.7591313 -2.28897495 -0.14743319 -0.56029860  0.66004412\n10  0.1173668  0.05830349  0.11043199  0.44718837  0.48879364\na[1, 3] <- a[3, 4] <- a[5, 3] <- a[7, 3] <- NA\nadt <- as.data.table(a)\na[!is.na(a$V3), ]           V1          V2          V3          V4          V5\n2   0.3015484  0.90925918  1.09818265 -0.74370217 -0.50505960\n3  -1.0980232  1.19637296  0.31822032          NA -0.30100401\n4  -1.1304059 -0.37158390 -0.07314756  2.43537371 -0.72603598\n6   0.7205735  1.80004312  0.19875064  0.29062767  0.25307471\n8  -0.2293777 -3.03876461  0.93671831  0.07601472  0.02217956\n9   1.7591313 -2.28897495 -0.14743319 -0.56029860  0.66004412\n10  0.1173668  0.05830349  0.11043199  0.44718837  0.48879364\nadt[!is.na(V3)]           V1          V2          V3          V4          V5\n        <num>       <num>       <num>       <num>       <num>\n1:  0.3015484  0.90925918  1.09818265 -0.74370217 -0.50505960\n2: -1.0980232  1.19637296  0.31822032          NA -0.30100401\n3: -1.1304059 -0.37158390 -0.07314756  2.43537371 -0.72603598\n4:  0.7205735  1.80004312  0.19875064  0.29062767  0.25307471\n5: -0.2293777 -3.03876461  0.93671831  0.07601472  0.02217956\n6:  1.7591313 -2.28897495 -0.14743319 -0.56029860  0.66004412\n7:  0.1173668  0.05830349  0.11043199  0.44718837  0.48879364"},{"path":"datatable.html","id":"select-columns","chapter":"21 Efficient data analysis with data.table","heading":"21.4.2 Select columns","text":"integer index, data.frameby name: selecting single column name returns vector:name: selecting one columns name enclosed .() , case, short list(), return data.table:","code":"\ndt[, 2]       B\n   <num>\n1:   1.2\n2:   4.3\n3:   9.7\n4:   5.6\n5:   8.1\ndt[, 2:3]       B      C\n   <num> <fctr>\n1:   1.2      a\n2:   4.3      b\n3:   9.7      b\n4:   5.6      a\n5:   8.1      a\ndt[, c(1, 3)]       A      C\n   <int> <fctr>\n1:     1      a\n2:     2      b\n3:     3      b\n4:     4      a\n5:     5      a\ndt[, A][1] 1 2 3 4 5\ndt[, .(A)]       A\n   <int>\n1:     1\n2:     2\n3:     3\n4:     4\n5:     5\ndt[, .(A, B)]       A     B\n   <int> <num>\n1:     1   1.2\n2:     2   4.3\n3:     3   9.7\n4:     4   5.6\n5:     5   8.1"},{"path":"datatable.html","id":"add-new-columns-in-place","chapter":"21 Efficient data analysis with data.table","heading":"21.5 Add new columns in-place","text":"Use := assignment add new column existing data.table.\n, -place means assign result variable, existing data.table changed.","code":"\ndt[, AplusC := A + C]Warning in Ops.factor(A, C): '+' not meaningful for factors\ndt       A     B      C AplusC\n   <int> <num> <fctr> <lgcl>\n1:     1   1.2      a     NA\n2:     2   4.3      b     NA\n3:     3   9.7      b     NA\n4:     4   5.6      a     NA\n5:     5   8.1      a     NA"},{"path":"datatable.html","id":"add-multiple-columns-in-place","chapter":"21 Efficient data analysis with data.table","heading":"21.6 Add multiple columns in-place","text":"add multiple columns, use := little awkward notation:","code":"\ndt[, `:=`(AminusC = A - C, AoverC = A / C)]Warning in Ops.factor(A, C): '-' not meaningful for factorsWarning in Ops.factor(A, C): '/' not meaningful for factors\ndt       A     B      C AplusC AminusC AoverC\n   <int> <num> <fctr> <lgcl>  <lgcl> <lgcl>\n1:     1   1.2      a     NA      NA     NA\n2:     2   4.3      b     NA      NA     NA\n3:     3   9.7      b     NA      NA     NA\n4:     4   5.6      a     NA      NA     NA\n5:     5   8.1      a     NA      NA     NA"},{"path":"datatable.html","id":"convert-column-type","chapter":"21 Efficient data analysis with data.table","heading":"21.7 Convert column type","text":"Use base R coercion function (.*) convert column -place using := notation","code":"\ndt[, A := as.numeric(A)]\ndt       A     B      C AplusC AminusC AoverC\n   <num> <num> <fctr> <lgcl>  <lgcl> <lgcl>\n1:     1   1.2      a     NA      NA     NA\n2:     2   4.3      b     NA      NA     NA\n3:     3   9.7      b     NA      NA     NA\n4:     4   5.6      a     NA      NA     NA\n5:     5   8.1      a     NA      NA     NA"},{"path":"datatable.html","id":"delete-column-in-place","chapter":"21 Efficient data analysis with data.table","heading":"21.8 Delete column in-place","text":"delete column, use := set NULL:awkward notation earlier delete multiple columns:","code":"\ndt[, AoverC := NULL]\ndt       A     B      C AplusC AminusC\n   <num> <num> <fctr> <lgcl>  <lgcl>\n1:     1   1.2      a     NA      NA\n2:     2   4.3      b     NA      NA\n3:     3   9.7      b     NA      NA\n4:     4   5.6      a     NA      NA\n5:     5   8.1      a     NA      NA\ndt[, `:=`(AplusC = NULL, AminusC = NULL)]\ndt       A     B      C\n   <num> <num> <fctr>\n1:     1   1.2      a\n2:     2   4.3      b\n3:     3   9.7      b\n4:     4   5.6      a\n5:     5   8.1      a"},{"path":"datatable.html","id":"summarize-2","chapter":"21 Efficient data analysis with data.table","heading":"21.9 Summarize","text":"Create new data.table using summary function:","code":"\nAsummary <- dt[, .(Amax = max(A), Amin = min(A), Asd = sd(A))]\nAsummary    Amax  Amin      Asd\n   <num> <num>    <num>\n1:     5     1 1.581139"},{"path":"datatable.html","id":"address-object-location-in-memory","chapter":"21 Efficient data analysis with data.table","heading":"21.9.1 address: Object location in memory","text":"add new column existing data.frame, data.frame copied behind scenes - can tell becasue memory address (’s physically stored computer) changes:add new column data.table -place address remains unchanged:","code":"\ndf1 <- data.frame(alpha = 1:5, beta = 11:15)\naddress(df1)[1] \"0x7fc79f15ecc8\"\ndf1$gamma <- df1$alpha + df1$beta\naddress(df1)[1] \"0x7fc79f3a1788\"\ndt1 <- data.table(alpha = 1:5, beta = 11:15)\naddress(dt1)[1] \"0x7fc79d9c1200\"\ndt1[, gamma := alpha + beta]\naddress(dt1)[1] \"0x7fc79d9c1200\""},{"path":"datatable.html","id":"reference-semantics-at-work","chapter":"21 Efficient data analysis with data.table","heading":"21.9.2 Reference semantics at work","text":"now, likely used working regular R objects behave like :data.table uses “reference semantics” “pass--reference.” careful might mightily confused:\nwant create copy data.table, use copy():\n","code":"\n(df1 <- data.frame(a = rep(1, 5)))  a\n1 1\n2 1\n3 1\n4 1\n5 1\n(df2 <- df1)  a\n1 1\n2 1\n3 1\n4 1\n5 1\ndf2$a <- df2$a*2\ndf2  a\n1 2\n2 2\n3 2\n4 2\n5 2\ndf1  a\n1 1\n2 1\n3 1\n4 1\n5 1\naddress(df1)[1] \"0x7fc79d01f3f0\"\naddress(df2)[1] \"0x7fc798522368\"\n(dt1 <- data.table(a = rep(1, 5)))       a\n   <num>\n1:     1\n2:     1\n3:     1\n4:     1\n5:     1\n(dt2 <- dt1)       a\n   <num>\n1:     1\n2:     1\n3:     1\n4:     1\n5:     1\ndt2[, a := a * 2]\ndt2       a\n   <num>\n1:     2\n2:     2\n3:     2\n4:     2\n5:     2\ndt1       a\n   <num>\n1:     2\n2:     2\n3:     2\n4:     2\n5:     2\naddress(dt1)[1] \"0x7fc79b695600\"\naddress(dt2)[1] \"0x7fc79b695600\"\n(dt3 <- copy(dt1))       a\n   <num>\n1:     2\n2:     2\n3:     2\n4:     2\n5:     2\naddress(dt3)[1] \"0x7fc7a00f8000\"\ndt3[, a := a * 2]\ndt3       a\n   <num>\n1:     4\n2:     4\n3:     4\n4:     4\n5:     4\ndt1       a\n   <num>\n1:     2\n2:     2\n3:     2\n4:     2\n5:     2"},{"path":"datatable.html","id":"set-set-attributes-in-place","chapter":"21 Efficient data analysis with data.table","heading":"21.10 set*(): Set attributes in-place","text":"data.table includes number function begin set*, change input reference require assignment.\nmay surprised find even inocuous operation like changing column names data.frame, requires copy:Use setnames() edit data.table’s column names -place:","code":"\naddress(df)[1] \"0x7fc79ea42ba8\"\ncolnames(df) <- c(\"A\", \"B\", \"Group\")\naddress(df)[1] \"0x7fc79b69bf08\"\naddress(dt)[1] \"0x7fc7a00ab200\"\nsetnames(dt, old = 1:3, new = c(\"A\", \"B\", \"Group\"))\naddress(dt)[1] \"0x7fc7a00ab200\""},{"path":"datatable.html","id":"setorder-set-order-of-data.table","chapter":"21 Efficient data analysis with data.table","heading":"21.11 setorder(): Set order of data.table","text":"Since set* function, changes data.table -place. can order number columns, ascending descending:\nOrder Group :Order Group decreasing B:","code":"\nsetorder(dt, Group, A)\ndt       A     B  Group\n   <num> <num> <fctr>\n1:     1   1.2      a\n2:     4   5.6      a\n3:     5   8.1      a\n4:     2   4.3      b\n5:     3   9.7      b\nsetorder(dt, Group, -B)\ndt       A     B  Group\n   <num> <num> <fctr>\n1:     5   8.1      a\n2:     4   5.6      a\n3:     1   1.2      a\n4:     3   9.7      b\n5:     2   4.3      b"},{"path":"datatable.html","id":"group-according-to-by","chapter":"21 Efficient data analysis with data.table","heading":"21.12 Group according to by","text":"now, learned use data.table frame dat[, j] filter cases add/remove/transform columns -place j. whole dimension data.table frame: .\ncomplete data.table syntax :\n\ndt[, j, ]\n\nTake data.table dt\n\nSubset rows using \n\nManipulate columns j\n\nGrouped according \n, using .() list() j, returns new data.table:Making assignment := j, adds column -place. Since grouping, value assigned cases group:complex operations, may need refer slice data.table defined within j. special notation : .SD (think sub-data.table):\nnow, clearer data.table frame provides flexible way perform wide range operations minimal new notation.\n","code":"\ndt[, .(meanAbyGroup = mean(A)), by = Group]    Group meanAbyGroup\n   <fctr>        <num>\n1:      a     3.333333\n2:      b     2.500000\ndt[, list(medianBbyGroup = median(B)), by = Group]    Group medianBbyGroup\n   <fctr>          <num>\n1:      a            5.6\n2:      b            7.0\ndt[, meanAbyGroup := mean(A), by = Group]\ndt       A     B  Group meanAbyGroup\n   <num> <num> <fctr>        <num>\n1:     5   8.1      a     3.333333\n2:     4   5.6      a     3.333333\n3:     1   1.2      a     3.333333\n4:     3   9.7      b     2.500000\n5:     2   4.3      b     2.500000\ndt[, A_DiffFromGroupMin := .SD[, 1] - min(.SD[, 1]), by = Group]\ndt       A     B  Group meanAbyGroup A_DiffFromGroupMin\n   <num> <num> <fctr>        <num>              <num>\n1:     5   8.1      a     3.333333                  4\n2:     4   5.6      a     3.333333                  3\n3:     1   1.2      a     3.333333                  0\n4:     3   9.7      b     2.500000                  1\n5:     2   4.3      b     2.500000                  0"},{"path":"datatable.html","id":"apply-functions-to-columns","chapter":"21 Efficient data analysis with data.table","heading":"21.13 Apply functions to columns","text":"function returns list can used j return new data.table - therefore lapply perfect getting summary multiple columns:can specify columns operate adding .SDcols argument:can combine .SDcols :Create multiple new columns transformation existing store custom prefix:","code":"\n(dt1 <- as.data.table(rnormmat(10, 3, seed = 2020)))            V1          V2          V3\n         <num>       <num>       <num>\n 1:  0.3769721 -0.85312282  2.17436525\n 2:  0.3015484  0.90925918  1.09818265\n 3: -1.0980232  1.19637296  0.31822032\n 4: -1.1304059 -0.37158390 -0.07314756\n 5: -2.7965343 -0.12326023  0.83426874\n 6:  0.7205735  1.80004312  0.19875064\n 7:  0.9391210  1.70399588  1.29784138\n 8: -0.2293777 -3.03876461  0.93671831\n 9:  1.7591313 -2.28897495 -0.14743319\n10:  0.1173668  0.05830349  0.11043199\nsetnames(dt1, c(\"Alpha\", \"Beta\", \"Gamma\"))\ndt1[, lapply(.SD, mean)]        Alpha       Beta     Gamma\n        <num>      <num>     <num>\n1: -0.1039628 -0.1007732 0.6748199\ndt2 <- data.table(A = 1:5,\n                  B = c(1.2, 4.3, 9.7, 5.6, 8.1),\n                  C = rnorm(5),\n                  Group = c(\"a\", \"b\", \"b\", \"a\", \"a\"))\ndt2       A     B          C  Group\n   <int> <num>      <num> <char>\n1:     1   1.2 -0.8125047      a\n2:     2   4.3 -0.7437022      b\n3:     3   9.7  1.0953451      b\n4:     4   5.6  2.4353737      a\n5:     5   8.1  0.3881185      a\ndt2[, lapply(.SD, mean), .SDcols = 1:2]       A     B\n   <num> <num>\n1:     3  5.78\n# same as\ndt2[, lapply(.SD, mean), .SDcols = c(\"A\", \"B\")]       A     B\n   <num> <num>\n1:     3  5.78\ncols <- c(\"A\", \"B\")\ndt2[, lapply(.SD, mean), .SDcols = cols]       A     B\n   <num> <num>\n1:     3  5.78\ndt2[, lapply(.SD, median), .SDcols = c(\"B\", \"C\"), by = Group]    Group     B         C\n   <char> <num>     <num>\n1:      a   5.6 0.3881185\n2:      b   7.0 0.1758215\ndt1         Alpha        Beta       Gamma\n         <num>       <num>       <num>\n 1:  0.3769721 -0.85312282  2.17436525\n 2:  0.3015484  0.90925918  1.09818265\n 3: -1.0980232  1.19637296  0.31822032\n 4: -1.1304059 -0.37158390 -0.07314756\n 5: -2.7965343 -0.12326023  0.83426874\n 6:  0.7205735  1.80004312  0.19875064\n 7:  0.9391210  1.70399588  1.29784138\n 8: -0.2293777 -3.03876461  0.93671831\n 9:  1.7591313 -2.28897495 -0.14743319\n10:  0.1173668  0.05830349  0.11043199\ndt1[, paste0(names(dt1), \"_abs\") := lapply(.SD, abs)]\ndt1         Alpha        Beta       Gamma Alpha_abs   Beta_abs  Gamma_abs\n         <num>       <num>       <num>     <num>      <num>      <num>\n 1:  0.3769721 -0.85312282  2.17436525 0.3769721 0.85312282 2.17436525\n 2:  0.3015484  0.90925918  1.09818265 0.3015484 0.90925918 1.09818265\n 3: -1.0980232  1.19637296  0.31822032 1.0980232 1.19637296 0.31822032\n 4: -1.1304059 -0.37158390 -0.07314756 1.1304059 0.37158390 0.07314756\n 5: -2.7965343 -0.12326023  0.83426874 2.7965343 0.12326023 0.83426874\n 6:  0.7205735  1.80004312  0.19875064 0.7205735 1.80004312 0.19875064\n 7:  0.9391210  1.70399588  1.29784138 0.9391210 1.70399588 1.29784138\n 8: -0.2293777 -3.03876461  0.93671831 0.2293777 3.03876461 0.93671831\n 9:  1.7591313 -2.28897495 -0.14743319 1.7591313 2.28897495 0.14743319\n10:  0.1173668  0.05830349  0.11043199 0.1173668 0.05830349 0.11043199\ndt2       A     B          C  Group\n   <int> <num>      <num> <char>\n1:     1   1.2 -0.8125047      a\n2:     2   4.3 -0.7437022      b\n3:     3   9.7  1.0953451      b\n4:     4   5.6  2.4353737      a\n5:     5   8.1  0.3881185      a\ncols <- c(\"A\", \"C\")\ndt2[, paste0(cols, \"_groupMean\") := lapply(.SD, mean), .SDcols = cols, by = Group]\ndt2       A     B          C  Group A_groupMean C_groupMean\n   <int> <num>      <num> <char>       <num>       <num>\n1:     1   1.2 -0.8125047      a    3.333333   0.6703292\n2:     2   4.3 -0.7437022      b    2.500000   0.1758215\n3:     3   9.7  1.0953451      b    2.500000   0.1758215\n4:     4   5.6  2.4353737      a    3.333333   0.6703292\n5:     5   8.1  0.3881185      a    3.333333   0.6703292"},{"path":"datatable.html","id":"row-wise-operations","chapter":"21 Efficient data analysis with data.table","heading":"21.14 Row-wise operations","text":"operate row-wise, can use = 1:nrow(dt).\nexample, add column, -place, row-wise sums variables b d:","code":"\ndt <- data.table(a = 1:5, b = 11:15, c = 21:25, d = 31:35, e = 41:45)\ndt       a     b     c     d     e\n   <int> <int> <int> <int> <int>\n1:     1    11    21    31    41\n2:     2    12    22    32    42\n3:     3    13    23    33    43\n4:     4    14    24    34    44\n5:     5    15    25    35    45\ndt[, bcd.sum := sum(.SD[, b:d]), by = 1:nrow(dt)]\ndt       a     b     c     d     e bcd.sum\n   <int> <int> <int> <int> <int>   <int>\n1:     1    11    21    31    41      63\n2:     2    12    22    32    42      66\n3:     3    13    23    33    43      69\n4:     4    14    24    34    44      72\n5:     5    15    25    35    45      75"},{"path":"datatable.html","id":"wide-long","chapter":"21 Efficient data analysis with data.table","heading":"21.15 Wide <=> Long","text":"","code":""},{"path":"datatable.html","id":"melt-wide-to-long","chapter":"21 Efficient data analysis with data.table","heading":"21.15.1 melt(): Wide to long","text":"","code":"\ndt_wide <- data.table(ID = 1:4, Timepoint_A = 11:14,\n                      Timepoint_B = 21:24, Timepoint_C = 51:54)\ndt_wide      ID Timepoint_A Timepoint_B Timepoint_C\n   <int>       <int>       <int>       <int>\n1:     1          11          21          51\n2:     2          12          22          52\n3:     3          13          23          53\n4:     4          14          24          54\ndt_long <- melt(dt_wide, id.vars = \"ID\",\n                measure.vars = 2:4, # defaults to all non-id columns\n                variable.name = \"Timepoint\",\n                value.name = c(\"Score\"))\ndt_long       ID   Timepoint Score\n    <int>      <fctr> <int>\n 1:     1 Timepoint_A    11\n 2:     2 Timepoint_A    12\n 3:     3 Timepoint_A    13\n 4:     4 Timepoint_A    14\n 5:     1 Timepoint_B    21\n 6:     2 Timepoint_B    22\n 7:     3 Timepoint_B    23\n 8:     4 Timepoint_B    24\n 9:     1 Timepoint_C    51\n10:     2 Timepoint_C    52\n11:     3 Timepoint_C    53\n12:     4 Timepoint_C    54"},{"path":"datatable.html","id":"dcast-long-to-wide","chapter":"21 Efficient data analysis with data.table","heading":"21.15.2 dcast(): Long to wide","text":"","code":"\ndt_long       ID   Timepoint Score\n    <int>      <fctr> <int>\n 1:     1 Timepoint_A    11\n 2:     2 Timepoint_A    12\n 3:     3 Timepoint_A    13\n 4:     4 Timepoint_A    14\n 5:     1 Timepoint_B    21\n 6:     2 Timepoint_B    22\n 7:     3 Timepoint_B    23\n 8:     4 Timepoint_B    24\n 9:     1 Timepoint_C    51\n10:     2 Timepoint_C    52\n11:     3 Timepoint_C    53\n12:     4 Timepoint_C    54\ndcast(dt_long, ID ~ Timepoint,\n      value.var = \"Score\")Key: <ID>\n      ID Timepoint_A Timepoint_B Timepoint_C\n   <int>       <int>       <int>       <int>\n1:     1          11          21          51\n2:     2          12          22          52\n3:     3          13          23          53\n4:     4          14          24          54"},{"path":"datatable.html","id":"table-joins","chapter":"21 Efficient data analysis with data.table","heading":"21.16 Table Joins","text":"data.table allow perform table joins base merge() function using syntax data.frame objects “data.table way” using bracket notation:command use key argument set PID key. can performed data.table created using setkey() command:Multiple keys can set, order, setkey() command, separated commas, e.g.:Keys sort data.table corresponding columns can used perform left right joins bracket notation seen later.","code":"\na <- data.table(PID = c(1:9),\n                Hospital = c(\"UCSF\", \"HUP\", \"Stanford\", \n                             \"Stanford\", \"UCSF\", \"HUP\", \n                             \"HUP\", \"Stanford\", \"UCSF\"),\n                Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),\n                Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0),\n                key = \"PID\")\naKey: <PID>\n     PID Hospital   Age   Sex\n   <int>   <char> <num> <num>\n1:     1     UCSF    22     1\n2:     2      HUP    34     1\n3:     3 Stanford    41     0\n4:     4 Stanford    19     1\n5:     5     UCSF    53     0\n6:     6      HUP    21     0\n7:     7      HUP    63     1\n8:     8 Stanford    22     0\n9:     9     UCSF    19     0\nb <- data.table(PID = c(6:12),\n                V1 = c(153, 89, 112, 228,  91, 190, 101),\n                Department = c(\"Neurology\", \"Radiology\", \"Emergency\",\n                               \"Cardiology\", \"Surgery\", \"Neurology\",\n                               \"Psychiatry\"),\n                key = \"PID\")\nbKey: <PID>\n     PID    V1 Department\n   <int> <num>     <char>\n1:     6   153  Neurology\n2:     7    89  Radiology\n3:     8   112  Emergency\n4:     9   228 Cardiology\n5:    10    91    Surgery\n6:    11   190  Neurology\n7:    12   101 Psychiatry\nsetkey(a, PID)\nsetkey(a, PID, Hospital)"},{"path":"datatable.html","id":"inner","chapter":"21 Efficient data analysis with data.table","heading":"21.16.1 Inner","text":"","code":"\nmerge(a, b)Key: <PID>\n     PID Hospital   Age   Sex    V1 Department\n   <int>   <char> <num> <num> <num>     <char>\n1:     6      HUP    21     0   153  Neurology\n2:     7      HUP    63     1    89  Radiology\n3:     8 Stanford    22     0   112  Emergency\n4:     9     UCSF    19     0   228 Cardiology"},{"path":"datatable.html","id":"outer","chapter":"21 Efficient data analysis with data.table","heading":"21.16.2 Outer","text":"","code":"\nmerge(a, b, all = TRUE)Key: <PID>\n      PID Hospital   Age   Sex    V1 Department\n    <int>   <char> <num> <num> <num>     <char>\n 1:     1     UCSF    22     1    NA       <NA>\n 2:     2      HUP    34     1    NA       <NA>\n 3:     3 Stanford    41     0    NA       <NA>\n 4:     4 Stanford    19     1    NA       <NA>\n 5:     5     UCSF    53     0    NA       <NA>\n 6:     6      HUP    21     0   153  Neurology\n 7:     7      HUP    63     1    89  Radiology\n 8:     8 Stanford    22     0   112  Emergency\n 9:     9     UCSF    19     0   228 Cardiology\n10:    10     <NA>    NA    NA    91    Surgery\n11:    11     <NA>    NA    NA   190  Neurology\n12:    12     <NA>    NA    NA   101 Psychiatry"},{"path":"datatable.html","id":"left-outer","chapter":"21 Efficient data analysis with data.table","heading":"21.16.3 Left outer","text":"Using merge():Using bracket notation:keys set b, specify column match using argument:\neasy way understand bracket notation merges think data.table inside bracket used index data.table outside, therefore resulting table rows dictated inside table’s key.\n","code":"\nmerge(a, b, all.x = TRUE)Key: <PID>\n     PID Hospital   Age   Sex    V1 Department\n   <int>   <char> <num> <num> <num>     <char>\n1:     1     UCSF    22     1    NA       <NA>\n2:     2      HUP    34     1    NA       <NA>\n3:     3 Stanford    41     0    NA       <NA>\n4:     4 Stanford    19     1    NA       <NA>\n5:     5     UCSF    53     0    NA       <NA>\n6:     6      HUP    21     0   153  Neurology\n7:     7      HUP    63     1    89  Radiology\n8:     8 Stanford    22     0   112  Emergency\n9:     9     UCSF    19     0   228 Cardiology\nb[a, ]Key: <PID>\n     PID    V1 Department Hospital   Age   Sex\n   <int> <num>     <char>   <char> <num> <num>\n1:     1    NA       <NA>     UCSF    22     1\n2:     2    NA       <NA>      HUP    34     1\n3:     3    NA       <NA> Stanford    41     0\n4:     4    NA       <NA> Stanford    19     1\n5:     5    NA       <NA>     UCSF    53     0\n6:     6   153  Neurology      HUP    21     0\n7:     7    89  Radiology      HUP    63     1\n8:     8   112  Emergency Stanford    22     0\n9:     9   228 Cardiology     UCSF    19     0\nb[a, on = \"PID\"]Key: <PID>\n     PID    V1 Department Hospital   Age   Sex\n   <int> <num>     <char>   <char> <num> <num>\n1:     1    NA       <NA>     UCSF    22     1\n2:     2    NA       <NA>      HUP    34     1\n3:     3    NA       <NA> Stanford    41     0\n4:     4    NA       <NA> Stanford    19     1\n5:     5    NA       <NA>     UCSF    53     0\n6:     6   153  Neurology      HUP    21     0\n7:     7    89  Radiology      HUP    63     1\n8:     8   112  Emergency Stanford    22     0\n9:     9   228 Cardiology     UCSF    19     0"},{"path":"datatable.html","id":"right-outer","chapter":"21 Efficient data analysis with data.table","heading":"21.16.4 Right outer","text":"Using bracket notation:","code":"\nmerge(a, b, all.y = TRUE)Key: <PID>\n     PID Hospital   Age   Sex    V1 Department\n   <int>   <char> <num> <num> <num>     <char>\n1:     6      HUP    21     0   153  Neurology\n2:     7      HUP    63     1    89  Radiology\n3:     8 Stanford    22     0   112  Emergency\n4:     9     UCSF    19     0   228 Cardiology\n5:    10     <NA>    NA    NA    91    Surgery\n6:    11     <NA>    NA    NA   190  Neurology\n7:    12     <NA>    NA    NA   101 Psychiatry\na[b, ]Key: <PID>\n     PID Hospital   Age   Sex    V1 Department\n   <int>   <char> <num> <num> <num>     <char>\n1:     6      HUP    21     0   153  Neurology\n2:     7      HUP    63     1    89  Radiology\n3:     8 Stanford    22     0   112  Emergency\n4:     9     UCSF    19     0   228 Cardiology\n5:    10     <NA>    NA    NA    91    Surgery\n6:    11     <NA>    NA    NA   190  Neurology\n7:    12     <NA>    NA    NA   101 Psychiatry"},{"path":"basegraphics.html","id":"basegraphics","chapter":"22 Base Graphics","heading":"22 Base Graphics","text":"R powerful graphical capabilities built core language. chapter introduction known base graphics provided graphics built-package. defaults produce minimalist plots, can customized extensively. chapter shall begin default plots demonstrate common/useful ways customize .R documentation commands provides extensive coverage graphical parameters. ?par gives main documentation file long list graphical parameters. can set either par() command using plotting command.Let’s create synthetic data:","code":"\nset.seed(2020)\nx <- rnorm(300)\ny_true <- 12 + x^3\ny <- 12 + x^3 + 2.5 * rnorm(300)*1.5"},{"path":"basegraphics.html","id":"scatter-plot","chapter":"22 Base Graphics","heading":"22.1 Scatter plot","text":"Input: 2 numeric vectorsA 2D scatterplot displays two numeric vectors X Y coordinates.","code":"\nplot(x, y)"},{"path":"basegraphics.html","id":"col-point-color","chapter":"22 Base Graphics","heading":"22.1.1 col: point color","text":"See Colors R learn different ways define colors R.common ways include:name using one 657 names given colors(), e.g. “red,” “magenta,” “blue,” “navy,” “cyan”RGB code","code":"\nplot(x, y, col = \"slateblue\")"},{"path":"basegraphics.html","id":"bty-box-type","chapter":"22 Base Graphics","heading":"22.1.2 bty: box type","text":"7 bty options: “o” “l,” “7,” “c,” “u,” “]” “none.”\nproduce box resembles corresponding symbol.\n“none” draws box allows axes show:","code":"\nplot(x, y, bty = \"l\")\nplot(x, y, bty = \"none\")"},{"path":"basegraphics.html","id":"pch-point-character","chapter":"22 Base Graphics","heading":"22.1.3 pch: point character","text":"default point character circle seen . helps visualize overlapping points (especially devices support transparency).25 point characters, designated integers 1 25.’s preview 25 pch options.\npch types 21 25 can filled color specified bg.Let’s use solid disc:tell many points overlapping middle therefore ’s good idea make points little transparent.different ways add transparency (see Colors). easiest way probably use adjustcolor(). context colors, alpha refers transparency: = 1 opaque = 0 completely transparent (therefore use value greater 0).","code":"\nplot(1:25, rep(1, 25), pch = 1:25, bg = \"blue\")\nplot(x, y, bty = \"n\", pch = 16)\nplot(x, y,\n     bty = \"n\", pch = 16,\n     col = adjustcolor(\"slateblue\", alpha.f = .5))"},{"path":"basegraphics.html","id":"grid","chapter":"22 Base Graphics","heading":"22.1.4 grid","text":"can add grid behind plot area using panel.first argument, accepts graphical expression (function draws something), evaluated plotting points graph (therefore appears behind points).","code":"\nplot(x, y,\n     bty = \"n\", pch = 16,\n     col = adjustcolor(\"slateblue\", alpha.f = .5),\n     panel.first = grid(lty = 1, col = 'gray90'))"},{"path":"basegraphics.html","id":"main-xlab-ylab-title-and-axes-labels","chapter":"22 Base Graphics","heading":"22.1.5 main, xlab, ylab: Title and axes labels","text":"Note depending intend display plot, may leave title blank instead place figure caption along explanation data (e.g. journal article)","code":"\nplot(x, y,\n     bty = \"n\", pch = 16,\n     col = adjustcolor(\"slateblue\", alpha.f = .5),\n     panel.first = grid(lty = 1, col = 'gray90'),\n     main = \"y vs. x\",\n     xlab = \"Variable x (xunits)\",\n     ylab = \"Variable y (yunits)\")"},{"path":"basegraphics.html","id":"histogram","chapter":"22 Base Graphics","heading":"22.2 Histogram","text":"Input: numeric vectorA histogram displays approximation distribution numeric vector. First data binned number elements falls bin counted. histogram plot draws bars bin whose heights corresponds count elements corresponding interval.","code":"\nhist(x)"},{"path":"basegraphics.html","id":"col-bar-color","chapter":"22 Base Graphics","heading":"22.2.1 col: bar color","text":"","code":"\nhist(x, col = \"slategrey\")"},{"path":"basegraphics.html","id":"border-border-color","chapter":"22 Base Graphics","heading":"22.2.2 border: border color","text":"Setting border color background gives clean look:","code":"\nhist(x, col = \"slategrey\", border = \"white\")"},{"path":"basegraphics.html","id":"breaks-number-or-value-of-breakpoints","chapter":"22 Base Graphics","heading":"22.2.3 breaks: number or value of breakpoints","text":"breaks argument can used define breakpoints use binning values input hist(). See documentation ?hist full range options. easy way control number bins pass integer breaks argument. Depending length x distribution, may may possible use exact number requested, closest possible number automatically chosen.","code":"\nhist(x, col = \"slategrey\", border = \"white\",\n     breaks = 8)"},{"path":"basegraphics.html","id":"density-plot","chapter":"22 Base Graphics","heading":"22.3 Density plot","text":"Input: numeric vectorA density plot different way display approximation distribution numeric vector. density() function estimates density x can passed plot() directly:can use main = NA main = \"\" suppress printing title.","code":"\nplot(density(x))\nplot(density(x), col = \"blue\",\n     bty = \"n\",\n     main = NA)"},{"path":"basegraphics.html","id":"barplot","chapter":"22 Base Graphics","heading":"22.4 Barplot","text":"Input: vector matrixLet’s look VADeaths built-dataset describes death rater per 1000 population per year broken age range population group.","code":""},{"path":"basegraphics.html","id":"single-vector","chapter":"22 Base Graphics","heading":"22.4.1 Single vector","text":"can plot single column row. Note R automatically gets corresponding dimension names:","code":"\nbarplot(VADeaths[, 1])\nbarplot(VADeaths[1, ])"},{"path":"basegraphics.html","id":"col-and-border-bar-fill-and-border-color","chapter":"22 Base Graphics","heading":"22.4.1.1 col and border: bar fill and border color","text":"plotting functions, color controlled col argument. border can set color separately, NA omit, gives clean look:","code":"\nbarplot(VADeaths[, 1],\n        col = \"aquamarine3\", border = NA)"},{"path":"basegraphics.html","id":"matrix","chapter":"22 Base Graphics","heading":"22.4.2 Matrix","text":"can draw barplots multiple columns time passing matrix input. grouping x-axis based columns. default, data different rows stacked. argument legend.text can used add legend row labels:Alternatively, can draw groups bars beside argument beside = TRUE:use custom colors, pass vector length equal number bars within group. get recycled across groups, giving consistent color coding.\n, use adjustcolor() function produce 5 shades navy.","code":"\nbarplot(VADeaths, legend.text = TRUE)\nbarplot(VADeaths, beside = TRUE,\n        legend.text = TRUE, args.legend = list(x = \"topright\"))\ncol <- sapply(seq(.2, .8, length.out = 5), function(i) adjustcolor(\"navy\", i))\nbarplot(VADeaths,\n        col = col,\n        border = NA,\n        beside = TRUE,\n        legend.text = TRUE, args.legend = list(x = \"topright\"))"},{"path":"basegraphics.html","id":"formula-interface","chapter":"22 Base Graphics","heading":"22.4.3 Formula interface","text":"","code":""},{"path":"basegraphics.html","id":"boxplot","chapter":"22 Base Graphics","heading":"22.5 Boxplot","text":"Input: One vectors lengthA boxplot another way visualize distribution one vectors. vector need length. example plotting lab results patient control group, contain number individuals.two ways use boxplot() function. Either pass two separate vectors data (whet)boxplot() makes easy plot data different objects. can accept:individual vectorscolumns matrix, columns/elements data.frame, elements listformula interface form variable ~ factor","code":""},{"path":"basegraphics.html","id":"single-vector-1","chapter":"22 Base Graphics","heading":"22.5.1 Single vector","text":"","code":"\na <- rnorm(500, mean = 12, sd = 2)\nboxplot(a)"},{"path":"basegraphics.html","id":"anatomy-of-a-boxplot","chapter":"22 Base Graphics","heading":"22.5.2 Anatomy of a boxplot","text":"boxplot shows:medianfirst third quartilesoutliers (defined x < Q1 - 1.5 * IQR | x > Q3 + 1.5 * IQR)range excluding outliers\nFigure 22.1: Boxplot anatomy\nsynthetic data:","code":"\nalpha <- rnorm(10)\nbeta <- rnorm(100)\ngamma <- rnorm(200, 1, 2)\ndl <- list(alpha = alpha, beta = beta, gamma = gamma)"},{"path":"basegraphics.html","id":"multiple-vectors","chapter":"22 Base Graphics","heading":"22.5.3 Multiple vectors","text":"","code":"\nboxplot(alpha, beta, gamma)"},{"path":"basegraphics.html","id":"list","chapter":"22 Base Graphics","heading":"22.5.4 List","text":"","code":"\nboxplot(dl)"},{"path":"basegraphics.html","id":"matrix-1","chapter":"22 Base Graphics","heading":"22.5.5 Matrix","text":"Passing matrix boxplot() draws one boxplot per column:","code":"\nmat <- sapply(seq(5), function(i) rnorm(20))\nboxplot(mat)"},{"path":"basegraphics.html","id":"formula-interface-1","chapter":"22 Base Graphics","heading":"22.5.6 Formula interface","text":"formula interface can used group vector factor length.Let’s use built-sleep dataset shows effect two different drugs increasing hours sleep compared control group.col border arguments work expected. define two custom colors using hexadecimal RGB code use solid version border 50% transparent version fill. Note need two separate colors produce unambiguous plot since clearly labeled y-axis. often considered desirable/preferred use minimum number different colors necessary. (Color coding like following useful example data two groups used different plot, like scatterplot, multi-panel figure).","code":"\nboxplot(extra ~ group, sleep)\nborder <- c(\"#18A3AC\", \"#F48024\")\ncol <- c(adjustcolor(\"#18A3AC\", .5), adjustcolor(\"#F48024\", .5))\nboxplot(extra ~ group, sleep,\n        col = col, border = border)"},{"path":"basegraphics.html","id":"names-group-labels","chapter":"22 Base Graphics","heading":"22.5.7 names: group labels","text":"x-axis group names can defined names argument:","code":"\nboxplot(extra ~ group, sleep,\n        col = col, border = border,\n        names = c(\"Drug A\", \"Drug B\"))"},{"path":"basegraphics.html","id":"heatmap","chapter":"22 Base Graphics","heading":"22.6 Heatmap","text":"Input: matrixA heatmap 2D matrix-like plot x- y-axis labels value cell. can used display many different types data. common usage data science plot correlation matrix set numerical features. many cases, rows /columns heatmap can reordered based hierarchical clustering.default, heatmap() function draws marginal dendrograms rearranges rows columns. can prevent setting Rowv Colv NA:allow clustering row column reordering, use defaults:","code":"\nx <- sapply(1:20, function(i) rnorm(20))\nx_cor <- cor(x)\nheatmap(x_cor, Rowv = NA, Colv = NA)\nheatmap(x_cor)"},{"path":"basegraphics.html","id":"graphical-parameters","chapter":"22 Base Graphics","heading":"22.7 Graphical parameters","text":"par function allows setting querying graphical parameters base graphics system. look documentation (?par).\ngraphical parameters can set call par prior using base plotting function. However, many parameters can also passed using ... construct base plotting function.common base graphical parameters:pch: Point charactercol: Colorcex: Character expansion, .e. relative sizebty: Box typexlab: x-axis labelylab: y-axis labelmain: Main titleAlways make sure plotting characters, axis labels titles legible. must avoid, costs, ever using huge graph tiny letters spread entire slide presentation.cex: Character expansion plotting characterscex.axis: cex axis annotationcex.lab: cex x y labelscex.main: cex main titleNote: can set either call par() prior plotting passed arguments plotting command, like plot().one important distinction: cex set par() (defaults 1), sets baseline cex parameters multiply . However, cex set within plot() still multiplies cex set par(), affects plotting character size.","code":""},{"path":"basegraphics.html","id":"multipanel-plots","chapter":"22 Base Graphics","heading":"22.8 Multipanel plots","text":"different ways create multipanel plots, probably straightforward use either mfrow mfcol argument par().mfrow mfcol accept integer vector length 2 indicating number rows number columns, respectively. mfrow, plots drawn row-wise mfcol drawn column-wise. Remember reset mfrow mfcol back c(1, 1)example, let’s plot 2--3 panel plots, drawn row-wise:","code":"\nset.seed(2020)\nx <- rnorm(500)\ny <- x^3 + rnorm(500) * 2\nz <- x^2 + rnorm(500)\npar(mfrow = c(2, 3))\nhist(x)\nhist(y)\nhist(z)\nplot(x, y)\nplot(x, z)\nplot(y, z)\npar(mfrow = c(1, 1))"},{"path":"graphics3x.html","id":"graphics3x","chapter":"23 3x Graphics","heading":"23 3x Graphics","text":"Visualization central statistics data science. used check data, explore data, communicate results.R powerful graphical capabilities built core language. contains two largely separate graphics systems: ‘base’ graphics graphics package, inherited S language, ‘grid’ graphics grid package: “rewrite graphics layout capabilities.” limited support interaction two. practice, given application, choose one . high level functions grid graphics system built base R distribution, popular packages built top . graphics systems can produce beautiful, layered, high quality graphics. possible build functions using either system produce , , types plots.","code":"\nlibrary(rtemis)  .:rtemis 0.8.1: Welcome, egenn\n  [x86_64-apple-darwin17.0 (64-bit): Defaulting to 4/4 available cores]\n  Documentation & vignettes: https://rtemis.lambdamd.org\nlibrary(ggplot2)\nlibrary(plotly)\nAttaching package: 'plotly'The following object is masked from 'package:ggplot2':\n\n    last_plotThe following object is masked from 'package:stats':\n\n    filterThe following object is masked from 'package:graphics':\n\n    layout\nlibrary(mgcv)Loading required package: nlmeThis is mgcv 1.8-33. For overview type 'help(\"mgcv-package\")'."},{"path":"graphics3x.html","id":"base-graphics","chapter":"23 3x Graphics","heading":"23.1 Base graphics","text":"Common R plotting functions like plot, barplot, boxplot, heatmap, etc. built ontop base graphics (Murrell 2018). default arguments provide minimalist output, can tweaked extensively. advantage base graphics fast relatively easy extend.par function allows setting querying graphical parameters base graphics system. look documentation (?par).\ngraphical parameters can set call par prior using base plotting function. However, many parameters can also passed using ... construct base plotting function.common base graphical parameters:pch: Point charactercol: Colorcex: Character expansion, .e. relative sizebty: Box typexlab: x-axis labelylab: y-axis labelmain: Main titleAlways make sure plotting characters, axis labels titles legible. must avoid, costs, ever using huge graph tiny letters spread whole slide presentation.cex: Character expansion plotting characterscex.axis: cex axis annotationcex.lab: cex x y labelscex.main: cex main titleNote: can set either call pa()r prior plotting passed arguments plotting command, like plot().\nHowever, one important distinction: cex set par() (defaults 1), sets baseline cex parameters multiply . However, cex set within plot() stil multiplies cex set par(), affectts plotting character size.","code":""},{"path":"graphics3x.html","id":"grid-graphics","chapter":"23 3x Graphics","heading":"23.2 Grid graphics","text":"two popular packages built top grid package :latticeggplot2 (Wickham 2011)","code":""},{"path":"graphics3x.html","id":"ggplot2","chapter":"23 3x Graphics","heading":"23.2.1 ggplot2","text":"ggplot2, created Hadley Wickham (Wickham 2011), follows Grammar Graphics approach Leland Wilkinson (Wilkinson 2012) different syntax base functions.\ngeneral idea start defining data add /modify graphical elements stepwise manner, allows one build complex layered visualizations. simplified interface ggplot graphics provided qplot function ggplot2 (avoid use learn use ggplot command fun much flexible useful know)","code":""},{"path":"graphics3x.html","id":"rd-party-apis","chapter":"23 3x Graphics","heading":"23.3 3rd party APIs","text":"also third party libraries R APIs provide even modern graphic capabilities R user:plotly (Sievert et al. 2017)rbokehBoth build interactive plots, can viewed web browser exported bitmap graphics, also follow grammar graphics paradigm, therefore follow similar syntax ggplot2.rtemis package (Gennatas 2017) provides visualization functions built top base graphics (speed extendability) plotly (interactivity):mplot3 static graphics (base)dplot3 interactive graphics (plotly)Let’s go common plot types using base graphics, mplot3, dplot3, ggplot.\nfamiliar basic functionality base graphics ggplot extensively used.","code":""},{"path":"graphics3x.html","id":"scatterplot","chapter":"23 3x Graphics","heading":"23.4 Scatterplot","text":"","code":""},{"path":"graphics3x.html","id":"base-2","chapter":"23 3x Graphics","heading":"23.4.1 base","text":"default base graphics plot rather minimalist:tweaking parameters, get perhaps prettier result:","code":"\nplot(iris$Sepal.Length, iris$Petal.Length)\nplot(iris$Sepal.Length, iris$Petal.Length,\n     pch = 16,\n     col = \"#18A3AC66\",\n     cex = 1.4,\n     bty = \"n\",\n     xlab = \"Sepal Length\", ylab = \"Petal Length\")"},{"path":"graphics3x.html","id":"mplot3","chapter":"23 3x Graphics","heading":"23.4.2 mplot3","text":"dplot3() provides similar functionality mplot3(), built top plotly. Notice can interact plot using mouse:","code":"\nmplot3.xy(iris$Sepal.Length, iris$Petal.Length)"},{"path":"graphics3x.html","id":"dplot3","chapter":"23 3x Graphics","heading":"23.4.3 dplot3","text":"","code":"\ndplot3.xy(iris$Sepal.Length, iris$Petal.Length)"},{"path":"graphics3x.html","id":"ggplot2-1","chapter":"23 3x Graphics","heading":"23.4.4 ggplot2","text":"Note: name package ggplot2, name function ggplot.","code":"\nggplot(iris, aes(Sepal.Length, Petal.Length)) + geom_point()"},{"path":"graphics3x.html","id":"plotly","chapter":"23 3x Graphics","heading":"23.4.5 plotly","text":"","code":"\np <- plot_ly(iris, x = ~Sepal.Length, y = ~Petal.Length) %>% \n  add_trace(type = \"scatter\", mode = \"markers\")\np"},{"path":"graphics3x.html","id":"grouped","chapter":"23 3x Graphics","heading":"23.4.6 Grouped","text":"mplot3() dplot3(), add group argument:ggplot2, specify color within aes.ggplot plots can assigned object. Print object view .plotly define color argument:","code":"\nmplot3.xy(iris$Sepal.Length, iris$Petal.Length,\n          group = iris$Species)\ndplot3.xy(iris$Sepal.Length, iris$Petal.Length,\n          group = iris$Species)\np <- ggplot(iris, aes(Sepal.Length, Petal.Length, color = Species)) +\n  geom_point()\np\np <- plot_ly(iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species) %>% \n  add_trace(type = \"scatter\", mode = \"markers\")\np"},{"path":"graphics3x.html","id":"scatterplot-with-fit","chapter":"23 3x Graphics","heading":"23.5 Scatterplot with fit","text":"","code":""},{"path":"graphics3x.html","id":"mplot3-1","chapter":"23 3x Graphics","heading":"23.5.1 mplot3","text":"mplot3.xy(), define algorithm use fit curve, fit. se.fit allows plotting standard error bar (can provided algorithm fit)Passing group argument, automatically fits separate models:","code":"\nmplot3.xy(iris$Sepal.Length, iris$Petal.Length,\n          fit = \"gam\", se.fit = T)\nmplot3.xy(iris$Sepal.Length, iris$Petal.Length,\n          fit = \"gam\", se.fit = T,\n          group = iris$Species)"},{"path":"graphics3x.html","id":"dplot3-1","chapter":"23 3x Graphics","heading":"23.5.2 dplot3","text":"syntax mplot3.xy() :","code":"\ndplot3.xy(iris$Sepal.Length, iris$Petal.Length,\n          fit = \"gam\", se.fit = T)\ndplot3.xy(iris$Sepal.Length, iris$Petal.Length,\n          fit = \"gam\", se.fit = T,\n          group = iris$Species)"},{"path":"graphics3x.html","id":"ggplot2-2","chapter":"23 3x Graphics","heading":"23.5.3 ggplot2","text":"ggplot(), add geom_smooth:group, , use color:","code":"\nggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) +\n  geom_point() +\n  geom_smooth(method = 'gam')`geom_smooth()` using formula 'y ~ s(x, bs = \"cs\")'\nggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +\n  geom_point() +\n  geom_smooth(method = 'gam')`geom_smooth()` using formula 'y ~ s(x, bs = \"cs\")'"},{"path":"graphics3x.html","id":"plotly-1","chapter":"23 3x Graphics","heading":"23.5.4 plotly","text":"plot_ly(), add_lines():get fit group, add elements one - one way :’s lot work, ’s dplot3() exists.","code":"\nlibrary(mgcv)\nmod.gam <- gam(Petal.Length ~ s(Sepal.Length), data = iris)\nplot_ly(iris, x = ~Sepal.Length) %>%\n  add_trace(y = ~Petal.Length, type = \"scatter\", mode = \"markers\") %>% \n  add_lines(y = mod.gam$fitted.values)\niris.bySpecies <- split(iris, iris$Species)\ngam.fitted <- lapply(iris.bySpecies, function(i) {\n  gam(Petal.Length ~ s(Sepal.Length), data = i)$fitted\n})\nindex <- lapply(iris.bySpecies, function(i) order(i$Sepal.Length))\ncol <- c(\"#44A6AC\", \"#F4A362\", \"#3574A7\")\n.names <- names(iris.bySpecies)\np <- plot_ly()\nfor (i in seq_along(iris.bySpecies)) {\n  p <- add_trace(p, x = ~Sepal.Length, y = ~Petal.Length, \n                 type = \"scatter\", mode = \"markers\",\n                 data = iris.bySpecies[[i]],\n                 name = .names[i],\n                 color = col[i])\n}\nfor (i in seq_along(iris.bySpecies)) {\n  p <- add_lines(p, x = iris.bySpecies[[i]]$Sepal.Length[index[[i]]],\n                 y = gam.fitted[[i]][index[[i]]], \n                 # type = \"scatter\", mode = \"markers\",\n                 data = iris.bySpecies[[i]],\n                 name = paste(.names[i], \"GAM fit\"),\n                 color = col[i])\n}\np"},{"path":"graphics3x.html","id":"density-plot-1","chapter":"23 3x Graphics","heading":"23.6 Density plot","text":"builtin density plot, can get x y coordinates density function add polygon:","code":""},{"path":"graphics3x.html","id":"base-3","chapter":"23 3x Graphics","heading":"23.6.1 base","text":"","code":"\n.density <- density(iris$Sepal.Length)\nclass(.density)[1] \"density\"\nplot(.density$x, .density$y,\n     type = \"l\", yaxs = \"i\")\nplot(.density$x, .density$y,\n     type = 'l', yaxs = \"i\",\n     bty = \"n\",\n     xlab = \"\",  ylab = \"Density\",\n     col = \"#18A3AC66\",\n     main = \"Sepal Length Density\")\npolygon(c(.density$x, rev(.density$x)), c(.density$y, rep(0, length(.density$y))),\n        col = \"#18A3AC66\", border = NA)"},{"path":"graphics3x.html","id":"mplot3-2","chapter":"23 3x Graphics","heading":"23.6.2 mplot3","text":"","code":"\nmplot3.x(iris$Sepal.Length, 'density')"},{"path":"graphics3x.html","id":"dplot3-2","chapter":"23 3x Graphics","heading":"23.6.3 dplot3","text":"","code":"\ndplot3.x(iris$Sepal.Length)"},{"path":"graphics3x.html","id":"ggplot2-3","chapter":"23 3x Graphics","heading":"23.6.4 ggplot2","text":"Add color:","code":"\nggplot(iris, aes(x = Sepal.Length)) + geom_density()\nggplot(iris, aes(x = Sepal.Length)) + geom_density(color = \"#18A3AC66\", fill = \"#18A3AC66\")"},{"path":"graphics3x.html","id":"grouped-1","chapter":"23 3x Graphics","heading":"23.6.4.1 Grouped","text":"","code":"\nmplot3.x(iris$Sepal.Length, group = iris$Species)\ndplot3.x(iris$Sepal.Length, group = iris$Species)\n(ggplot(iris, aes(Sepal.Length, color = Species, fill = Species)) + \n  geom_density(alpha = .5) +\n  scale_color_manual(values = c(\"#44A6AC\", \"#F4A362\", \"#3574A7\")) +\n  scale_fill_manual(values = c(\"#44A6AC\", \"#F4A362\", \"#3574A7\")) +\n  labs(x = \"Sepal Length\", y = \"Density\"))"},{"path":"graphics3x.html","id":"histogram-1","chapter":"23 3x Graphics","heading":"23.7 Histogram","text":"","code":"\nset.seed(2020)\na <- rnorm(500)"},{"path":"graphics3x.html","id":"base-4","chapter":"23 3x Graphics","heading":"23.7.1 base","text":"","code":"\nhist(a)\nhist(a, col = \"#18A3AC66\")\nhist(a, col = \"#18A3AC99\", border = \"white\", main = \"\", breaks = 30)"},{"path":"graphics3x.html","id":"mplot3-3","chapter":"23 3x Graphics","heading":"23.7.2 mplot3","text":"","code":"\nmplot3.x(a, \"histogram\")\nmplot3.x(a, \"histogram\", hist.breaks = 30)"},{"path":"graphics3x.html","id":"dplot3-3","chapter":"23 3x Graphics","heading":"23.7.3 dplot3","text":"","code":"\ndplot3.x(a, \"hist\")\ndplot3.x(a, \"hist\", hist.n.bins = 40)"},{"path":"graphics3x.html","id":"ggplot2-4","chapter":"23 3x Graphics","heading":"23.7.4 ggplot2","text":"","code":"\n(p <- ggplot(mapping = aes(a)) + geom_histogram())`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n(p <- ggplot(mapping = aes(a)) + geom_histogram(binwidth = .2))\n(p <- ggplot(mapping = aes(a)) +\n    geom_histogram(binwidth = .2, fill = \"#18A3AC99\"))"},{"path":"graphics3x.html","id":"grouped-2","chapter":"23 3x Graphics","heading":"23.7.4.1 Grouped","text":"","code":"\nmplot3.x(iris$Petal.Length, 'h', group = iris$Species, hist.breaks = 10)\ndplot3.x(iris$Sepal.Length, 'h', group = iris$Species)\nggplot(iris, aes(x = Sepal.Length, fill = Species)) + \n  geom_histogram(binwidth = .1)"},{"path":"graphics3x.html","id":"barplot-1","chapter":"23 3x Graphics","heading":"23.7.5 Barplot","text":"","code":"\nschools <- data.frame(UCSF = 4, Stanford = 7, Penn = 12)"},{"path":"graphics3x.html","id":"base-5","chapter":"23 3x Graphics","heading":"23.7.6 base","text":"","code":"\nbarplot(as.matrix(schools))\nbarplot(as.matrix(schools), col = \"dodgerblue3\")"},{"path":"graphics3x.html","id":"mplot3-4","chapter":"23 3x Graphics","heading":"23.7.7 mplot3","text":"","code":"\nmplot3.bar(schools)"},{"path":"graphics3x.html","id":"dplot3-4","chapter":"23 3x Graphics","heading":"23.7.8 dplot3","text":"","code":"\ndplot3.bar(schools)"},{"path":"graphics3x.html","id":"ggplot2-5","chapter":"23 3x Graphics","heading":"23.7.9 ggplot2","text":"ggplot requires explicit column data define categorical x-axis:","code":"\nschools.df <- data.frame(University = colnames(schools),\n                         N_schools = as.numeric(schools[1, ]))\nggplot(schools.df, aes(University, N_schools)) +\n  geom_bar(stat = \"identity\", color = \"#18A3AC\", fill = \"#18A3AC\")"},{"path":"graphics3x.html","id":"box-plot","chapter":"23 3x Graphics","heading":"23.8 Box plot","text":"","code":"\nx <- rnormmat(200, 4, return.df = TRUE, seed = 2019)\ncolnames(x) <- c(\"mango\", \"banana\", \"tangerine\", \"sugar\")"},{"path":"graphics3x.html","id":"base-6","chapter":"23 3x Graphics","heading":"23.8.1 base","text":"","code":"\nboxplot(x)\nboxplot(x, col = \"steelblue4\")"},{"path":"graphics3x.html","id":"mplot3-5","chapter":"23 3x Graphics","heading":"23.8.2 mplot3","text":"","code":"\nmplot3.box(x)"},{"path":"graphics3x.html","id":"dplot3-5","chapter":"23 3x Graphics","heading":"23.8.3 dplot3","text":"","code":"\ndplot3.box(x)"},{"path":"graphics3x.html","id":"ggplot2-6","chapter":"23 3x Graphics","heading":"23.8.4 ggplot2","text":", ggplot requires explicit categorical x-axis, case means conversion wide long dataset:Add color:","code":"\nlibrary(tidyr)\n(x.long <- pivot_longer(x, 1:4, names_to = \"Fruit\", values_to = \"Feature\"))# A tibble: 800 x 2\n   Fruit     Feature\n   <chr>       <dbl>\n 1 mango      0.739 \n 2 banana     0.721 \n 3 tangerine -1.26  \n 4 sugar     -0.0187\n 5 mango     -0.515 \n 6 banana    -0.395 \n 7 tangerine  0.258 \n 8 sugar     -0.0301\n 9 mango     -1.64  \n10 banana     0.983 \n# … with 790 more rows\n\n(p <- ggplot(x.long, aes(Fruit, Feature)) + geom_boxplot())\n(p <- ggplot(x.long, aes(Fruit, Feature)) +\n   geom_boxplot(fill = c(\"#44A6AC66\", \"#F4A36266\", \"#3574A766\", \"#C23A7066\"),\n                colour = c(\"#44A6ACFF\", \"#F4A362FF\", \"#3574A7FF\", \"#C23A70FF\")))"},{"path":"graphics3x.html","id":"heatmap-1","chapter":"23 3x Graphics","heading":"23.9 Heatmap","text":"Let’s create synthetic correlation data:","code":"\nx <- rnormmat(20, 20, seed = 2020)\nx.cor <- cor(x)"},{"path":"graphics3x.html","id":"base-7","chapter":"23 3x Graphics","heading":"23.9.1 base","text":"R great builtin heatmap function, supports hierarchical clustering plots dendrogram margins default:may little surprising clustering default. disable row column dendrograms, set Rowv Colv NA:","code":"\nheatmap(x.cor)\nheatmap(x.cor, Rowv = NA, Colv = NA)"},{"path":"graphics3x.html","id":"mplot3-6","chapter":"23 3x Graphics","heading":"23.9.2 mplot3","text":"mplot3 adds colorbar side heatmap. Notice 10 circles 10 circles zero represent 10% increments.","code":"\nmplot3.heatmap(x.cor)"},{"path":"graphics3x.html","id":"dplot3-6","chapter":"23 3x Graphics","heading":"23.9.3 dplot3","text":"","code":"\ndplot3.heatmap(x.cor)"},{"path":"graphics3x.html","id":"ggplot2-7","chapter":"23 3x Graphics","heading":"23.9.4 ggplot2","text":"ggplot builtin heatmap function per se, can use geom_tile build one. also needs data frame input long form :","code":"\nx.cor.dat <- as.data.frame(x.cor)\ncolnames(x.cor.dat) <- rownames(x.cor.dat) <- paste0(\"V\", seq(20))\ncolnames(x.cor) <- rownames(x.cor) <- paste0(\"V\", seq(20))\nx.cor.long <- data.frame(NodeA = rownames(x.cor)[row(x.cor)],\n                         NodeB = colnames(x.cor)[col(x.cor)],\n                         Weight = c(x.cor))\n(p <- ggplot(x.cor.long, aes(NodeA, NodeB, fill = Weight)) +\n    geom_tile() + coord_equal())"},{"path":"graphics3x.html","id":"saving-plots-to-file","chapter":"23 3x Graphics","heading":"23.10 Saving plots to file","text":"","code":""},{"path":"graphics3x.html","id":"base-8","chapter":"23 3x Graphics","heading":"23.10.1 base","text":"can save base graphics disk using number different file formats. , :Open graphic device - e.g. pdf(\"path//xy_scatter.pdf\")Write - e.g. plot(x, y)Close graphic device - dev.()following commands used open graphical devices save file corresponding type:bmp(filename = \"path//file\", width = [pixels], height = [pixels])jpeg(filename = \"path//file\", width = [pixels], height = [pixels])png(filename = \"path//file\", width = [pixels], height = [pixels])tiff(filename = \"path//file\", width = [pixels], height = [pixels])svg(filename = \"path//file\", width = [INCHES], height = [INCHES]pdf(file = \"path//file\", width = [INCHES], height = [INCHES])Notice writing vector graphics format (svg pdf), defined width height inches, pixels. Also, specify file instead filename \nNotice difference writing PDF: define file instead filename, width height INCHES, pixels.\nrecommended save plots PDF format handles vector graphics therefore plots scale, easy export graphics formats later needed.","code":"\npdf(\"~/Desktop/plot.pdf\", width = 5, height = 5)\nplot(iris$Sepal.Length, iris$Petal.Length,\n     pch = 16,\n     col = \"#18A3AC66\",\n     cex = 1.8,\n     bty = \"n\", # also try \"l\"\n     xlab = \"Sepal Length\", ylab = \"Petal Length\")\ndev.off()"},{"path":"colors.html","id":"colors","chapter":"24 Colors in R","heading":"24 Colors in R","text":"Colors R can defined many different ways:Using names: colors() gives available optionsUsing hexadecimal RGB code form #RRGGBBAA, e.g. #FF0000FF opaque redUsing rgb(red, green, blue, alpha) function (outputs hex number)Using hsv(h, s, v, alpha) function HSV color system (also outputs hex number)Using integers: index output palette(), whose defaults can changed user (e.g. palette(\"cyan\", \"blue\", \"magenta\", \"red\"))","code":"\nlibrary(rtemis)  .:rtemis 0.8.1: Welcome, egenn\n  [x86_64-apple-darwin17.0 (64-bit): Defaulting to 4/4 available cores]\n  Documentation & vignettes: https://rtemis.lambdamd.org"},{"path":"colors.html","id":"color-names","chapter":"24 Colors in R","heading":"24.1 Color names","text":"long list color names R understands, can listed using colors().\ncan passed directly characters.\nShades gray provided gray0/grey0 (white) gray100/grey100 (black).\nAbsurdly wide PDFs built-R colors, excluding grays/greys, available sorted alphabeticaly sorted increasing Red decreasing Green Blue values","code":""},{"path":"colors.html","id":"hexadecimal-codes","chapter":"24 Colors in R","heading":"24.2 Hexadecimal codes","text":"Hexadecimal color codes characters starting pound sign, followed 4 pairs hex codes representing Red, Green, Blue, Alpha values. Since RGB values go 0 255, hex goes 00 FF. can convert decimal hex using .hexmode:last two values alpha setting optional: included, defaults max (opaque)","code":"\nas.hexmode(0)[1] \"0\"\nas.hexmode(127)[1] \"7f\"\nas.hexmode(255)[1] \"ff\""},{"path":"colors.html","id":"rgb","chapter":"24 Colors in R","heading":"24.3 RGB","text":"Note default maxColorValue = 1, set 255 use usual RGB range 0 255:","code":"\nrgb(0, 0, 1)[1] \"#0000FF\"\nrgb(0, 0, 255, maxColorValue = 255)[1] \"#0000FF\""},{"path":"colors.html","id":"hsv","chapter":"24 Colors in R","heading":"24.4 HSV","text":"Color can also parameterized using hue, saturation, value system (HSV). range 0 1.\nSimplistically: Hue controls color. Saturation 1 max color 0 white. Value 1 max color 0 black.following plot, values around polar plot represent hue. Moving inwards center, saturation changes 1 0.","code":"\nhsv(1, 1, 1)[1] \"#FF0000\"\nmplot.hsv()\nmplot.hsv(v = .5)"},{"path":"profiling.html","id":"profiling","chapter":"25 Timing & Profiling","heading":"25 Timing & Profiling","text":"Profiling code involves timing execution different steps program. usually performed order identify bottlenecks slow execution code helps prioritize parts optimize. ","code":""},{"path":"profiling.html","id":"time-the-execution-of-an-expression-with-system.time","chapter":"25 Timing & Profiling","heading":"25.1 Time the execution of an expression with system.time","text":"want time long takes R expression complete, can use base command system.time.\n“elapsed” time real time seconds. “user” “system” time used CPU different types tasks (see ?proc.time)can use replicate() get measure time multiple executions average :","code":"\nx <- rnorm(9999)\nsystem.time({\n    y <- vector(\"numeric\", 9999)\n    for (i in 1:9999) y[i] <- x[i]^3\n})   user  system elapsed \n  0.009   0.000   0.014 \nsystem.time(x^3)   user  system elapsed \n  0.001   0.000   0.001 \nlibrary(mgcv)Loading required package: nlmeThis is mgcv 1.8-33. For overview type 'help(\"mgcv-package\")'.\nlibrary(glmnet)Loading required package: MatrixLoaded glmnet 4.0-2\nset.seed(2020)\nx <- replicate(100, rnorm(5000))\ny <- x[, 1]^2 + x[, 5]^3 + 12 + rnorm(5000)\ndat <- data.frame(x, y)\nfit.glm <- function(dat) mod <- glm(y ~ x, family = gaussian, data = dat)\nfit.gam <- function(dat) mod <- gam(y ~ x, family = gaussian, data = dat)\n    \nsystem.time(replicate(1000, fit.glm))   user  system elapsed \n  0.003   0.000   0.005 \nsystem.time(replicate(1000, fit.gam))   user  system elapsed \n  0.002   0.000   0.002 "},{"path":"profiling.html","id":"compare-execution-times-of-different-expressions-with-microbenchmark","chapter":"25 Timing & Profiling","heading":"25.2 Compare execution times of different expressions with microbenchmark()","text":"microbenchmark() allows time execution multiple expressions sub-millisecond accuracy. execute command number times defined times argument (default = 100), output statistics execution time per expression nanoseconds. Using plot() output produces boxplot comparing time distributions.start, compare two simple fast operations, using base dplyr add two columns 1000 integers:can print microbenchmark’s output:plot :Now let’s use nycflights13 dataset includes data 336776 flights departed three NY area airports 2013. data comes tibble, shall perform operations tibble data.frame data compare.Compare performance base R vs. dplyr calculating mean arrival delay carrier using either data.frame tibble:","code":"\nlibrary(microbenchmark)\ndat <- as.data.frame(matrix(1:2000, 1000))\ndim(dat)[1] 1000    2\nlibrary(dplyr)\nAttaching package: 'dplyr'The following object is masked from 'package:nlme':\n\n    collapseThe following objects are masked from 'package:stats':\n\n    filter, lagThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\nadd2k <- microbenchmark(\n  base = dat$V1 + dat$V2,\n  dplyr = mutate(dat, a = V1 + V2))\nadd2kUnit: microseconds\n  expr      min       lq       mean   median        uq       max neval\n  base    5.338    8.771   12.89646   10.984   15.5935   151.785   100\n dplyr 1697.295 2611.060 4039.74906 2904.940 3395.5460 68299.232   100\nplot(add2k)\nlibrary(nycflights13)\nclass(flights)[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\ndim(flights)[1] 336776     19\nflightsDF <- as.data.frame(flights)\ndbc <- microbenchmark(\n  df_aggregate = aggregate(flightsDF$arr_delay, by = list(flightsDF$carrier), mean, na.rm = TRUE),\n  tb_aggregate = aggregate(flights$arr_delay, by = list(flights$carrier), mean, na.rm = TRUE),\n  df_tapply = tapply(flightsDF$arr_delay, flightsDF$carrier, mean, na.rm = TRUE),\n  tb_tapply = tapply(flights$arr_delay, flights$carrier, mean, na.rm = TRUE),\n  df_dplyr = flightsDF %>% group_by(carrier) %>% summarize(mean(arr_delay, na.rm = TRUE)),\n  tb_dplyr = flights %>% group_by(carrier) %>% summarize(mean(arr_delay, na.rm = TRUE)))`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\n`summarise()` ungrouping output (override with `.groups` argument)\ndbcUnit: milliseconds\n         expr       min        lq      mean    median        uq      max neval\n df_aggregate 130.88741 154.81781 171.74060 168.50052 177.98969 357.2773   100\n tb_aggregate 129.72342 159.00458 179.42511 170.04291 182.74289 395.4771   100\n    df_tapply  29.32670  36.88883  50.08487  40.97258  46.44379 288.3056   100\n    tb_tapply  30.62176  35.06806  42.30218  39.00165  43.10509 168.4904   100\n     df_dplyr  19.40082  24.25674  31.79595  27.18683  31.12736 193.1500   100\n     tb_dplyr  19.63044  23.84541  30.06230  26.60319  29.97716 215.3876   100\nplot(dbc)\nlibrary(rpart)\ndata(Sonar, package = \"mlbench\")\n\nglmVSrpart <- microbenchmark(\n  glm = glm(Class ~ ., family = \"binomial\", Sonar),\n  rpart = rpart(Class ~ ., Sonar, method = \"class\"),\n  times = 50)\n\nplot(glmVSrpart)"},{"path":"profiling.html","id":"profile-a-function-with-profvis","chapter":"25 Timing & Profiling","heading":"25.3 Profile a function with profvis()","text":"profvis provides interactive output visualize much time spent different calls within algorithm.","code":"\nlibrary(profvis)\nlibrary(rtemis)  .:rtemis 0.8.1: Welcome, egenn\n  [x86_64-apple-darwin17.0 (64-bit): Defaulting to 4/4 available cores]\n  Documentation & vignettes: https://rtemis.lambdamd.org\ndata(Sonar, package = 'mlbench')\nprofvis(rpart::rpart(Class ~ ., Sonar))"},{"path":"optim.html","id":"optim","chapter":"26 Optimization with optim()","heading":"26 Optimization with optim()","text":"R provides general purpose optimization tool, optim(). can use estimate parameters minimize defined function.\nSupervised unsupervised learning involves defining loss function minimize objective function minimize maximize.\nlearn optim() works, let’s write simple function returns linear coefficients minimizing squared error.","code":"  .:rtemis 0.8.1: Welcome, egenn\n  [x86_64-apple-darwin17.0 (64-bit): Defaulting to 4/4 available cores]\n  Documentation & vignettes: https://rtemis.lambdamd.org"},{"path":"optim.html","id":"data","chapter":"26 Optimization with optim()","heading":"26.1 Data","text":"","code":"\nset.seed(2020)\nx <- sapply(seq(10), function(i) rnorm(500))\ny <- 12 + 1.5 * x[, 3] + 3.2 * x[, 7] + .5 * x[, 9] + rnorm(500)"},{"path":"optim.html","id":"glm-glm-s.glm","chapter":"26 Optimization with optim()","heading":"26.2 GLM (glm, s.GLM)","text":", using rtemis:","code":"\nyx.glm <- glm(y ~ x)\nsummary(yx.glm)\nCall:\nglm(formula = y ~ x)\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-2.38739  -0.67391   0.00312   0.65531   3.08524  \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 11.979070   0.043252 276.962   <2e-16 ***\nx1           0.061798   0.040916   1.510   0.1316    \nx2          -0.003873   0.043271  -0.090   0.9287    \nx3           1.488113   0.042476  35.034   <2e-16 ***\nx4           0.031115   0.044015   0.707   0.4800    \nx5           0.034217   0.043664   0.784   0.4336    \nx6           0.034716   0.042189   0.823   0.4110    \nx7           3.183398   0.040605  78.399   <2e-16 ***\nx8          -0.034252   0.043141  -0.794   0.4276    \nx9           0.541219   0.046550  11.627   <2e-16 ***\nx10          0.087120   0.044000   1.980   0.0483 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for gaussian family taken to be 0.9207315)\n\n    Null deviance: 7339.42  on 499  degrees of freedom\nResidual deviance:  450.24  on 489  degrees of freedom\nAIC: 1390.5\n\nNumber of Fisher Scoring iterations: 2\nmod.glm <- s.GLM(x, y)[2020-11-09 01:08:30 s.GLM] Hello, egenn \n\n[[ Regression Input Summary ]]\n   Training features: 500 x 10 \n    Training outcome: 500 x 1 \n    Testing features: Not available\n     Testing outcome: Not available\n\n[2020-11-09 01:08:32 s.GLM] Training GLM... \n\n[[ GLM Regression Training Summary ]]\n    MSE = 0.90 (93.87%)\n   RMSE = 0.95 (75.23%)\n    MAE = 0.77 (74.88%)\n      r = 0.97 (p = 5.3e-304)\n    rho = 0.97 (p = 0.00)\n   R sq = 0.94\n\n[2020-11-09 01:08:32 s.GLM] Run completed in 0.03 minutes (Real: 1.64; User: 1.19; System: 0.09) \n\nsummary(mod.glm$mod)\nCall:\nglm(formula = .formula, family = family, data = df.train, weights = .weights, \n    na.action = na.action)\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-2.38739  -0.67391   0.00312   0.65531   3.08524  \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 11.979070   0.043252 276.962   <2e-16 ***\nV1           0.061798   0.040916   1.510   0.1316    \nV2          -0.003873   0.043271  -0.090   0.9287    \nV3           1.488113   0.042476  35.034   <2e-16 ***\nV4           0.031115   0.044015   0.707   0.4800    \nV5           0.034217   0.043664   0.784   0.4336    \nV6           0.034716   0.042189   0.823   0.4110    \nV7           3.183398   0.040605  78.399   <2e-16 ***\nV8          -0.034252   0.043141  -0.794   0.4276    \nV9           0.541219   0.046550  11.627   <2e-16 ***\nV10          0.087120   0.044000   1.980   0.0483 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for gaussian family taken to be 0.9207315)\n\n    Null deviance: 7339.42  on 499  degrees of freedom\nResidual deviance:  450.24  on 489  degrees of freedom\nAIC: 1390.5\n\nNumber of Fisher Scoring iterations: 2"},{"path":"optim.html","id":"optim-1","chapter":"26 Optimization with optim()","heading":"26.3 optim","text":"Basic usage optim find values parameters minimize function:Define list initial parameter valuesDefine loss function whose first argument list initial parameter valuesPass parameter list objective function optimIn following example, wrap three steps function called linearcoeffs, output linear coefficients minimize squared error, given matrix/data.frame features x outcome y. also specify optimization method used (See ?base::optim details):","code":"\nlinearcoeffs <- function(x, y, method = \"BFGS\") {\n  \n  # 1. List of initial parameter values\n  params <- as.list(c(mean(y), rep(0, NCOL(x))))\n  names(params) <- c(\"Intercept\", paste0(\"Coefficient\", seq(NCOL(x))))\n  \n  # 2. Loss function: first argument is parameter list\n  loss <- function(params, x, y) {\n    estimated <- c(params[[1]] + x %*% unlist(params[-1]))\n    mean((y - estimated)^2)\n  }\n  \n  # 3. optim!\n  coeffs <- optim(params, loss, x = x, y = y, method = method)\n  \n  # The values that minimize the loss function are stored in $par\n  coeffs$par\n}\ncoeffs.optim <- linearcoeffs(x, y)\nestimated.optim <- cbind(1, x) %*% coeffs.optim\nmplot3.fit(y, estimated.optim)\ncoeffs.glm <- mod.glm$mod$coefficients\nestimated.glm <- cbind(1, x) %*% coeffs.glm\nmplot3.fit(y, estimated.glm)\nmplot3.fit(coeffs.glm, coeffs.optim)"},{"path":"glm.html","id":"glm","chapter":"27 Introduction to the GLM","heading":"27 Introduction to the GLM","text":"","code":"##   .:rtemis 0.8.1: Welcome, egenn\n##   [x86_64-apple-darwin17.0 (64-bit): Defaulting to 4/4 available cores]\n##   Documentation & vignettes: https://rtemis.lambdamd.org\n##   Learn R: https://class.lambdamd.org/pdsr"},{"path":"glm.html","id":"generalized-linear-model-glm","chapter":"27 Introduction to the GLM","heading":"27.1 Generalized Linear Model (GLM)","text":"Generalized Linear Model one common important models statistics.\nLet’s look example using GLM regression. use mtcars builtin dataset predict horsepower (hp) 32 cars 10 features:glm() function accepts formula defines model.\nformula hp ~ . means “regress hp variables.” family argument defines performing regression data argument points data frame covariates used formula found.gaussian output, can also use lm() function. minor differences output created, model :","code":"\nstr(mtcars)'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\nmod <- glm(hp ~ ., family = \"gaussian\", data = mtcars)\nmod\nCall:  glm(formula = hp ~ ., family = \"gaussian\", data = mtcars)\n\nCoefficients:\n(Intercept)          mpg          cyl         disp         drat           wt  \n     79.048       -2.063        8.204        0.439       -4.619      -27.660  \n       qsec           vs           am         gear         carb  \n     -1.784       25.813        9.486        7.216       18.749  \n\nDegrees of Freedom: 31 Total (i.e. Null);  21 Residual\nNull Deviance:      145700 \nResidual Deviance: 14160    AIC: 309.8\nclass(mod)[1] \"glm\" \"lm\" \nmod <- lm(hp ~ ., data = mtcars)\nmod\nCall:\nlm(formula = hp ~ ., data = mtcars)\n\nCoefficients:\n(Intercept)          mpg          cyl         disp         drat           wt  \n     79.048       -2.063        8.204        0.439       -4.619      -27.660  \n       qsec           vs           am         gear         carb  \n     -1.784       25.813        9.486        7.216       18.749  \nclass(mod)[1] \"lm\""},{"path":"glm.html","id":"summary-1","chapter":"27 Introduction to the GLM","heading":"27.1.1 Summary","text":"Get summary model using summary():Note R prints stars next covariates whose p-values falls within certain limits, described right table estimates.\n, example, p-value disp falls 0.001 0.01 therefore gets highlighted 2 stars.","code":"\nsummary(mod)\nCall:\nlm(formula = hp ~ ., data = mtcars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-38.681 -15.558   0.799  18.106  34.718 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)  79.0484   184.5041   0.428  0.67270   \nmpg          -2.0631     2.0906  -0.987  0.33496   \ncyl           8.2037    10.0861   0.813  0.42513   \ndisp          0.4390     0.1492   2.942  0.00778 **\ndrat         -4.6185    16.0829  -0.287  0.77680   \nwt          -27.6600    19.2704  -1.435  0.16591   \nqsec         -1.7844     7.3639  -0.242  0.81089   \nvs           25.8129    19.8512   1.300  0.20758   \nam            9.4863    20.7599   0.457  0.65240   \ngear          7.2164    14.6160   0.494  0.62662   \ncarb         18.7487     7.0288   2.667  0.01441 * \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 25.97 on 21 degrees of freedom\nMultiple R-squared:  0.9028,    Adjusted R-squared:  0.8565 \nF-statistic:  19.5 on 10 and 21 DF,  p-value: 1.898e-08"},{"path":"glm.html","id":"coefficients","chapter":"27 Introduction to the GLM","heading":"27.1.2 Coefficients","text":"","code":"\ncoefficients(mod)(Intercept)         mpg         cyl        disp        drat          wt \n 79.0483879  -2.0630545   8.2037204   0.4390024  -4.6185488 -27.6600472 \n       qsec          vs          am        gear        carb \n -1.7843654  25.8128774   9.4862914   7.2164047  18.7486691 \n# or\nmod$coefficients(Intercept)         mpg         cyl        disp        drat          wt \n 79.0483879  -2.0630545   8.2037204   0.4390024  -4.6185488 -27.6600472 \n       qsec          vs          am        gear        carb \n -1.7843654  25.8128774   9.4862914   7.2164047  18.7486691 "},{"path":"glm.html","id":"fitted-values","chapter":"27 Introduction to the GLM","heading":"27.1.3 Fitted values","text":"","code":"\nfitted(mod)          Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive \n          148.68122           140.62866            79.99158           125.75448 \n  Hornet Sportabout             Valiant          Duster 360           Merc 240D \n          183.21756           111.38490           228.02497            77.13692 \n           Merc 230            Merc 280           Merc 280C          Merc 450SE \n           72.71717           146.00088           147.81854           152.01285 \n         Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental \n          159.20364           161.43931           236.24493           226.12625 \n  Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla \n          210.31169            48.04587            83.55415            50.29692 \n      Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28 \n           65.46675           171.23732           165.49280           216.59542 \n   Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa \n          188.81358            67.04615            84.64992           110.35672 \n     Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E \n          253.68881           188.34908           300.28196            93.42896 \n# or\nmod$fitted.values          Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive \n          148.68122           140.62866            79.99158           125.75448 \n  Hornet Sportabout             Valiant          Duster 360           Merc 240D \n          183.21756           111.38490           228.02497            77.13692 \n           Merc 230            Merc 280           Merc 280C          Merc 450SE \n           72.71717           146.00088           147.81854           152.01285 \n         Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental \n          159.20364           161.43931           236.24493           226.12625 \n  Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla \n          210.31169            48.04587            83.55415            50.29692 \n      Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28 \n           65.46675           171.23732           165.49280           216.59542 \n   Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa \n          188.81358            67.04615            84.64992           110.35672 \n     Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E \n          253.68881           188.34908           300.28196            93.42896 "},{"path":"glm.html","id":"residuals","chapter":"27 Introduction to the GLM","heading":"27.1.4 Residuals","text":"","code":"\nresiduals(mod)          Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive \n         -38.681220          -30.628664           13.008418          -15.754483 \n  Hornet Sportabout             Valiant          Duster 360           Merc 240D \n          -8.217565           -6.384902           16.975025          -15.136925 \n           Merc 230            Merc 280           Merc 280C          Merc 450SE \n          22.282827          -23.000881          -24.818538           27.987149 \n         Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental \n          20.796356           18.560690          -31.244931          -11.126253 \n  Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla \n          19.688306           17.954127          -31.554152           14.703084 \n      Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28 \n          31.533250          -21.237322          -15.492798           28.404576 \n   Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa \n         -13.813582           -1.046152            6.350078            2.643283 \n     Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E \n          10.311194          -13.349075           34.718037           15.571042 \n# or\nmod$residuals          Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive \n         -38.681220          -30.628664           13.008418          -15.754483 \n  Hornet Sportabout             Valiant          Duster 360           Merc 240D \n          -8.217565           -6.384902           16.975025          -15.136925 \n           Merc 230            Merc 280           Merc 280C          Merc 450SE \n          22.282827          -23.000881          -24.818538           27.987149 \n         Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental \n          20.796356           18.560690          -31.244931          -11.126253 \n  Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla \n          19.688306           17.954127          -31.554152           14.703084 \n      Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28 \n          31.533250          -21.237322          -15.492798           28.404576 \n   Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa \n         -13.813582           -1.046152            6.350078            2.643283 \n     Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E \n          10.311194          -13.349075           34.718037           15.571042 "},{"path":"glm.html","id":"p-values","chapter":"27 Introduction to the GLM","heading":"27.1.5 p-values","text":"extract p-values intercept coefficient, use coef() summary(). final (4th) column lists p-values:","code":"\ncoef(summary(mod))               Estimate  Std. Error    t value    Pr(>|t|)\n(Intercept)  79.0483879 184.5040756  0.4284371 0.672695339\nmpg          -2.0630545   2.0905650 -0.9868407 0.334955314\ncyl           8.2037204  10.0861425  0.8133655 0.425134929\ndisp          0.4390024   0.1492007  2.9423609 0.007779725\ndrat         -4.6185488  16.0829171 -0.2871711 0.776795845\nwt          -27.6600472  19.2703681 -1.4353668 0.165910518\nqsec         -1.7843654   7.3639133 -0.2423121 0.810889101\nvs           25.8128774  19.8512410  1.3003156 0.207583411\nam            9.4862914  20.7599371  0.4569518 0.652397317\ngear          7.2164047  14.6160152  0.4937327 0.626619355\ncarb         18.7486691   7.0287674  2.6674192 0.014412403"},{"path":"glm.html","id":"plot-linear-fit","chapter":"27 Introduction to the GLM","heading":"27.1.6 Plot linear fit","text":"use lines() add line top scatterplot drawn plot().lines() accepts x y vectors coordinates:rtemis, can use argument fit use supported algorithm (see modSelect()) estimate fit:","code":"\nset.seed(2020)\nx <- rnorm(500)\ny <- .73 * x + .5 * rnorm(500)\nxy.fit <- lm(y~x)$fitted\nplot(x, y, pch = 16, col = \"#18A3AC99\")\nlines(x, xy.fit, col = \"#178CCB\", lwd = 2)\nmplot3.xy(x, y, fit = \"glm\")"},{"path":"glm.html","id":"classification","chapter":"27 Introduction to the GLM","heading":"27.1.7 Classification","text":"classification, use glm() family = binomial","code":"\ndata(PimaIndiansDiabetes2, package = 'mlbench')\nstr(PimaIndiansDiabetes2)'data.frame':   768 obs. of  9 variables:\n $ pregnant: num  6 1 8 1 0 5 3 10 2 8 ...\n $ glucose : num  148 85 183 89 137 116 78 115 197 125 ...\n $ pressure: num  72 66 64 66 40 74 50 NA 70 96 ...\n $ triceps : num  35 29 NA 23 35 NA 32 NA 45 NA ...\n $ insulin : num  NA NA NA 94 168 NA 88 NA 543 NA ...\n $ mass    : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 NA ...\n $ pedigree: num  0.627 0.351 0.672 0.167 2.288 ...\n $ age     : num  50 31 32 21 33 30 26 29 53 54 ...\n $ diabetes: Factor w/ 2 levels \"neg\",\"pos\": 2 1 2 1 2 1 2 1 2 2 ...\ndiabetes_mod <- glm(diabetes ~ ., PimaIndiansDiabetes2, family = \"binomial\")\ndiabetes_mod\nCall:  glm(formula = diabetes ~ ., family = \"binomial\", data = PimaIndiansDiabetes2)\n\nCoefficients:\n(Intercept)     pregnant      glucose     pressure      triceps      insulin  \n -1.004e+01    8.216e-02    3.827e-02   -1.420e-03    1.122e-02   -8.253e-04  \n       mass     pedigree          age  \n  7.054e-02    1.141e+00    3.395e-02  \n\nDegrees of Freedom: 391 Total (i.e. Null);  383 Residual\n  (376 observations deleted due to missingness)\nNull Deviance:      498.1 \nResidual Deviance: 344  AIC: 362\nsummary(diabetes_mod)\nCall:\nglm(formula = diabetes ~ ., family = \"binomial\", data = PimaIndiansDiabetes2)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-2.7823  -0.6603  -0.3642   0.6409   2.5612  \n\nCoefficients:\n              Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -1.004e+01  1.218e+00  -8.246  < 2e-16 ***\npregnant     8.216e-02  5.543e-02   1.482  0.13825    \nglucose      3.827e-02  5.768e-03   6.635 3.24e-11 ***\npressure    -1.420e-03  1.183e-02  -0.120  0.90446    \ntriceps      1.122e-02  1.708e-02   0.657  0.51128    \ninsulin     -8.253e-04  1.306e-03  -0.632  0.52757    \nmass         7.054e-02  2.734e-02   2.580  0.00989 ** \npedigree     1.141e+00  4.274e-01   2.669  0.00760 ** \nage          3.395e-02  1.838e-02   1.847  0.06474 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 498.10  on 391  degrees of freedom\nResidual deviance: 344.02  on 383  degrees of freedom\n  (376 observations deleted due to missingness)\nAIC: 362.02\n\nNumber of Fisher Scoring iterations: 5"},{"path":"glm.html","id":"mass-univariate-analysis","chapter":"27 Introduction to the GLM","heading":"27.2 Mass-univariate analysis","text":"many cases large number predictors , along number tests models, may want regress outcome interest covariate, one time.Let’s create synthetic data 1000 cases 100 covariates\noutcome generated using just 4 100 covariates added noise.Let’s fit linear model regressing y column x using lm:extract p-values model, must find exactly look.\nLet’s look first model:p-values feature stored row 1, column 4 fo coefficients matrix. Let’s extract :Let’s see variable significant 0.05:…significant 0.01 level:","code":"\nset.seed(2020)\nn_col <- 100\nn_row <- 1000\nx <- as.data.frame(lapply(seq(n_col), function(i) rnorm(n_row)),\n                   col.names = paste0(\"Feature_\", seq(n_col)))\ndim(x)[1] 1000  100\ny <- .7 + x[, 10] + .3 * x[, 20] + 1.3 * x[, 30] + x[, 50] + rnorm(500)\nmod.xy.massuni <- lapply(seq(x), function(i) lm(y ~ x[, i]))\nlength(mod.xy.massuni)[1] 100\nnames(mod.xy.massuni) <- paste0(\"mod\", seq(x))\n(ms1 <- summary(mod.xy.massuni$mod1))\nCall:\nlm(formula = y ~ x[, i])\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-8.5402 -1.4881 -0.0618  1.4968  5.8152 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  0.61800    0.06878   8.985   <2e-16 ***\nx[, i]       0.08346    0.06634   1.258    0.209    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.174 on 998 degrees of freedom\nMultiple R-squared:  0.001584,  Adjusted R-squared:  0.0005831 \nF-statistic: 1.583 on 1 and 998 DF,  p-value: 0.2086\nms1$coefficients              Estimate Std. Error  t value     Pr(>|t|)\n(Intercept) 0.61800326 0.06878142 8.985032 1.266204e-18\nx[, i]      0.08346393 0.06634074 1.258110 2.086464e-01\nmod.xy.massuni.pvals <- sapply(mod.xy.massuni, function(i) summary(i)$coefficients[2, 4])\nwhich(mod.xy.massuni.pvals < .05) mod5 mod10 mod12 mod20 mod28 mod30 mod42 mod50 mod61 mod65 mod72 mod82 mod85 \n    5    10    12    20    28    30    42    50    61    65    72    82    85 \nmod91 mod94 mod99 \n   91    94    99 \nwhich(mod.xy.massuni.pvals < .01)mod10 mod20 mod28 mod30 mod50 \n   10    20    28    30    50 "},{"path":"glm.html","id":"multiple-comparison-correction","chapter":"27 Introduction to the GLM","heading":"27.3 Multiple comparison correction","text":"’ve performed large number tests reporting results, need control multiple comparisons.\n, use R’s p.adjust() function. adjusts vector p-values account multiple comparisons using one multiple methods. default, recommended, Holm method. ensures FWER < α, .e. controls family-wise error rate, .k.. probability making one false discoveries (Type errors)Now, let’s see features’ p-values survive magical .05 threshold:indeed correct features (surprisingly, still reassuringly).","code":"\nmod.xy.massuni.pvals.holm_adjusted <- p.adjust(mod.xy.massuni.pvals)\nwhich(mod.xy.massuni.pvals.holm_adjusted < .05)mod10 mod20 mod30 mod50 \n   10    20    30    50 "},{"path":"resampling.html","id":"resampling","chapter":"28 Resampling","heading":"28 Resampling","text":"Resampling refers collection techniques selecting cases sample. central many machine learning algorithms pipelines. two core uses resampling predictive modeling / machinbe learning model selection (.k.. tuning) model assessment. convention, use terms training validation set refering model selection, training testing set refering model assessment. terminology unfortunately intuitive led much confusion. people reverse terms, use terms training, validation, testing used Elements Statistical Learning (p. 222, Second edition, 12th printing).","code":"\nlibrary(rtemis)  .:rtemis 0.8.1: Welcome, egenn\n  [x86_64-apple-darwin17.0 (64-bit): Defaulting to 4/4 available cores]\n  Documentation & vignettes: https://rtemis.lambdamd.org"},{"path":"resampling.html","id":"model-selection-and-assessment","chapter":"28 Resampling","heading":"28.1 Model Selection and Assessment","text":"Model Selection aka Hyperparameter tuningResamples training set drawn creating multiple training validation sets. resample, combination hyperparameters used train model. mean validation-set error across resamples calculated. combination hyperparameters minimum loss average across validation-set resamples selected train full training sample.Model assessmentResamples full sample drawn, resulting multiple training - testing sets. model trained training set performance assessed corresponding test set. Model performance averaged across test sets.Nested resampling nested crossvalidation procedure 1. 2. nested hyperparameter tuning (resampling training set) performed within multiple training resamples performance tested corresponding test set. [elevate] performs automatic nested resampling one core supervised learning functions rtemis.\nFigure 28.1: 10-fold crossvalidation\n","code":""},{"path":"resampling.html","id":"the-resample-function","chapter":"28 Resampling","heading":"28.2 The resample function","text":"resample() function responsible resampling rtemis.outputs list S3 object class resample, print plot methods.teal-colored lines represent training cases selected resample, white testing cases (held ).resample() supports 5 types resampling:k-fold crossvalidation (Stratified)split cases k sets (folds). set used validation testing set. means cases left exactly overlap different validation/test sets. rtemis, folds also stratified default outcome unless otherwise chosen. Stratification tries maintain full sample’s distribution training left-sets. crucial non-normally distributed continuous outcomes imbalanced datasets. 10 common value k, called 10-fold. Note size training left-sets depends sample size.Stratified subsamplingDraw n.resamples stratified samples data given certain probability (train.p) case belongs training set. Since randomly sampling full sample time, overlap test set cases, control training--testing ratio number resamples independently, unlike k-fold resampling.BootstrapThe bootstrap: random sampling replacement. Since cases replicated, use bootstrap outer resampler also inner resampling tuning, since case may end training validation sets.Stratified BootstrapThis stratified subsampling random replication cases match length original sample. bootstrap, use resampling resample.Leave-One--Crossvalidation (LOOCV)k-fold crossvalidation \\(k = N\\), \\(N\\) number data points/cases whole sample. included experimentation completenes, recommended either model selection assessment resampling methods.","code":"\nx <- rnorm(500)\nres <- resample(x)[[ Resampling Parameters ]]\n    n.resamples: 10 \n      resampler: strat.sub \n   stratify.var: y \n        train.p: 0.75 \n   strat.n.bins: 4 \n\n[2020-11-30 03:49:08 resample] Created 10 stratified subsamples \nclass(res)[1] \"resample\" \"list\"    \nres.:rtemis resample object \n              N: 10 \n           type: strat.sub \n        train.p: 0.75 \n   strat.n.bins: 4 \nplot(res)\nres.10fold <- resample(x, 10, \"kfold\")[[ Resampling Parameters ]]\n    n.resamples: 10 \n      resampler: kfold \n   stratify.var: y \n   strat.n.bins: 4 \n\n[2020-11-30 03:49:09 resample] Created 10 independent folds \nres.25ss <- resample(x, 25, \"strat.sub\")[[ Resampling Parameters ]]\n    n.resamples: 25 \n      resampler: strat.sub \n   stratify.var: y \n        train.p: 0.75 \n   strat.n.bins: 4 \n\n[2020-11-30 03:49:09 resample] Created 25 stratified subsamples \nres.100boot <- resample(x, 100, \"bootstrap\")[[ Resampling Parameters ]]\n   n.resamples: 100 \n     resampler: bootstrap \n\n[2020-11-30 03:49:09 resample] Created 100 bootstrap resamples \nres.100sboot <- resample(x, 100, \"strat.boot\")[[ Resampling Parameters ]]\n     n.resamples: 100 \n       resampler: strat.boot \n    stratify.var: y \n         train.p: 0.75 \n    strat.n.bins: 4 \n   target.length: 500 \n\n[2020-11-30 03:49:09 resample] Created 100 stratified bootstraps \nres.loocv <- resample(x, resampler = \"loocv\")[[ Resampling Parameters ]]\n   n.resamples: 500 \n     resampler: loocv \n\n[2020-11-30 03:49:09 resample] Created 500 independent folds (LOOCV) "},{"path":"resampling.html","id":"example-stratified-vs-random-sampling-in-a-binomial-distribution","chapter":"28 Resampling","heading":"28.3 Example: Stratified vs random sampling in a binomial distribution","text":"Imagine y outcome interest events occur probability .1 - common scenario many fields.expected, random sampling resulted different event probability resample, whereas stratified subsampling maintained constant probability across resamples.","code":"\nset.seed(2020)\nx <- rbinom(100, 1, .1)\nmplot3.x(x)\nfreq <- table(x)\nprob <- freq[2] / sum(freq)\nres.nonstrat <- lapply(seq(10), function(i) sample(seq(x), .75*length(x)))\nres.strat <- resample(x)[[ Resampling Parameters ]]\n    n.resamples: 10 \n      resampler: strat.sub \n   stratify.var: y \n        train.p: 0.75 \n   strat.n.bins: 4 \n[2020-11-30 03:49:09 strat.sub] Using max n bins possible = 2 \n\n[2020-11-30 03:49:09 resample] Created 10 stratified subsamples \nprob.nonstrat <- sapply(seq(10), function(i) {\n  freq <- table(x[res.nonstrat[[i]]])\n  freq[2]/sum(freq)\n})\nprob.strat <- sapply(seq(10), function(i) {\n  freq <- table(x[res.strat[[i]]])\n  freq[2]/sum(freq)\n})\nprob.nonstrat         1          1          1          1          1          1          1 \n0.09333333 0.08000000 0.08000000 0.06666667 0.06666667 0.10666667 0.10666667 \n         1          1          1 \n0.10666667 0.09333333 0.08000000 \nsd(prob.nonstrat)[1] 0.0156505\nprob.strat         1          1          1          1          1          1          1 \n0.08108108 0.08108108 0.08108108 0.08108108 0.08108108 0.08108108 0.08108108 \n         1          1          1 \n0.08108108 0.08108108 0.08108108 \nsd(prob.strat)[1] 0"},{"path":"supervised.html","id":"supervised","chapter":"29 Supervised Learning","heading":"29 Supervised Learning","text":"brief introduction machine learning using rtemis package. rtemis includes functions :Visualization: static & interactive plotsData preprocessingUnsupervised learning: clustering & dimensionality reductionSupervised learning: regression & classification","code":""},{"path":"supervised.html","id":"installation-1","chapter":"29 Supervised Learning","heading":"29.1 Installation","text":"install remotes package, don’t :Install rtemis:rtemis uses large number packages hood. Since need use , installed default. time rtemis function called, dependency check run message printed packages need installed.short tutorial, start installing ranger, already installed system:Load rtemis:","code":"\ninstall.packages(\"remotes\")\nremotes::install_github(\"egenn/rtemis\")\ninstall.packages(\"ranger\")\nlibrary(rtemis)  .:rtemis 0.8.1: Welcome, egenn\n  [x86_64-apple-darwin17.0 (64-bit): Defaulting to 4/4 available cores]\n  Documentation & vignettes: https://rtemis.lambdamd.org"},{"path":"supervised.html","id":"data-input-for-supervised-learning","chapter":"29 Supervised Learning","heading":"29.2 Data Input for Supervised Learning","text":"rtemis supervised learning functions begin s. (“supervised”).\naccept first four arguments:x, y, x.test, y.test\nflexible allow also provide combined (x, y) (x.test, y.test) data frames, explained .","code":""},{"path":"supervised.html","id":"scenario-1-x.train-y.train-x.test-y.test","chapter":"29 Supervised Learning","heading":"29.2.1 Scenario 1 (x.train, y.train, x.test, y.test)","text":"straightforward case, provide featureset outcome individually:x: Training set featuresy: Training set outcomex.test: Testing set features (Optional)y.test: Testing set outcome (Optional)","code":"\nx <- rnormmat(200, 10, seed = 2019)\nw <- rnorm(10)\ny <- x %*% w + rnorm(200)\nres <- resample(y, seed = 2020)[[ Resampling Parameters ]]\n    n.resamples: 10 \n      resampler: strat.sub \n   stratify.var: y \n        train.p: 0.75 \n   strat.n.bins: 4 \n\n[2020-11-09 01:08:41 resample] Created 10 stratified subsamples \n\nx.train <- x[res$Subsample_1, ]\nx.test <- x[-res$Subsample_1, ]\ny.train <- y[res$Subsample_1]\ny.test <- y[-res$Subsample_1]\nmod.glm <- s.GLM(x.train, y.train, x.test, y.test)[2020-11-09 01:08:41 s.GLM] Hello, egenn \n\n[[ Regression Input Summary ]]\n   Training features: 147 x 10 \n    Training outcome: 147 x 1 \n    Testing features: 53 x 10 \n     Testing outcome: 53 x 1 \n\n[2020-11-09 01:08:42 s.GLM] Training GLM... \n\n[[ GLM Regression Training Summary ]]\n    MSE = 0.84 (91.88%)\n   RMSE = 0.92 (71.51%)\n    MAE = 0.75 (69.80%)\n      r = 0.96 (p = 5.9e-81)\n    rho = 0.95 (p = 0.00)\n   R sq = 0.92\n\n[[ GLM Regression Testing Summary ]]\n    MSE = 1.22 (89.03%)\n   RMSE = 1.10 (66.88%)\n    MAE = 0.90 (66.66%)\n      r = 0.94 (p = 2.5e-26)\n    rho = 0.95 (p = 0.00)\n   R sq = 0.89\n\n[2020-11-09 01:08:42 s.GLM] Run completed in 0.03 minutes (Real: 1.65; User: 1.22; System: 0.08) \n"},{"path":"supervised.html","id":"scenario-2-x.train-x.test","chapter":"29 Supervised Learning","heading":"29.2.2 Scenario 2: (x.train, x.test)","text":"can provide training testing sets single data.frame , last column outcome. Now x full training data y full testing data:x: data.frame(x.train, y.train)y: data.frame(x.test, y.test)dataPrepare() function check data dimensions determine whether data input separate feature outcome sets combined ensure correct number cases features provided.either scenario, Regression performed outcome numeric Classification outcome factor.","code":"\nx <- rnormmat(200, 10, seed = 2019)\nw <- rnorm(10)\ny <- x %*% w + rnorm(200)\ndat <- data.frame(x, y)\nres <- resample(dat, seed = 2020)[2020-11-09 01:08:43 resample] Input contains more than one columns; will stratify on last \n[[ Resampling Parameters ]]\n    n.resamples: 10 \n      resampler: strat.sub \n   stratify.var: y \n        train.p: 0.75 \n   strat.n.bins: 4 \n\n[2020-11-09 01:08:43 resample] Created 10 stratified subsamples \n\ndat.train <- dat[res$Subsample_1, ]\ndat.test <- dat[-res$Subsample_1, ]\nmod.glm <- s.GLM(dat.train, dat.test)[2020-11-09 01:08:43 s.GLM] Hello, egenn \n\n[[ Regression Input Summary ]]\n   Training features: 147 x 10 \n    Training outcome: 147 x 1 \n    Testing features: 53 x 10 \n     Testing outcome: 53 x 1 \n\n[2020-11-09 01:08:43 s.GLM] Training GLM... \n\n[[ GLM Regression Training Summary ]]\n    MSE = 0.84 (91.88%)\n   RMSE = 0.92 (71.51%)\n    MAE = 0.75 (69.80%)\n      r = 0.96 (p = 5.9e-81)\n    rho = 0.95 (p = 0.00)\n   R sq = 0.92\n\n[[ GLM Regression Testing Summary ]]\n    MSE = 1.22 (89.03%)\n   RMSE = 1.10 (66.88%)\n    MAE = 0.90 (66.66%)\n      r = 0.94 (p = 2.5e-26)\n    rho = 0.95 (p = 0.00)\n   R sq = 0.89\n\n[2020-11-09 01:08:43 s.GLM] Run completed in 2.6e-03 minutes (Real: 0.16; User: 0.10; System: 0.02) \n"},{"path":"supervised.html","id":"regression","chapter":"29 Supervised Learning","heading":"29.3 Regression","text":"","code":""},{"path":"supervised.html","id":"check-data-with-checkdata","chapter":"29 Supervised Learning","heading":"29.3.1 Check Data with checkData()","text":"","code":"\nx <- rnormmat(500, 50, seed = 2019)\nw <- rnorm(50)\ny <- x %*% w + rnorm(500)\ndat <- data.frame(x, y)\nres <- resample(dat)[2020-11-09 01:08:43 resample] Input contains more than one columns; will stratify on last \n[[ Resampling Parameters ]]\n    n.resamples: 10 \n      resampler: strat.sub \n   stratify.var: y \n        train.p: 0.75 \n   strat.n.bins: 4 \n\n[2020-11-09 01:08:43 resample] Created 10 stratified subsamples \n\ndat.train <- dat[res$Subsample_1, ]\ndat.test <- dat[-res$Subsample_1, ]\ncheckData(x)  Dataset: x \n\n  [[ Summary ]]\n  500 cases with 50 features: \n  * 50 continuous features \n  * 0 integer features \n  * 0 categorical features\n  * 0 constant features \n  * 0 duplicated cases \n  * 0 features include 'NA' values\n\n  [[ Recommendations ]]\n  * Everything looks good\n\n"},{"path":"supervised.html","id":"single-model","chapter":"29 Supervised Learning","heading":"29.3.2 Single Model","text":"","code":"\nmod <- s.GLM(dat.train, dat.test)[2020-11-09 01:08:43 s.GLM] Hello, egenn \n\n[[ Regression Input Summary ]]\n   Training features: 374 x 50 \n    Training outcome: 374 x 1 \n    Testing features: 126 x 50 \n     Testing outcome: 126 x 1 \n\n[2020-11-09 01:08:43 s.GLM] Training GLM... \n\n[[ GLM Regression Training Summary ]]\n    MSE = 1.02 (97.81%)\n   RMSE = 1.01 (85.18%)\n    MAE = 0.81 (84.62%)\n      r = 0.99 (p = 1.3e-310)\n    rho = 0.99 (p = 0.00)\n   R sq = 0.98\n\n[[ GLM Regression Testing Summary ]]\n    MSE = 0.98 (97.85%)\n   RMSE = 0.99 (85.35%)\n    MAE = 0.76 (85.57%)\n      r = 0.99 (p = 2.7e-105)\n    rho = 0.98 (p = 0.00)\n   R sq = 0.98\n\n[2020-11-09 01:08:43 s.GLM] Run completed in 3.1e-03 minutes (Real: 0.19; User: 0.12; System: 0.03) \n"},{"path":"supervised.html","id":"crossvalidated-model","chapter":"29 Supervised Learning","heading":"29.3.3 Crossvalidated Model","text":"Use describe() function get summary (plain) English:","code":"\nmod <- elevate(dat, mod = \"glm\")[2020-11-09 01:08:44 elevate] Hello, egenn \n\n[[ Regression Input Summary ]]\n   Training features: 500 x 50 \n    Training outcome: 500 x 1 \n\n[2020-11-09 01:08:44 resLearn] Training Generalized Linear Model on 10 stratified subsamples... \n\n[[ elevate GLM ]]\n   N repeats = 1 \n   N resamples = 10 \n   Resampler = strat.sub \n   Mean MSE of 10 resamples in each repeat = 1.22\n   Mean MSE reduction in each repeat =  97.50%\n\n\n[2020-11-09 01:08:45 elevate] Run completed in 0.02 minutes (Real: 1.02; User: 0.72; System: 0.11) \n\nmod$describe()Regression was performed using Generalized Linear Model. Model generalizability was assessed using 10 stratified subsamples. The mean R-squared across all resamples was 0.97.\nmod$plot()"},{"path":"supervised.html","id":"classification-1","chapter":"29 Supervised Learning","heading":"29.4 Classification","text":"","code":""},{"path":"supervised.html","id":"check-data","chapter":"29 Supervised Learning","heading":"29.4.1 Check Data","text":"","code":"\ndata(Sonar, package = 'mlbench')\ncheckData(Sonar)  Dataset: Sonar \n\n  [[ Summary ]]\n  208 cases with 61 features: \n  * 60 continuous features \n  * 0 integer features \n  * 1 categorical feature, which is not ordered\n  * 0 constant features \n  * 0 duplicated cases \n  * 0 features include 'NA' values\n\n  [[ Recommendations ]]\n  * Everything looks good\n\n\nres <- resample(Sonar)[2020-11-09 01:08:47 resample] Input contains more than one columns; will stratify on last \n[[ Resampling Parameters ]]\n    n.resamples: 10 \n      resampler: strat.sub \n   stratify.var: y \n        train.p: 0.75 \n   strat.n.bins: 4 \n[2020-11-09 01:08:47 strat.sub] Using max n bins possible = 2 \n\n[2020-11-09 01:08:47 resample] Created 10 stratified subsamples \n\nsonar.train <- Sonar[res$Subsample_1, ]\nsonar.test <- Sonar[-res$Subsample_1, ]"},{"path":"supervised.html","id":"single-model-1","chapter":"29 Supervised Learning","heading":"29.4.2 Single model","text":"","code":"\nmod <- s.RANGER(sonar.train, sonar.test)[2020-11-09 01:08:47 s.RANGER] Hello, egenn \n\n[2020-11-09 01:08:47 dataPrepare] Imbalanced classes: using Inverse Probability Weighting \n\n[[ Classification Input Summary ]]\n   Training features: 155 x 60 \n    Training outcome: 155 x 1 \n    Testing features: 53 x 60 \n     Testing outcome: 53 x 1 \n\n[[ Parameters ]]\n   n.trees: 1000 \n      mtry: NULL \n\n[2020-11-09 01:08:47 s.RANGER] Training Random Forest (ranger) Classification with 1000 trees... \n\n[[ RANGER Classification Training Summary ]]\n                   Reference \n        Estimated  M   R   \n                M  83   0\n                R   0  72\n\n                   Overall  \n      Sensitivity  1      \n      Specificity  1      \nBalanced Accuracy  1      \n              PPV  1      \n              NPV  1      \n               F1  1      \n         Accuracy  1      \n              AUC  1      \n\n  Positive Class:  M \n\n[[ RANGER Classification Testing Summary ]]\n                   Reference \n        Estimated  M   R   \n                M  25  12\n                R   3  13\n\n                   Overall  \n      Sensitivity  0.8929 \n      Specificity  0.5200 \nBalanced Accuracy  0.7064 \n              PPV  0.6757 \n              NPV  0.8125 \n               F1  0.7692 \n         Accuracy  0.7170 \n              AUC  0.8479 \n\n  Positive Class:  M \n\n[2020-11-09 01:08:47 s.RANGER] Run completed in 0.01 minutes (Real: 0.32; User: 0.43; System: 0.04) \n"},{"path":"supervised.html","id":"crossvalidated-model-1","chapter":"29 Supervised Learning","heading":"29.4.3 Crossvalidated Model","text":"","code":"\nmod <- elevate(Sonar)[2020-11-09 01:08:47 elevate] Hello, egenn \n\n[[ Classification Input Summary ]]\n   Training features: 208 x 60 \n    Training outcome: 208 x 1 \n\n[2020-11-09 01:08:47 resLearn] Training Random Forest (ranger) on 10 stratified subsamples... \n\n[[ elevate RANGER ]]\n   N repeats = 1 \n   N resamples = 10 \n   Resampler = strat.sub \n   Mean Balanced Accuracy of 10 test sets in each repeat = 0.83\n\n[2020-11-09 01:08:50 elevate] Run completed in 0.04 minutes (Real: 2.67; User: 3.87; System: 0.16) \n\nmod$describe()Classification was performed using Random Forest (ranger). Model generalizability was assessed using 10 stratified subsamples. The mean Balanced Accuracy across all resamples was 0.83.\nmod$plot()\nmod$plotROC()\nmod$plotPR()"},{"path":"supervised.html","id":"evaluation-of-a-binary-classifier","chapter":"29 Supervised Learning","heading":"29.4.4 Evaluation of a binary classifier","text":"\nFigure 29.1: Evaluation metrics binary classifier\n","code":""},{"path":"supervised.html","id":"understanding-overfitting","chapter":"29 Supervised Learning","heading":"29.5 Understanding Overfitting","text":"Overfitting occurs model fits noise outcome. make clear, consider following example:Assume random variable x:data-generating function fn():true y therefore equal fn(x):However, assume y recorded noise, case gaussian:plot:want find model best approximates y_true, know y_noise.maximally overfitted model model noise perfectly:example SVM set overfit heavily:example good approximation fn using GAM penalized splines:","code":"\nset.seed(2020)\nx <- sort(rnorm(500))\nfn <- function(x) 12 + x^5\ny_true <- fn(x)\ny_noise <- fn(x) + rnorm(500, sd = sd(y_true))\nmplot3.xy(x, list(y_noise = y_noise, y_true = y_true))\nmplot3.xy(x, list(Overfitted_model = y_noise, Ideal_model = y_true), type = \"l\")\nmplot3.xy(x, y_noise, fit = \"svm\",\n          fit.params = list(kernel = \"radial\", cost = 100, gamma = 100))\nmplot3.xy(x, y_noise, fit = \"gam\")"},{"path":"supervised.html","id":"rtemis-documentation","chapter":"29 Supervised Learning","heading":"29.6 rtemis Documentation","text":"information using rtemis, see rtemis online documentation vignettes","code":""},{"path":"unsupervised.html","id":"unsupervised","chapter":"30 Unsupervised Learning","heading":"30 Unsupervised Learning","text":"Unsupervised learning aims learn relationships within dataset without focusing particular outcome. often hear unsupervised learning performed unlabeled data. clear, means use labels guide learning - whether labels available . might, example, perform unsupervised learning ahead supervised learning shall see later. Unsupervised learning includes number approaches, can divided two categories:Clustering: Cases grouped together based derived measure similarity / distance metric.Dimensionality Reduction / Matrix decomposition: Variables combined / projected lower dimensional space.rtemis, clustering algorithms begin u. decomposition/dimensionality reduction algorithms begin d. (use u. c. reserved builtin R function)","code":"  .:rtemis 0.8.1: Welcome, egenn\n  [x86_64-apple-darwin17.0 (64-bit): Defaulting to 4/4 available cores]\n  Documentation & vignettes: https://rtemis.lambdamd.org"},{"path":"unsupervised.html","id":"decomposition","chapter":"30 Unsupervised Learning","heading":"30.1 Decomposition / Dimensionality Reduction","text":"Use decomSelect() get listing available decomposition algorithms:can divide decomposition algorithms linear (e.g. PCA, ICA, NMF) nonlinear dimensionality reduction, (also called manifold learning, like LLE tSNE).","code":"\ndecomSelect().:decomSelect\nrtemis supports the following decomposition algorithms:\n\n    Name                                   Description\n     CUR                      CUR Matrix Approximation\n   H2OAE                               H2O Autoencoder\n H2OGLRM                H2O Generalized Low-Rank Model\n     ICA                Independent Component Analysis\n  ISOMAP                                        ISOMAP\n    KPCA           Kernel Principal Component Analysis\n     LLE                      Locally Linear Embedding\n     MDS                      Multidimensional Scaling\n     NMF             Non-negative Matrix Factorization\n     PCA                  Principal Component Analysis\n    SPCA           Sparse Principal Component Analysis\n     SVD                  Singular Value Decomposition\n    TSNE   t-distributed Stochastic Neighbor Embedding\n    UMAP Uniform Manifold Approximation and Projection"},{"path":"unsupervised.html","id":"principal-component-analysic-pca","chapter":"30 Unsupervised Learning","heading":"30.1.0.1 Principal Component Analysic (PCA)","text":"","code":"\nx <- iris[, 1:4]\niris.PCA <- d.PCA(x)[2020-11-09 01:08:54 d.PCA] Hello, egenn \n[2020-11-09 01:08:54 d.PCA] ||| Input has dimensions 150 rows by 4 columns, \n[2020-11-09 01:08:54 d.PCA]     interpreted as 150 cases with 4 features. \n[2020-11-09 01:08:54 d.PCA] Performing Principal Component Analysis... \n\n[2020-11-09 01:08:54 d.PCA] Run completed in 4.3e-04 minutes (Real: 0.03; User: 0.01; System: 1e-03) \n\nmplot3.xy(iris.PCA$projections.train[, 1], iris.PCA$projections.train[, 2], group = iris$Species,\n          xlab = \"1st PCA component\", ylab = \"2nd PCA component\", main = \"PCA on iris\")"},{"path":"unsupervised.html","id":"independent-component-analysis-ica","chapter":"30 Unsupervised Learning","heading":"30.1.0.2 Independent Component Analysis (ICA)","text":"","code":"\niris.ICA <- d.ICA(x, k = 2)[2020-11-09 01:08:54 d.ICA] Hello, egenn \n[2020-11-09 01:08:54 d.ICA] ||| Input has dimensions 150 rows by 4 columns, \n[2020-11-09 01:08:54 d.ICA]     interpreted as 150 cases with 4 features. \n[2020-11-09 01:08:54 d.ICA] Running Independent Component Analysis... \n\n[2020-11-09 01:08:54 d.ICA] Run completed in 3.5e-04 minutes (Real: 0.02; User: 0.01; System: 3e-03) \n\nmplot3.xy(iris.ICA$projections.train[, 1], iris.ICA$projections.train[, 2], group = iris$Species,\n          xlab = \"1st ICA component\", ylab = \"2nd ICA component\", main = \"ICA on iris\")"},{"path":"unsupervised.html","id":"non-negative-matrix-factorization-nmf","chapter":"30 Unsupervised Learning","heading":"30.1.0.3 Non-negative Matrix Factorization (NMF)","text":"","code":"\niris.NMF <- d.NMF(x, k = 2)[2020-11-09 01:08:54 d.NMF] Hello, egenn \n[2020-11-09 01:08:56 d.NMF] ||| Input has dimensions 150 rows by 4 columns, \n[2020-11-09 01:08:56 d.NMF]     interpreted as 150 cases with 4 features. \n[2020-11-09 01:08:56 d.NMF] Running Non-negative Matrix Factorization... \n\n[2020-11-09 01:08:58 d.NMF] Run completed in 0.06 minutes (Real: 3.58; User: 2.98; System: 0.13) \n\nmplot3.xy(iris.NMF$projections.train[, 1], iris.NMF$projections.train[, 2], group = iris$Species,\n          xlab = \"1st NMF component\", ylab = \"2nd NMF component\", main = \"NMF on iris\")"},{"path":"unsupervised.html","id":"clustering","chapter":"30 Unsupervised Learning","heading":"30.2 Clustering","text":"Use clustSelect() get listing available clustering algorithms:Let’s cluster iris shall also use NMF decomposition saw project 2 dimensions.\n’ll use two popular clustering algorithms, K-means PAM, aka K-medoids.","code":"\nclustSelect().:clustSelect\nrtemis supports the following clustering algorithms:\n\n      Name                                             Description\n    CMEANS                                Fuzzy C-means Clustering\n       EMC                     Expectation Maximization Clustering\n    HARDCL                               Hard Competitive Learning\n    HOPACH Hierarchical Ordered Partitioning And Collapsing Hybrid\n H2OKMEANS                                  H2O K-Means Clustering\n    KMEANS                                      K-Means Clustering\n      NGAS                                   Neural Gas Clustering\n       PAM                             Partitioning Around Medoids\n      PAMK           Partitioning Around Medoids with k estimation\n      SPEC                                     Spectral Clustering\nx <- iris[, 1:4]\niris.NMF <- d.NMF(x, k = 2)[2020-11-09 01:08:58 d.NMF] Hello, egenn \n[2020-11-09 01:08:58 d.NMF] ||| Input has dimensions 150 rows by 4 columns, \n[2020-11-09 01:08:58 d.NMF]     interpreted as 150 cases with 4 features. \n[2020-11-09 01:08:58 d.NMF] Running Non-negative Matrix Factorization... \n\n[2020-11-09 01:08:59 d.NMF] Run completed in 0.01 minutes (Real: 0.88; User: 0.76; System: 0.05) \n"},{"path":"unsupervised.html","id":"k-means","chapter":"30 Unsupervised Learning","heading":"30.2.1 K-Means","text":"","code":"\niris.KMEANS <- u.KMEANS(x, k = 3)[2020-11-09 01:08:59 u.KMEANS] Hello, egenn \n[2020-11-09 01:08:59 u.KMEANS] Performing K-means Clustering with k = 3... \n\n[2020-11-09 01:08:59 u.KMEANS] Run completed in 0.01 minutes (Real: 0.37; User: 0.26; System: 0.02) \n\nmplot3.xy(iris.NMF$projections.train[, 1], iris.NMF$projections.train[, 2],\n          group = iris.KMEANS$clusters.train,\n          xlab = \"1st NMF component\", ylab = \"2nd NMF component\", main = \"KMEANS on iris\")"},{"path":"unsupervised.html","id":"partitioning-around-medoids-with-k-estimation-pamk","chapter":"30 Unsupervised Learning","heading":"30.2.2 Partitioning Around Medoids with k estimation (PAMK)","text":"","code":"\niris.pamk <- u.PAMK(x, krange = 3:10)[2020-11-09 01:09:00 u.PAMK] Hello, egenn \n[2020-11-09 01:09:01 u.PAMK] Partitioning Around Medoids... \n[2020-11-09 01:09:01 u.PAMK] Estimated optimal number of clusters: 3 \n\n[2020-11-09 01:09:01 u.PAMK] Run completed in 0.02 minutes (Real: 1.04; User: 0.80; System: 0.05) \n\nmplot3.xy(iris.NMF$projections.train[, 1], iris.NMF$projections.train[, 2],\n          group = iris.pamk$clusters.train,\n          xlab = \"1st NMF component\", ylab = \"2nd NMF component\", main = \"PAM on iris\")"},{"path":"git.html","id":"git","chapter":"31 Git & GitHub: the basics","heading":"31 Git & GitHub: the basics","text":"git famously powerful notoriously complex. brief introduction small subset git’s functionality. Multiple online resources can help delve git considerably depth.First, important definitions:Git: System tracks changes code multiple users\nFree open source distributed version control system\nDeveloped 2005 Linus Torvalds support Linux kernel development\nUsed 87.2% developers 2018, according Stack Overflow\nFree open source distributed version control systemDeveloped 2005 Linus Torvalds support Linux kernel developmentUsed 87.2% developers 2018, according Stack OverflowRepository: Data (code) + metadata (.e. log changes time)\nData structure holds metadata set directories / files (set commit objects, historical record changes)\nData structure holds metadata set directories / files (set commit objects, historical record changes)GitHub: Online service holds Git repositories (public & private)\nGit repository hosting service\nLargest source code host world: > 40M users, > 100M repositories\nAcquired Microsoft $7.5 billion 2018.\nGit repository hosting serviceLargest source code host world: > 40M users, > 100M repositoriesAcquired Microsoft $7.5 billion 2018.","code":""},{"path":"git.html","id":"installing-git","chapter":"31 Git & GitHub: the basics","heading":"31.1 Installing git","text":"Check system already includes installation git. can download official git website","code":""},{"path":"git.html","id":"basic-git-usage","chapter":"31 Git & GitHub: the basics","heading":"31.2 Basic git usage","text":"system terminal, git commanda begin git followed command name:","code":""},{"path":"git.html","id":"cloning-downloading","chapter":"31 Git & GitHub: the basics","heading":"31.2.1 Cloning (“Downloading”)","text":"Download repository computer first time. Replace “user” username “repo” repository name.clone remote repository folder name ‘repo.’ can optionally provide different folder name URL.update previously cloned repository:","code":"git clone https://github.com/user/repo.gitgit pull"},{"path":"git.html","id":"pushing-uploading","chapter":"31 Git & GitHub: the basics","heading":"31.2.2 Pushing (“Uploading”)","text":"Get info local changes repository:Working locally, stage new modified files:Still working locally, commit changes informative message:(Note previous steps require internet connection - one )\nPush one multiple commits remote repository:","code":"git statusgit add /path/to/filegit commit -m Fixed this or added thatgit push"},{"path":"git.html","id":"collaborating","chapter":"31 Git & GitHub: the basics","heading":"31.2.3 Collaborating","text":"main way contributing project ) making new “branch” repository, b) making edits, c) either merging master requesting edits merged owner/s repository.\nallows multiple people work codebase without getting ’s way.","code":""},{"path":"git.html","id":"branching-and-merging","chapter":"31 Git & GitHub: the basics","heading":"31.2.4 Branching and merging","text":"Scenario: working project, hosted repository. want develop new feature, may take time code test make part official project code.\n* Create new branch, e.g. devel\n* Work new branch testing successful\n* Merge back master branchAlways system terminal, within directory repository:\nCreate new branch:Switch new branch:Work code, using git add/commit/push per usual.\ndone testing happy merge back master:commits performed working devel branch included last git push master.","code":"git branch develgit checkout develgit checkout master\ngit merge devel\ngit push"},{"path":"git.html","id":"pull-request","chapter":"31 Git & GitHub: the basics","heading":"31.2.5 Pull request","text":"Scenario: contributing repository along collaborators. want suggest new feature added code:Create new branch, e.g. mynewfeatureWork new branch ready happy share testing completeGo repository website, select branch perform “Pull request” asking changes mynewfeature branch merged masterThe repository owner/s review request can merge","code":""},{"path":"git.html","id":"gists","chapter":"31 Git & GitHub: the basics","heading":"31.3 Gists","text":"GitHub also offers convenient pastebin-like service called Gist, lets quickly easily share code snippets.share R code using gist:Vist gist site.Write /copy-paste codeAdd name including .R suffix top left entry boxCopy-paste URL share others","code":""},{"path":"git.html","id":"git-resources","chapter":"31 Git & GitHub: the basics","heading":"31.4 Git Resources","text":"Git GitHub powerful flexible, great deal functionality. resources learn (great deal) :Git cheat sheetGitHub guides\n# Pro Git Book Scott Chacon Ben Straub","code":""},{"path":"git.html","id":"git-and-github-for-open-and-reproducible-science","chapter":"31 Git & GitHub: the basics","heading":"31.5 Git and GitHub for open and reproducible science","text":"recommended create new GitHub repository new research project. may worthwhile creating new repository ’s time publish paper, include final working code accompany publication (e.g. exclude trial--error, testing, etc. code). Always, make sure follow journal requirements reporting data deposition (includes code) accessibility.","code":""},{"path":"git.html","id":"applications-with-builtin-git-support","chapter":"31 Git & GitHub: the basics","heading":"31.6 Applications with builtin git support","text":"Many applications support git, allow pull / add / commit / push directly app using GUI.\ncouple interest R user:RStudio\ntrusty IDE Git panel enabled project directory ’s part git repositoryThe Atom editor\nGitHub’s feature-packed text editor naturally built around git GitHub support. offers package manager access large growing ecosystem packages. Packages available transform Atom capable customizable IDE.","code":""},{"path":"shell.html","id":"shell","chapter":"32 Introduction to the system shell","heading":"32 Introduction to the system shell","text":"brief introduction commonly used shell commands.\nshell command line interface allowing access operating system’s services. Multiple different shells exist, popular probably bash (default Linux installations), zsh recently made default MacOS (bash previously). commands listed work similarly /shells.","code":""},{"path":"shell.html","id":"common-shell-commands","chapter":"32 Introduction to the system shell","heading":"32.1 Common shell commands","text":"first thing look new environment help system. shell, accessed man:man: Print manual pagespwd: Print working directory (directory currently )cd: Set working directory /path//dirmv: Move file /current/dir/ /new/dirmv: Rename file newfilenamecp: Make copy file currentPath altPathmkdir: Create new directory named ‘newdir’rmdir: Remove (.e. delete) uselessFilerm: Remove (.e. delete) uselessFilecat: Print contents file consoleuname: Get system informationwhoami: forget basics","code":"man manpwdcd /path/to/dirmv /current/dir/file /new/dirmv /current/dir/file /current/dir/newfilenamecp /currentPath/file /altPath/filemkdir /path/to/newdirrm /path/to/uselessFilecat /path/to/fileuname -awhoami"},{"path":"shell.html","id":"running-system-commands-within-r","chapter":"32 Introduction to the system shell","heading":"32.2 Running system commands within R","text":"can execute system command within R using system() command:","code":"\nsystem(\"uname -a\")"},{"path":"resources.html","id":"resources","chapter":"33 Resources","heading":"33 Resources","text":"","code":""},{"path":"resources.html","id":"r-project","chapter":"33 Resources","heading":"33.1 R Project","text":"R Manuals include number resources, including:Introduction RCRAN task views offer curated lists packages topic","code":""},{"path":"resources.html","id":"r-markdown","chapter":"33 Resources","heading":"33.2 R markdown","text":"R Markdown: Definitive Guide Yihui Xie, J. J. Allaire, Garrett Grolemundbookdown: Authoring Books Technical Documents R Markdown: make websites like one right now","code":""},{"path":"resources.html","id":"documentation","chapter":"33 Resources","heading":"33.3 Documentation","text":"Documentation roxygen2","code":""},{"path":"resources.html","id":"r-for-data-science","chapter":"33 Resources","heading":"33.4 R for data science","text":"R Programming Data Science Roger D. Peng, based mostly base R, also covers basics dplyr.R Data Science Hadley Wickham & Garrett Grolemund, based tidyverseData wrangling, exploration, analysis R","code":""},{"path":"resources.html","id":"graphics","chapter":"33 Resources","heading":"33.5 Graphics","text":"","code":""},{"path":"resources.html","id":"ggplot2-8","chapter":"33 Resources","heading":"33.5.1 ggplot2","text":"ggplot2","code":""},{"path":"resources.html","id":"plotly-2","chapter":"33 Resources","heading":"33.5.2 Plotly","text":"Plotly R APIInteractive web-based data visualization R, plotly, shiny","code":""},{"path":"resources.html","id":"advanced-r","chapter":"33 Resources","heading":"33.6 Advanced R","text":"Efficient R Programming Colin Gillespie & Robin LovelaceHigh performance functions Rcpp","code":""},{"path":"resources.html","id":"git-and-github","chapter":"33 Resources","heading":"33.7 Git and GitHub","text":"GitHub guidesPro Git Book Scott Chacon Ben Straub","code":""},{"path":"resources.html","id":"machine-learning","chapter":"33 Resources","heading":"33.8 Machine Learning","text":"Introduction Statistical Learning offers accessible view core learning algorithms, without math-heavy.Elements Statistical Learning offers deeper extensive view learning algorithms.Machine Learning rtemis","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]

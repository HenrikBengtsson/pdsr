# R packages

:::::: {.callout-note}
The evaluation of most code blocks in this page has been disabled to avoid either 
reinstalling packages or producing long output, which is why most code blocks
are not followed by any output.****
:::

### Install package from CRAN

The Comprehensive R Archive Network (CRAN) is the official R package repository 
and currently hosts [19930](https://cran.r-project.org/web/packages/index.html) packages (as of 2023-09-27). To install a package 
from CRAN, use the builtin `install.packages()` command:

```{r}
#| eval: false
install.packages("glmnet")
```

### List installed packages

List all R packages installed on your system with `installed.packages()`

```{r}
#| eval: false
installed.packages()
```

### Check installed package's version

```{r}
packageVersion("rtemis")
```

### List outdated packages

```{r}
#| eval: false
old.packages()
```

### Update installed packages

```{r}
#| eval: false
update.packages(ask = FALSE)
```

:::::: {.callout-tip}
We use the `ask = FALSE` argument to avoid being prompted before updating each package.
:::

### List **attached** packages

List attached packages with `search()`:

```{r}
search()
```

List attached packages with their system path:

```{r}
searchpaths()
```

## GitHub

GitHub contains a large number of R packages, some of which also exist in CRAN, 
but the GitHub version may be updated (a lot) more frequently. To install from 
GitHub, you need to have the `remotes` package from CRAN first:

```{r}
#| eval: false
install.packages("remotes")
```

```{r}
#| eval: false
remotes::install_github("user/repo")
```

Note: Running `remotes::install_github("user/repo")` will not reinstall a 
previously installed package, unless it has been updated.

## Bioconductor

[Bioconductor](https://www.bioconductor.org/) is a repository which includes 
tools for the analysis and comprehension of high-throughput genomic data, among 
others. To install packages from Bioconductor, first install the `BiocManager` 
package from CRAN. See Bioconductor's latest installation instructions 
[here](https://bioconductor.org/install/); learn more about BiocManager
[here](https://cran.r-project.org/web/packages/BiocManager/vignettes/BiocManager.html)

```{r}
#| eval: false
install.packages("BiocManager")
```

For R versions 4.2+, proceed by installing Bioconductor:

```{r}
#| eval: false
BiocManager::install(version = "3.15")
```

Now, you can use `BiocManager::install()` to install Bioconductor packages:

```{r}
#| eval: false
BiocManager::install("packageName")
```

## Installation from source

R packages may include only R code, or may also include code in other languages,
like C, C++, and Fortran, which need 
[compilation](https://en.wikipedia.org/wiki/Compiler){target="_blank"}. All CRAN packages 
are available in binary format for all supported operating systems. However, if you want 
to install a newer or development version that is not yet available in binary format, R 
can compile and install the package for you, provided the appropriate compiler is
installed on your system.

If you need to install compiler tools for your system, follow the instructions:

- [macOS tools](https://mac.r-project.org/tools/)
- [Windows Rtools](https://cloud.r-project.org/bin/windows/Rtools/)
- Linux: use your systems package manager to install `gcc`

## Dependencies

Most R packages, whether in CRAN, Bioconductor, or GitHub, themselves rely on 
other packages to run. These are called **dependencies**. Many of these 
dependencies get installed automatically when you call `install.packages()` or 
`remotes::install_github()`, etc. This depends largely on whether they are 
essential for the new package to work. Some packages, especially if they 
provide a large number of functions that may not all be used by all users, may 
make some dependencies optional. In that cases, if you try to execute a 
specific function that depends on uninstalled packages you may get a warning or 
error or some type of message indicating that you need to install further 
packages.

## Project-level dependency management

Advanced users may benefit from using a project-level set of dependencies that 
can be saved, recalled, and updated at will. The 
[`renv`](https://github.com/rstudio/renv/) package is the latest approach to 
providing such functionality. Follow the introduction vignette 
[here](https://rstudio.github.io/renv/articles/renv.html).

## Builtin Documentation

After you've successfully installed R and RStudio, one of the first things to 
know is how to access and search the builtin documentation.  

### Get help on a specific item

If you know the name of what you're looking for (an R function most commonly, 
but possibly also the name of a dataset, or a package itself), just type `?` 
followed by the name of said function, dataset, etc. in the R prompt:

```{r}
#| eval: false
?sample
```

In RStudio, the above example will bring up the documentation for the `sample` 
function in the dedicated "Help" window, commonly situated at the bottom right 
(but can be moved by the user freely). If you are running R directly at the 
system shell, the same information is printed directly at the console.  
Try running the above example on your system.

### Search the docs

If you do not know the name of what you are looking for, you can use double 
question marks, `??`, followed by your query (this is short for the 
`help.search` command that provides a number of arguments you can look up 
using `?help.search`):

```{r}
#| eval: false
??bootstrap
```

## R datasets

### Datasets included with R

List built-in datasets with `data()` and no arguments:

```{r}
#| eval: false
data()
```

These built-in datasets are normally readily available in the R console 
because the **datasets** package is automatically loaded at startup. You can 
list all loaded packages with `search()`

```{r}
search()
```

### Datasets included with other packages

Many R packages come with included datasets. If available, we can list them
using the `package` argument of `data()`:

```{r}
#| eval: false
data(package = "glmnet")
data(package = "MASS")
data(package = "mlbench")
```

To load such a dataset:

```{r}
data(Sonar, package = "mlbench")
```

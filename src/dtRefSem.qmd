# Reference semantics

Many users new to programming may not have encountered 
[reference semantics](https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_reference) before.
<br><br>
This chapter briefly demonstrates how data.table objecs are edited in-place.

```{r}
library(data.table)
```

## Get object's location in memory with `address()`

When you add a new column to an existing data.frame, the data.frame is copied 
behind the scenes - you can tell becasue its memory address (where it's 
physically stored in your computer) changes:

```{r}
df1 <- data.frame(alpha = 1:5, beta = 11:15)
address(df1)
df1$gamma <- df1$alpha + df1$beta
address(df1)
```

When you add a new column in a data.table ***in-place***, the data.table
object's address remains unchanged:

```{r}
dt1 <- data.table(alpha = 1:5, beta = 11:15)
address(dt1)
dt1[, gamma := alpha + beta]
address(dt1)
```

### Reference semantics at work

Up to now, you are likely used to working with regular R objects that behave 
like this:

```{r}
df1 <- data.frame(a = rep(1, 5))
df1
df2 <- df1
df2
df2$a <- df2$a*2
df2
df1
address(df1)
address(df2)
```

`data.table` uses "reference semantics" or "pass-by-reference". Be careful 
or you might get confused:

```{r}
dt1 <- data.table(a = rep(1, 5))
dt1
dt2 <- dt1
dt2
dt2[, a := a * 2]
dt2
dt1
address(dt1)
address(dt2)
```

```{block, type="rmdnote"}
If you want to create a copy of a data.table, use `copy()`:
```

```{r}
dt3 <- copy(dt1)
dt3
address(dt3)
dt3[, a := a * 2]
dt3
dt1
```

## See also

- [data.table Reference Semantics](https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reference-semantics.html)

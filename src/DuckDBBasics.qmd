# DuckDB Basics {#sec-duckdbbasics}

::: callout-note
This section is a work in progress.
:::

```{r}
library(duckdb)
library(dbplyr)
```

## Installation

```{r}
#| eval: false
install.packages("duckdb")
```

## DuckDB API

DuckDB uses the R Database Interface 
([DBI](https://cran.r-project.org/web/packages/DBI/index.html)). Learn more about using
DBI [here](https://solutions.posit.co/connections/db/r-packages/dbi/).

## Setup Connection

By default, `duckdb()`'s `dbdir` argument defaults to `DBDIR_MEMORY`, which
creates a non-persistent, in-memory object.

```{r}
con <- dbConnect(duckdb::duckdb())
```

## Settings

```{r}
dbExecute(con, "PRAGMA enable_progress_bar;")
```

## Read CSV

You can directly read into data.frame, which may be best for smaller datasets:

```{r}
ir <- dbGetQuery(con, 
    "SELECT * FROM read_csv_auto('./iris.csv');"
)
head(ir)
```

For larger datasets, you can create a DuckDB table that can be queried without loading
the dataset into memory:

```{r}
dbExecute(con,
    "CREATE TABLE iris AS SELECT * FROM './iris.csv';"
)
```

### List tables

```{r}
dbGetQuery(con, "PRAGMA show_tables;")
```

Using the R API:

```{r}
dbListTables(con)
```


## Filter

```{r}
dbGetQuery(con,
    "SELECT * FROM iris WHERE Species in ('setosa', 'versicolor')") |> head()
```

```{r}
dbExecute(con,
    "
    CREATE TABLE ir AS SELECT * FROM 
    read_csv_auto('/Users/egenn/icloud/Data/iris.csv', 
    delim=',', header=True);
    "
)
```

### Fetch data to data.frame

```{r}
ir = dbGetQuery(con, "SELECT * from iris")
head(ir)
```

```{r}
class(ir)
```

### Fetch data to data.table:

```{r}
ir = dbGetQuery(con, "SELECT * from iris")
```

```{r}
class(ir)
head(ir)
```

## Close connection

When you are done working with the database, you should close the connection:

```{r}
dbDisconnect(con)
```

## Resources

- [DuckDB CSV](https://duckdb.org/docs/data/csv)

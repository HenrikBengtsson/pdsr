{
  "hash": "4a9bdecc2e9ae7bfa4e6cc60e7f7568b",
  "result": {
    "markdown": "---\nexecute:\n  cache: true\nknitr:\n  opts_chunk: \n    comment: ''\n---\n\n# Aggregate {#sec-aggregate}\n\nR includes a number of commands to apply functions on splits of your data.\n`aggregate()` is a powerful tools to perform such \"group-by\" operations.\n<br><br>\nThe function accepts either:\n\n- a formula as the first argument and a data.frame passed to the `data` argument\n- an R objects (vector, data.frame, list) as the first argument and one or more factors passed to the `by` argument \n\nWe shall see how to perform each operation below with \neach approach. \n<br><br>\nThe formula interface might be easier to work with \ninteractively on the console. \nNote that while you *can* programmatically create a formula, it is easier to use\nvector inputs when calling `aggregate()` programmatically. \n<br><br>\nFor this example, we shall use the penguin data from the **palmerpenguins**\npackage:\n\n\n::: {.cell hash='Aggregate_cache/html/unnamed-chunk-1_191cbfed09fc059bf8612454c66cd32f'}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nstr(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [344 Ã— 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n```\n:::\n:::\n\n\nSee example below for 1 or multiple variables by 1 or more groups using either \nthe formula interface, or working directly on objects with `$`-indexing or \nusing `with()`:\n\n## Single variable by single grouping\n\nNote that the formula method defaults to na.action = na.omit\n\nUsing the formula interface:\n\n\n::: {.cell hash='Aggregate_cache/html/unnamed-chunk-2_f4a54f239dc0a112a077d8ca6dcbc52a'}\n\n```{.r .cell-code}\naggregate(bill_length_mm ~ species,\n          data = penguins,\n          mean, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    species bill_length_mm\n1    Adelie       38.79139\n2 Chinstrap       48.83382\n3    Gentoo       47.50488\n```\n:::\n:::\n\n\nUsing R objects directly:\n\n\n::: {.cell hash='Aggregate_cache/html/unnamed-chunk-3_10245913f06578650d727269284a5743'}\n\n```{.r .cell-code}\naggregate(penguins$bill_length_mm,\n          by = list(penguins$species),\n          mean, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Group.1        x\n1    Adelie 38.79139\n2 Chinstrap 48.83382\n3    Gentoo 47.50488\n```\n:::\n:::\n\n\nNote that, unlike the formula notation, if your input is a vector which is\nunnamed, the output columns are also unnamed.\n\nIf instead of passing a vector, you pass a data.frame or list with one or more\nnamed elements, the output includes the names:\n\n\n::: {.cell hash='Aggregate_cache/html/unnamed-chunk-4_7b97f81d12b2bd606af9e3aa26ef5a6a'}\n\n```{.r .cell-code}\naggregate(penguins[\"bill_length_mm\"],\n          by = penguins[\"species\"],\n          mean, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    species bill_length_mm\n1    Adelie       38.79139\n2 Chinstrap       48.83382\n3    Gentoo       47.50488\n```\n:::\n:::\n\n\nBy creating a list instead of indexing the given data.frame also allows you to \nset custom names:\n\n\n::: {.cell hash='Aggregate_cache/html/unnamed-chunk-5_7600e40011bd4e987e127e37386fe3ee'}\n\n```{.r .cell-code}\naggregate(list(`Bill length` = penguins$bill_length_mm),\n          by = list(Species = penguins$species),\n          mean, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Species Bill.length\n1    Adelie    38.79139\n2 Chinstrap    48.83382\n3    Gentoo    47.50488\n```\n:::\n:::\n\n\n## Multiple variables by single grouping\n\nFormula notation:\n\n\n::: {.cell hash='Aggregate_cache/html/unnamed-chunk-6_ac15e13962b94e77d225e98d17ceb179'}\n\n```{.r .cell-code}\naggregate(cbind(bill_length_mm, flipper_length_mm) ~ species,\n          data = penguins,\n          mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    species bill_length_mm flipper_length_mm\n1    Adelie       38.79139          189.9536\n2 Chinstrap       48.83382          195.8235\n3    Gentoo       47.50488          217.1870\n```\n:::\n:::\n\n\nObjects:\n\n\n::: {.cell hash='Aggregate_cache/html/unnamed-chunk-7_aeea276186a84d05a248d189f3e3abe3'}\n\n```{.r .cell-code}\naggregate(penguins[, c(\"bill_length_mm\", \"flipper_length_mm\")],\n          by = list(Species = penguins$species),\n          mean, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Species bill_length_mm flipper_length_mm\n1    Adelie       38.79139          189.9536\n2 Chinstrap       48.83382          195.8235\n3    Gentoo       47.50488          217.1870\n```\n:::\n:::\n\n\n## Single variable by multiple groups\n\nFormula notation:\n\n\n::: {.cell hash='Aggregate_cache/html/unnamed-chunk-8_e80e145a9f234f822e3beadb3a27fd8e'}\n\n```{.r .cell-code}\naggregate(bill_length_mm ~ species + island, data = penguins, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    species    island bill_length_mm\n1    Adelie    Biscoe       38.97500\n2    Gentoo    Biscoe       47.50488\n3    Adelie     Dream       38.50179\n4 Chinstrap     Dream       48.83382\n5    Adelie Torgersen       38.95098\n```\n:::\n:::\n\n\nObjects:\n\n\n::: {.cell hash='Aggregate_cache/html/unnamed-chunk-9_041553287450e44e5aa2899d18ecd160'}\n\n```{.r .cell-code}\naggregate(penguins[\"bill_length_mm\"],\n          by = list(Species = penguins$species, \n                    Island = penguins$island),\n          mean, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Species    Island bill_length_mm\n1    Adelie    Biscoe       38.97500\n2    Gentoo    Biscoe       47.50488\n3    Adelie     Dream       38.50179\n4 Chinstrap     Dream       48.83382\n5    Adelie Torgersen       38.95098\n```\n:::\n:::\n\n\n## Multiple variables by multiple groupings\n\nFormula notation:\n\n\n::: {.cell hash='Aggregate_cache/html/unnamed-chunk-10_67c2103da28ebe1f784d46ab4a9a0e22'}\n\n```{.r .cell-code}\naggregate(cbind(bill_length_mm, flipper_length_mm) ~ species + island,\n          data = penguins, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    species    island bill_length_mm flipper_length_mm\n1    Adelie    Biscoe       38.97500          188.7955\n2    Gentoo    Biscoe       47.50488          217.1870\n3    Adelie     Dream       38.50179          189.7321\n4 Chinstrap     Dream       48.83382          195.8235\n5    Adelie Torgersen       38.95098          191.1961\n```\n:::\n:::\n\n\nObjects:\n\n\n::: {.cell hash='Aggregate_cache/html/unnamed-chunk-11_37e12dfb0eb360993fcbd576bc29c3ee'}\n\n```{.r .cell-code}\naggregate(penguins[, c(\"bill_length_mm\", \"flipper_length_mm\")],\n          by = list(Species = penguins$species, \n                    Island = penguins$island),\n          mean, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Species    Island bill_length_mm flipper_length_mm\n1    Adelie    Biscoe       38.97500          188.7955\n2    Gentoo    Biscoe       47.50488          217.1870\n3    Adelie     Dream       38.50179          189.7321\n4 Chinstrap     Dream       48.83382          195.8235\n5    Adelie Torgersen       38.95098          191.1961\n```\n:::\n:::\n\n\n## Using `with()`\n\nR allows you to use `with(data, expression)`, where data can be a data.frame,\nlist or environment, and within the expression refer to any elements of `data`\nby their name, without the need to index `data` each time.\n\nFor example, `with(df, expression)` means you can use the data.frame's\ncolumn names directly within the expression without the need to use `df$column`:\n\n\n::: {.cell hash='Aggregate_cache/html/unnamed-chunk-12_e2940cea6a66998e59426b83d30f2023'}\n\n```{.r .cell-code}\nwith(penguins,\n     aggregate(list(`Bill length` = bill_length_mm),\n               by = list(Species = species),\n               mean, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Species Bill.length\n1    Adelie    38.79139\n2 Chinstrap    48.83382\n3    Gentoo    47.50488\n```\n:::\n:::\n\n\n## See also\n\n- [`tapply()`](LoopFunctions.qmd#tapply) for an alternative methods of applying function on \nsubsets of a single variable (probably faster).\n- For large datasets, it is recommended to use [data.table](DataTable.qmd) for \nfast group-by data summarization.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
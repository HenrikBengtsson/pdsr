{
  "hash": "388a00d7970eb21bcbaf4b96cc6c9dab",
  "result": {
    "markdown": "---\nknitr:\n  opts_chunk:\n    comment: \"\"\n---\n\n# Reshape {#sec-dtreshape}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\n```\n:::\n\n\n## Long to wide using `dcast()` {#dcast}\n\n### Example 1: key-value pairs\n\nUsing the same example seen in @sec-dfreshape:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_long <- data.frame(\n    Account_ID = c(8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004, \n            8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004), \n    Age = c(67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671, 67.8017038366664, 42.9198507293701, \n            46.2301756642422, 39.665983196671, 67.8017038366664, \n            42.9198507293701, 46.2301756642422, 39.665983196671, \n            67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671), \n    Admission = c(\"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\", \"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\"), \n    Lab_key = c(\"RBC\", \"RBC\", \"RBC\", \"RBC\", \"WBC\", \"WBC\", \"WBC\", \"WBC\", \n            \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \n            \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\"), \n    Lab_value = c(4.63449321082268, 3.34968550627897, 4.27037213597765, \n            4.93897736897793, 8374.22887757195, 7612.37380499927, \n            8759.27855519425, 6972.28096216548, 36.272693147236, \n            40.5716317809522, 39.9888624177955, 39.8786884058422, \n            12.6188444991545, 12.1739747363806, 15.1293426442183, \n            14.8885696185238)\n)\ndat_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Account_ID      Age Admission    Lab_key   Lab_value\n1        8001 67.80170        ED        RBC    4.634493\n2        8002 42.91985   Planned        RBC    3.349686\n3        8003 46.23018   Planned        RBC    4.270372\n4        8004 39.66598        ED        RBC    4.938977\n5        8001 67.80170        ED        WBC 8374.228878\n6        8002 42.91985   Planned        WBC 7612.373805\n7        8003 46.23018   Planned        WBC 8759.278555\n8        8004 39.66598        ED        WBC 6972.280962\n9        8001 67.80170        ED Hematocrit   36.272693\n10       8002 42.91985   Planned Hematocrit   40.571632\n11       8003 46.23018   Planned Hematocrit   39.988862\n12       8004 39.66598        ED Hematocrit   39.878688\n13       8001 67.80170        ED Hemoglobin   12.618844\n14       8002 42.91985   Planned Hemoglobin   12.173975\n15       8003 46.23018   Planned Hemoglobin   15.129343\n16       8004 39.66598        ED Hemoglobin   14.888570\n```\n\n\n:::\n:::\n\n\n`data.table`'s long to wide procedure is defined with a convenient formula \nnotation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_long_dt <- as.data.table(dat_long)\ndat_long2wide_dt <- dcast(dat_long_dt,\n                          Account_ID + Age + Admission ~ Lab_key,\n                          value.var = \"Lab_value\")\ndat_long2wide_dt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <Account_ID, Age, Admission>\n   Account_ID      Age Admission Hematocrit Hemoglobin      RBC      WBC\n        <num>    <num>    <char>      <num>      <num>    <num>    <num>\n1:       8001 67.80170        ED   36.27269   12.61884 4.634493 8374.229\n2:       8002 42.91985   Planned   40.57163   12.17397 3.349686 7612.374\n3:       8003 46.23018   Planned   39.98886   15.12934 4.270372 8759.279\n4:       8004 39.66598        ED   39.87869   14.88857 4.938977 6972.281\n```\n\n\n:::\n:::\n\n\nInstead of listing all variables you can use `...`, which corresponds to all\nvariables not otherwise mentioned in the formula or in `value.var`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndcast(dat_long_dt,\n      ... ~ Lab_key,\n      value.var = \"Lab_value\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <Account_ID, Age, Admission>\n   Account_ID      Age Admission Hematocrit Hemoglobin      RBC      WBC\n        <num>    <num>    <char>      <num>      <num>    <num>    <num>\n1:       8001 67.80170        ED   36.27269   12.61884 4.634493 8374.229\n2:       8002 42.91985   Planned   40.57163   12.17397 3.349686 7612.374\n3:       8003 46.23018   Planned   39.98886   15.12934 4.270372 8759.279\n4:       8004 39.66598        ED   39.87869   14.88857 4.938977 6972.281\n```\n\n\n:::\n:::\n\n\n### Example 2: Timepoints\n\nAnother simple synthetic dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt_long <- structure(list(\n        ID = c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, \n        3L, 4L), \n        Timepoint = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, \n        2L, 3L, 3L, 3L, 3L), levels = c(\"Timepoint_A\", \"Timepoint_B\", \n        \"Timepoint_C\"), class = \"factor\"), \n        Score = c(11L, 12L, 13L, 14L, \n        21L, 22L, 23L, 24L, 51L, 52L, 53L, 54L)), \n        row.names = c(NA, -12L\n        ), class = \"data.frame\")\ndt_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ID   Timepoint Score\n1   1 Timepoint_A    11\n2   2 Timepoint_A    12\n3   3 Timepoint_A    13\n4   4 Timepoint_A    14\n5   1 Timepoint_B    21\n6   2 Timepoint_B    22\n7   3 Timepoint_B    23\n8   4 Timepoint_B    24\n9   1 Timepoint_C    51\n10  2 Timepoint_C    52\n11  3 Timepoint_C    53\n12  4 Timepoint_C    54\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndt_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ID   Timepoint Score\n1   1 Timepoint_A    11\n2   2 Timepoint_A    12\n3   3 Timepoint_A    13\n4   4 Timepoint_A    14\n5   1 Timepoint_B    21\n6   2 Timepoint_B    22\n7   3 Timepoint_B    23\n8   4 Timepoint_B    24\n9   1 Timepoint_C    51\n10  2 Timepoint_C    52\n11  3 Timepoint_C    53\n12  4 Timepoint_C    54\n```\n\n\n:::\n\n```{.r .cell-code}\ndcast(dt_long, ID ~ Timepoint,\n      value.var = \"Score\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The dcast generic in data.table has been passed a data.frame and will\nattempt to redirect to the relevant reshape2 method; please note that reshape2\nis superseded and is no longer actively developed, and this redirection is now\ndeprecated. Please do this redirection yourself like reshape2::dcast(dt_long).\nIn the next version, this warning will become an error.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID Timepoint_A Timepoint_B Timepoint_C\n1  1          11          21          51\n2  2          12          22          52\n3  3          13          23          53\n4  4          14          24          54\n```\n\n\n:::\n:::\n\n\n### `dcast()` + aggregate\n\nIf your `ID ~ Timepoint` combination does not define a unique row in your input \ndataset, you need to specify an aggregate function.\n\nFor example, suppose you have four subjects with IDs \"A\", \"B\", \"C\", \"D\" who had \na couple variables measured 3 times in the AM and 3 times in the PM.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt_long2 <- data.table(ID = rep(LETTERS[1:4], each = 6),\n                      Timepoint = rep(c(\"AM\", \"PM\"), length.out = 24, each = 3),\n                      Var1 = rnorm(24, 10),\n                      Var2 = rnorm(24, 20))\n\ndt_long2[sample(24, 4), Var1 := NA]\ndt_long2[sample(24, 4), Var2 := NA]\ndt_long2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        ID Timepoint      Var1     Var2\n    <char>    <char>     <num>    <num>\n 1:      A        AM 11.700699 19.73547\n 2:      A        AM  9.636792       NA\n 3:      A        AM        NA 21.43155\n 4:      A        PM  9.748017       NA\n 5:      A        PM        NA 19.21485\n 6:      A        PM        NA 22.34282\n 7:      B        AM        NA 19.37892\n 8:      B        AM 10.874409 19.89124\n 9:      B        AM  9.701317 20.32028\n10:      B        PM 13.512149       NA\n11:      B        PM 10.521913 19.89364\n12:      B        PM  8.953764 20.94527\n13:      C        AM 10.386334 20.86742\n14:      C        AM 11.336933 18.91612\n15:      C        AM  8.413131 20.35239\n16:      C        PM  9.445950 19.44580\n17:      C        PM 10.821425 20.53375\n18:      C        PM 10.787503 20.53759\n19:      D        AM 11.544834 20.76276\n20:      D        AM 10.065428 18.58194\n21:      D        AM 10.691221 20.24168\n22:      D        PM  9.798344 19.54936\n23:      D        PM  8.871991 19.73983\n24:      D        PM 12.541109       NA\n        ID Timepoint      Var1     Var2\n```\n\n\n:::\n:::\n\n\nIf you wanted to convert the above data.table to wide format and get mean AM \nand PM values using the `fun.aggregate` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndcast(dt_long2,\n      ID ~ Timepoint,\n      value.var = c(\"Var1\", \"Var2\"),\n      fun.aggregate = mean, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <ID>\n       ID  Var1_AM   Var1_PM  Var2_AM  Var2_PM\n   <char>    <num>     <num>    <num>    <num>\n1:      A 10.66875  9.748017 20.58351 20.77883\n2:      B 10.28786 10.995942 19.86348 20.41946\n3:      C 10.04547 10.351626 20.04531 20.17238\n4:      D 10.76716 10.403815 19.86213 19.64460\n```\n\n\n:::\n:::\n\n\nYou can apply multiple aggregating functions by passing a list to \n`fun.aggregate`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndcast(dt_long2,\n      ID ~ Timepoint,\n      value.var = c(\"Var1\", \"Var2\"),\n      fun.aggregate = list(mean, max, min), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <ID>\n       ID Var1_mean_AM Var1_mean_PM Var2_mean_AM Var2_mean_PM Var1_max_AM\n   <char>        <num>        <num>        <num>        <num>       <num>\n1:      A     10.66875     9.748017     20.58351     20.77883    11.70070\n2:      B     10.28786    10.995942     19.86348     20.41946    10.87441\n3:      C     10.04547    10.351626     20.04531     20.17238    11.33693\n4:      D     10.76716    10.403815     19.86213     19.64460    11.54483\n   Var1_max_PM Var2_max_AM Var2_max_PM Var1_min_AM Var1_min_PM Var2_min_AM\n         <num>       <num>       <num>       <num>       <num>       <num>\n1:    9.748017    21.43155    22.34282    9.636792    9.748017    19.73547\n2:   13.512149    20.32028    20.94527    9.701317    8.953764    19.37892\n3:   10.821425    20.86742    20.53759    8.413131    9.445950    18.91612\n4:   12.541109    20.76276    19.73983   10.065428    8.871991    18.58194\n   Var2_min_PM\n         <num>\n1:    19.21485\n2:    19.89364\n3:    19.44580\n4:    19.54936\n```\n\n\n:::\n:::\n\n\nNote how `na.rm = TRUE` was successfully applied to all aggregating functions\n\n\n## Wide to long: `melt()` {#melt}\n\n### Example 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt_wide <- data.table(ID = 1:4, Timepoint_A = 11:14,\n                      Timepoint_B = 21:24, Timepoint_C = 51:54)\ndt_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      ID Timepoint_A Timepoint_B Timepoint_C\n   <int>       <int>       <int>       <int>\n1:     1          11          21          51\n2:     2          12          22          52\n3:     3          13          23          53\n4:     4          14          24          54\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndt_long <- melt(dt_wide, id.vars = \"ID\",\n                measure.vars = 2:4, # defaults to all non-id columns\n                variable.name = \"Timepoint\",\n                value.name = c(\"Score\"))\ndt_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       ID   Timepoint Score\n    <int>      <fctr> <int>\n 1:     1 Timepoint_A    11\n 2:     2 Timepoint_A    12\n 3:     3 Timepoint_A    13\n 4:     4 Timepoint_A    14\n 5:     1 Timepoint_B    21\n 6:     2 Timepoint_B    22\n 7:     3 Timepoint_B    23\n 8:     4 Timepoint_B    24\n 9:     1 Timepoint_C    51\n10:     2 Timepoint_C    52\n11:     3 Timepoint_C    53\n12:     4 Timepoint_C    54\n```\n\n\n:::\n:::\n\n\n### Example 2\n\nUsing the same synthetic data as in @sec-dfreshape:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_wide_dt <- data.table(Account_ID = c(8001, 8002, 8003, 8004),\n                       Age = rnorm(4, 57, 12),\n                       RBC = rnorm(4, 4.8, .5),\n                       WBC = rnorm(4, 7250, 1500),\n                       Hematocrit = rnorm(4, 40.2, 4),\n                       Hemoglobin = rnorm(4, 13.6, 1.5),\n                       Admission = sample(c(\"ED\", \"Planned\"), 4, replace = TRUE))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_wide2long_dt <- melt(dat_wide_dt,\n                         id.vars = c(1:2, 7),\n                         measure.vars = 3:6,\n                         variable.name = \"Lab_key\",\n                         value.name = \"Lab_value\")\ndat_wide2long_dt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Account_ID      Age Admission    Lab_key   Lab_value\n         <num>    <num>    <char>     <fctr>       <num>\n 1:       8001 65.31384        ED        RBC    4.624892\n 2:       8002 58.73448        ED        RBC    4.083739\n 3:       8003 46.84775        ED        RBC    4.643135\n 4:       8004 43.68768   Planned        RBC    4.412858\n 5:       8001 65.31384        ED        WBC 5803.429786\n 6:       8002 58.73448        ED        WBC 4580.125068\n 7:       8003 46.84775        ED        WBC 5245.302895\n 8:       8004 43.68768   Planned        WBC 6118.077265\n 9:       8001 65.31384        ED Hematocrit   38.580719\n10:       8002 58.73448        ED Hematocrit   43.700244\n11:       8003 46.84775        ED Hematocrit   42.809218\n12:       8004 43.68768   Planned Hematocrit   36.973385\n13:       8001 65.31384        ED Hemoglobin   13.322285\n14:       8002 58.73448        ED Hemoglobin   14.366173\n15:       8003 46.84775        ED Hemoglobin   11.419866\n16:       8004 43.68768   Planned Hemoglobin   12.348715\n```\n\n\n:::\n:::\n\n\nIf desired, you can set the ID column as they key, which will sort the\ndata.table by its values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetorder(dat_wide2long_dt, \"Account_ID\")\ndat_wide2long_dt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Account_ID      Age Admission    Lab_key   Lab_value\n         <num>    <num>    <char>     <fctr>       <num>\n 1:       8001 65.31384        ED        RBC    4.624892\n 2:       8001 65.31384        ED        WBC 5803.429786\n 3:       8001 65.31384        ED Hematocrit   38.580719\n 4:       8001 65.31384        ED Hemoglobin   13.322285\n 5:       8002 58.73448        ED        RBC    4.083739\n 6:       8002 58.73448        ED        WBC 4580.125068\n 7:       8002 58.73448        ED Hematocrit   43.700244\n 8:       8002 58.73448        ED Hemoglobin   14.366173\n 9:       8003 46.84775        ED        RBC    4.643135\n10:       8003 46.84775        ED        WBC 5245.302895\n11:       8003 46.84775        ED Hematocrit   42.809218\n12:       8003 46.84775        ED Hemoglobin   11.419866\n13:       8004 43.68768   Planned        RBC    4.412858\n14:       8004 43.68768   Planned        WBC 6118.077265\n15:       8004 43.68768   Planned Hematocrit   36.973385\n16:       8004 43.68768   Planned Hemoglobin   12.348715\n```\n\n\n:::\n:::\n\n\n## Resources\n\n- [Efficient reshaping using data.tables](https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reshape.html)\n\n## See also\n\n- [base reshape](#sec-dfreshape)\n- [tidyr reshape](#sec-tidyrreshape)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "51d161b66f474367e4403292068baadf",
  "result": {
    "markdown": "---\nknitr:\n  opts_chunk:\n    comment: \"\"\n---\n\n# Working with Data Frames {#sec-dfbasics}\n\nSee the [data frame section](#dataframestruc) for an introduction to data\nframes.\n\n## Indexing \n\nSee [data.frame indexing](#indexdfs).\n\n## Column and row names\n\nLet's start with a simple example data.frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(PID = 111:119,\n                 Hospital = c(\"UCSF\", \"HUP\", \"Stanford\",\n                              \"Stanford\", \"UCSF\", \"HUP\", \n                              \"HUP\", \"Stanford\", \"UCSF\"),\n                 Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),\n                 Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  PID Hospital Age Sex\n1 111     UCSF  22   1\n2 112      HUP  34   1\n3 113 Stanford  41   0\n4 114 Stanford  19   1\n5 115     UCSF  53   0\n6 116      HUP  21   0\n7 117      HUP  63   1\n8 118 Stanford  22   0\n9 119     UCSF  19   0\n```\n:::\n:::\n\n\nThe optional `row.names` argument (see `data.frame` usage in the R \ndocumentation) can be used to define row names at the time of the data frame \ncreation. It accepts either:\n\n- a single integer or a character specifying a column of the data.frame being \ncreated whose values should be used as row names, or \n- a vector of values (character or integer) of the row names to be used.\n\nFor example, we can use the \"PID\" column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(PID = 111:119,\n                 Hospital = c(\"UCSF\", \"HUP\", \"Stanford\",\n                              \"Stanford\", \"UCSF\", \"HUP\", \n                              \"HUP\", \"Stanford\", \"UCSF\"),\n                 Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),\n                 Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0),\n                 row.names = \"PID\")\n```\n:::\n\n\n:::{.callout-note}\nIt is recommended to **not** use/depend on row names to identify or index \ndata.frames, and instead include a column of case IDs.\n:::\n\nWe can get column names and row names with `colnames()` and `rownames()`, \nrespectively:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hospital\" \"Age\"      \"Sex\"     \n```\n:::\n\n```{.r .cell-code}\nrownames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"111\" \"112\" \"113\" \"114\" \"115\" \"116\" \"117\" \"118\" \"119\"\n```\n:::\n:::\n\n\nTo set new column or row names use the form:\n\n`colnames(df) <- new.colnames` \n\n`rownames(df) <- new.rownames` \n\nwhere `new.colnames` and `new.rownames` is a character vector.\n\nYou can rename all columns/rows or use indexing to replace specific names.\n\nFor example, to rename all rows, do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(df) <- paste0(\"Patient_\", 1:9)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Hospital Age Sex\nPatient_1     UCSF  22   1\nPatient_2      HUP  34   1\nPatient_3 Stanford  41   0\nPatient_4 Stanford  19   1\nPatient_5     UCSF  53   0\nPatient_6      HUP  21   0\nPatient_7      HUP  63   1\nPatient_8 Stanford  22   0\nPatient_9     UCSF  19   0\n```\n:::\n:::\n\n\nTo rename the first two columns, do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)[1:2] <- c(\"Center\", \"Age_at_Dx\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Center Age_at_Dx Sex\nPatient_1     UCSF        22   1\nPatient_2      HUP        34   1\nPatient_3 Stanford        41   0\nPatient_4 Stanford        19   1\nPatient_5     UCSF        53   0\nPatient_6      HUP        21   0\nPatient_7      HUP        63   1\nPatient_8 Stanford        22   0\nPatient_9     UCSF        19   0\n```\n:::\n:::\n\n\n## Delete columns or rows\n\nTo delete a data.frame column, set it to [NULL](#replacing-with-null):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$Sex <- NULL\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Center Age_at_Dx\nPatient_1     UCSF        22\nPatient_2      HUP        34\nPatient_3 Stanford        41\nPatient_4 Stanford        19\nPatient_5     UCSF        53\nPatient_6      HUP        21\nPatient_7      HUP        63\nPatient_8 Stanford        22\nPatient_9     UCSF        19\n```\n:::\n:::\n\n\nTo delete a data.frame row, you can \"index it out\".  \n\nFor example, to remove the third and fifths rows of the above data.frame using \nan integer index:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df[-c(3, 5), ]\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Center Age_at_Dx\nPatient_1     UCSF        22\nPatient_2      HUP        34\nPatient_4 Stanford        19\nPatient_6      HUP        21\nPatient_7      HUP        63\nPatient_8 Stanford        22\nPatient_9     UCSF        19\n```\n:::\n:::\n\n\nYou can similarly exclude a row using a logical index. Logical indexing occurs \nusually following some filtering condition. \n\nFor example, to exclude patients under 20 years old, do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df[!df$Age < 20, ]\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Center Age_at_Dx\nPatient_1     UCSF        22\nPatient_2      HUP        34\nPatient_6      HUP        21\nPatient_7      HUP        63\nPatient_8 Stanford        22\n```\n:::\n:::\n\n\n## `subset()`\n\n`subset()` allows you to: \n\n- **filter** cases that meet certain conditions using the `subset` argument\n- **select** columns using the `select` argument  \n\n`head()` returns the first few lines of a data frame. We use it to avoid \nprinting too many lines, e.g.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n\n```{.r .cell-code}\niris_sl.gt.med <- subset(iris, Sepal.Length > median(Sepal.Length))\n```\n:::\n\n\nNote: You can use the column name Sepal.Length directly, i.e. unquoted and you \ndon't need to use `iris$Sepal.Length`.\n\nThis is called Non-Standard Evaluation (NSE).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- data.frame(one = 1:10,\n                two = rnorm(10),\n                group = c(rep(\"alpha\", 4),  rep(\"beta\", 6)))\nsubset(x, subset = two > 0, select = two)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         two\n4  0.9842631\n6  0.5547768\n7  0.8587701\n9  1.2465142\n10 1.4301925\n```\n:::\n\n```{.r .cell-code}\nsubset(x, two > 0, -one)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         two group\n4  0.9842631 alpha\n6  0.5547768  beta\n7  0.8587701  beta\n9  1.2465142  beta\n10 1.4301925  beta\n```\n:::\n\n```{.r .cell-code}\nsubset(x, two > 0, two:one)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         two one\n4  0.9842631   4\n6  0.5547768   6\n7  0.8587701   7\n9  1.2465142   9\n10 1.4301925  10\n```\n:::\n\n```{.r .cell-code}\nsubset(x, two > 0, two:group)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         two group\n4  0.9842631 alpha\n6  0.5547768  beta\n7  0.8587701  beta\n9  1.2465142  beta\n10 1.4301925  beta\n```\n:::\n:::\n\n\n## `split()`\n\nSplit a data frame into multiple data frames by groups defined by a factor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_by_group <- split(x, x$group)\nx_by_group\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$alpha\n  one         two group\n1   1 -0.03893295 alpha\n2   2 -0.54606590 alpha\n3   3 -0.54834731 alpha\n4   4  0.98426313 alpha\n\n$beta\n   one        two group\n5    5 -2.6456388  beta\n6    6  0.5547768  beta\n7    7  0.8587701  beta\n8    8 -0.5145586  beta\n9    9  1.2465142  beta\n10  10  1.4301925  beta\n```\n:::\n:::\n\n\n## `with()`\n\nWithin a `with()` expression, you can access list elements or data.frame \ncolumns without quoting or using the `$` operator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwith(x, one + two)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0.9610671  1.4539341  2.4516527  4.9842631  2.3543612  6.5547768\n [7]  7.8587701  7.4854414 10.2465142 11.4301925\n```\n:::\n\n```{.r .cell-code}\nwith(x, x[group == \"alpha\", ])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  one         two group\n1   1 -0.03893295 alpha\n2   2 -0.54606590 alpha\n3   3 -0.54834731 alpha\n4   4  0.98426313 alpha\n```\n:::\n\n```{.r .cell-code}\nwith(x, x[two > 0, ])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   one       two group\n4    4 0.9842631 alpha\n6    6 0.5547768  beta\n7    7 0.8587701  beta\n9    9 1.2465142  beta\n10  10 1.4301925  beta\n```\n:::\n:::\n\n\n## Feature transformation with `transform()`\n\nMake up some data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- data.frame(Sex = c(0, 0, 1, 1, 0),\n                  Height = c(1.5, 1.6, 1.55, 1.73, 1.8),\n                  Weight = c(55, 70, 69, 76, 91))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- transform(dat, BMI = Weight/Height^2)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sex Height Weight      BMI\n1   0   1.50     55 24.44444\n2   0   1.60     70 27.34375\n3   1   1.55     69 28.72008\n4   1   1.73     76 25.39343\n5   0   1.80     91 28.08642\n```\n:::\n:::\n\n\n`transform()` is probably not used too often, because it is trivial to do the \nsame with direct assignment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat$BMI <- dat$Weight/dat$Height^2\n```\n:::\n\n\nbut can be useful when adding multiple variables and/or used in a [pipe](#pipe):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat |> \n  subset(Sex == 0) |> \n  transform(DeltaWeightFromMean = Weight - mean(Weight),\n            BMI = Weight/Height^2,\n            CI = Weight/Height^3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sex Height Weight      BMI DeltaWeightFromMean       CI\n1   0    1.5     55 24.44444                 -17 16.29630\n2   0    1.6     70 27.34375                  -2 17.08984\n5   0    1.8     91 28.08642                  19 15.60357\n```\n:::\n:::\n\n\n## Identify and remove duplicated row with `duplicated()` and `unique()`\n\nThe `duplicated()` function when applied on a data.frame returns a logical \nindex specifying the location of duplicated rows - specifically, of row which \nare the duplicate of another row further up the data.frame. This means that if \nrows 20 and 23 are identical, `duplicated()` will return `TRUE` for row 23.\n\nOn the other hand, `unique()` will remove duplicate rows from a data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- data.frame(ID = c(203, 808, 909, 707, 808),\n                Age = c(23, 44, 33, 42, 44))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicated(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE  TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   ID Age\n1 203  23\n2 808  44\n3 909  33\n4 707  42\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
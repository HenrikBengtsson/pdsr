{
  "hash": "8344d583f8583d6c9c00d014eb9dd2e0",
  "result": {
    "markdown": "# Data Transformations {#datatrans}\n\n\n::: {.cell}\n\n:::\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-2_e1906ff698ccd5bd6459383aecd6b8f2'}\n<STYLE type='text/css' scoped>\nPRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};\n</STYLE>\n:::\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-3_45641567a06e55c52505623c2b82d916'}\n\n:::\n\n\n## Continuous variables\n\n### Standardization / Scaling & Centering with `scale()` {#zscore}\n\n**Scaling** of a numeric vector is achieved by elementwise division with the standard deviation. A scaled vector therefore has standard deviation equal to 1.\n\n**Centering** of a numeric vector is achieved by elementwise subtraction of its mean. A centered vector therefore has mean equal to 0.\n\n**Standardizing**, a.k.a. converting to Z-scores, involves scaling and centering. Scaling and centering is performed in R with the `scale()` function.\n\nDepending on your modeling needs / the algorithms you plan to use, it is often important to scale and/or center your data. Note that many functions, but not all, may automatically scale and center data internally if it is required by the algorithm. Check the function documentation to see if you should manually scale or not.\n\n`scale()` can be applied to a single vector or a matrix/data.frame.\nIn the case of a matrix or data.frame, scaling is applied on each column individually.\nBy default, both arguments `scale` and `center` are set to `TRUE`.\n\nScale a vector:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-4_b00a809521d4444eab0ba9f144e9d83c'}\n\n```{.r .cell-code}\nhead(iris$Sepal.Length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.1 4.9 4.7 4.6 5.0 5.4\n```\n\n\n:::\n\n```{.r .cell-code}\nPetal.Length_scaled <- scale(iris$Petal.Length)\nhead(Petal.Length_scaled)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          [,1]\n[1,] -1.335752\n[2,] -1.335752\n[3,] -1.392399\n[4,] -1.279104\n[5,] -1.335752\n[6,] -1.165809\n```\n\n\n:::\n:::\n\n\nScale multiple columns of a matrix/data.frame:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-5_dfeb76fa0d8790ed89852d527d6deca8'}\n\n```{.r .cell-code}\niris.scaled <- scale(iris[, -5])\nhead(iris.scaled)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Sepal.Length Sepal.Width Petal.Length Petal.Width\n[1,]   -0.8976739  1.01560199    -1.335752   -1.311052\n[2,]   -1.1392005 -0.13153881    -1.335752   -1.311052\n[3,]   -1.3807271  0.32731751    -1.392399   -1.311052\n[4,]   -1.5014904  0.09788935    -1.279104   -1.311052\n[5,]   -1.0184372  1.24503015    -1.335752   -1.311052\n[6,]   -0.5353840  1.93331463    -1.165809   -1.048667\n```\n\n\n:::\n:::\n\n\nFirst, let's verify that `scale()` did what we wanted:  \n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-6_4b958d932683216eef9ccf9afd30d85f'}\n\n```{.r .cell-code}\ncolMeans(iris.scaled)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Sepal.Length   Sepal.Width  Petal.Length   Petal.Width \n-1.457168e-15 -1.638319e-15 -1.292300e-15 -5.543714e-16 \n```\n\n\n:::\n:::\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-7_ebbbd5ea6e3a3d7be7c58623e2205324'}\n\n```{.r .cell-code}\napply(iris.scaled, 2, sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n           1            1            1            1 \n```\n\n\n:::\n:::\n\n\nWe got effectively 0 mean and standard deviation of 1 for each column.  \n\n`scale()` outputs the scaled vector(s) along with the scaling and/or centering parameters saved as attributes in the output.\n\nNote that in both cases, whether a vector input or data.frame, the output is a **matrix**:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-8_e8391c94f6ff40be91016e6fb86847f4'}\n\n```{.r .cell-code}\nclass(Petal.Length_scaled)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n\n```{.r .cell-code}\nclass(iris.scaled)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n\nGet the output attributes:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-9_f0e235b75f52deda5f40261d6dba4311'}\n\n```{.r .cell-code}\nattributes(Petal.Length_scaled)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$dim\n[1] 150   1\n\n$`scaled:center`\n[1] 3.758\n\n$`scaled:scale`\n[1] 1.765298\n```\n\n\n:::\n:::\n\n\n`center` is the mean:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-10_39cc47c956da5d996b5b53f6093c3644'}\n\n```{.r .cell-code}\nmean(iris$Petal.Length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.758\n```\n\n\n:::\n:::\n\n\n`scale` is the standard deviation:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-11_e59d393152120d55cf3702d316014c08'}\n\n```{.r .cell-code}\nsd(iris$Petal.Length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.765298\n```\n\n\n:::\n:::\n\n\nFor a matrix/data.frame input, you get `center` and `scale` attributes per column:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-12_12ddc4a6ec84bf07c0f1ddcf554fee7b'}\n\n```{.r .cell-code}\nattributes(iris.scaled)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$dim\n[1] 150   4\n\n$dimnames\n$dimnames[[1]]\nNULL\n\n$dimnames[[2]]\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\" \n\n\n$`scaled:center`\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n    5.843333     3.057333     3.758000     1.199333 \n\n$`scaled:scale`\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n   0.8280661    0.4358663    1.7652982    0.7622377 \n```\n\n\n:::\n:::\n\n\nLet's save the scale and center attributes and then double check the calculations:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-13_704d8c1efe2bae9a2b531815d775adc7'}\n\n```{.r .cell-code}\n.center <- attr(iris.scaled, \"scaled:center\")\n.center\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n    5.843333     3.057333     3.758000     1.199333 \n```\n\n\n:::\n\n```{.r .cell-code}\n.scale <- attr(iris.scaled, \"scaled:scale\")\n.scale\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n   0.8280661    0.4358663    1.7652982    0.7622377 \n```\n\n\n:::\n\n```{.r .cell-code}\nSepal.Length_scaled <- (iris$Sepal.Length - .center[1]) / .scale[1]\nall(Sepal.Length_scaled == iris.scaled[, \"Sepal.Length\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nNote: Due to limitation in numerical precision, checking sets of floats for \nequality after multiple operations is \n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-14_6452a3b15f9cccf05648a8174c95f427'}\n\n```{.r .cell-code}\nall.equal(Sepal.Length_scaled, iris.scaled[, \"Sepal.Length\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n::: callout-note\nIf you are manually scaling and/or centering data for **supervised learning**, you must:  \n\n* Perform scaling and centering on your **training data**,\n* Save the **centering and scaling parameters** for each feature, and\n* Apply the training set-derived centering and scaling parameters to the **test set** *prior to prediction/inference*.\n:::\n\nA common mistake is to either scale training and testing data together in the beginning, or scale them independently.  \n\n### Normalization\n\n**Normalization** has different meanings in different contexts; in the context of a numeric variable it usually refers to converting to a 0-1 range.\n\nLet's write a simple function to achieve this:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-15_1c8fe6df687ffac1589305b9d395a76d'}\n\n```{.r .cell-code}\nnormalize <- function(x) {\n  .min <- min(x, na.rm = TRUE)\n  (x - .min) / max(x - .min, na.rm = TRUE)\n}\n```\n:::\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-16_7e022f1f74b7465aeb7691db76cd4479'}\n\n```{.r .cell-code}\nx <- rnorm(20, 13, 1.4)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 11.92987 14.74584 12.96114 12.48741 11.47208 12.62943 12.70282 11.61808\n [9] 13.37294 14.18529 13.12239 15.65379 13.73486 11.26502 11.55796 13.48129\n[17] 11.00606 12.17558 12.47453 13.13766\n```\n\n\n:::\n:::\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-17_696efdbd9992b06a49b8716f91511f42'}\n\n```{.r .cell-code}\nx_normalized <- normalize(x)\nx_normalized\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.19876694 0.80464577 0.42065249 0.31872618 0.10026779 0.34928303\n [7] 0.36507296 0.13168251 0.50925422 0.68403959 0.45534707 1.00000000\n[13] 0.58712524 0.05571725 0.11874613 0.53256784 0.00000000 0.25163201\n[19] 0.31595511 0.45863174\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(x_normalized)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(x_normalized)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\nNote that it is easy to make the `normalize()` function more general, by adding `lo` and `hi` arguments to convert to any range:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-18_53f966dbe389d01b8a4021cf10383646'}\n\n```{.r .cell-code}\ndr <- function(x, lo = 0, hi = 1) {\n    .min <- min(x, na.rm = TRUE)\n   (x - .min) / max(x - .min, na.rm = TRUE) * (hi - lo) + lo\n  }\n```\n:::\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-19_578a3e71055df8ddca3b555d2d91ffee'}\n\n```{.r .cell-code}\ndr(x, -1, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -0.60246612  0.60929154 -0.15869503 -0.36254764 -0.79946441 -0.30143394\n [7] -0.26985408 -0.73663497  0.01850844  0.36807918 -0.08930585  1.00000000\n[13]  0.17425049 -0.88856550 -0.76250775  0.06513568 -1.00000000 -0.49673598\n[19] -0.36808978 -0.08273652\n```\n\n\n:::\n:::\n\n\n### Log-transform with `log()`\n\n\n\n\n\nFor the following example, `x` is an unknown feature in a new dataset we were \njust given.\n\nWe start by plotting its distribution:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-21_1ce9260cde525745550c9bbb3ee53641'}\n\n```{.r .cell-code}\nmplot3_x(x)\n```\n\n::: {.cell-output-display}\n![](DataTrans_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nWe can see it is skewed right. A log transform can help here:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-22_97a9ae213717b82502fe6659bfaba44e'}\n\n```{.r .cell-code}\nmplot3_x(log(x))\n```\n\n::: {.cell-output-display}\n![](DataTrans_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### Data binning with `cut()`\n\nA different approach for the above variable might be to bin it.  \nLet's look at a few different ways to bin continuous data.\n\n#### Evenly-spaced interval\n\n`cut()` allows us to bin a numeric variable into evenly-spaced intervals.  \nThe `breaks` argument defines the number of intervals:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-23_319dd325084410b9ab2ff9f74e14b52b'}\n\n```{.r .cell-code}\nx_cut4 <- cut(x, breaks = 4)\nhead(x_cut4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] (0.291,178] (0.291,178] (0.291,178] (0.291,178] (0.291,178] (0.291,178]\nLevels: (0.291,178] (178,355] (355,533] (533,711]\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(x_cut4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nx_cut4\n(0.291,178]   (178,355]   (355,533]   (533,711] \n        977          19           3           1 \n```\n\n\n:::\n:::\n\n\n::: callout-important\n**Interval Notation**\n\n`[3, 9)` represents the interval of [real numbers](https://en.wikipedia.org/wiki/Real_number) \nbetween 3 and 9, **including** 3 and **excluding** 9.\n:::\n\nBecause the data is so skewed, equal intervals are not helpful in this case. The majority of the data points get grouped into a single bin.\n\nLet's visualize the cuts:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-24_4bdef34767e9811448cd26d59d98e194'}\n\n```{.r .cell-code}\nxcuts5 <- seq(min(x), max(x), length.out = 5)\nxcuts5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]   1.0000 178.2453 355.4905 532.7358 709.9811\n```\n\n\n:::\n:::\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-25_d968bf5145a363787e8ba48c39c28c01'}\n\n```{.r .cell-code}\nmplot3_x(x, par.reset = FALSE)\n# plot(density(x)) # in base R\nabline(v = xcuts5, col = \"red\", lwd = 1.5)\n```\n\n::: {.cell-output-display}\n![](DataTrans_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n[Note: We used `par.reset = FALSE` to stop `mplot3_x()` from resetting its custom `par()` settings so that we can continue adding elements to the same plot, in this case with the `abline()` command.]\n\n#### Quantile cuts\n\nInstead of evenly-spaced intervals, we can get quantiles with `quantile()`. We ask for 5 quantiles using the `length.out` argument, which corresponds to 4 intervals:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-26_0e69b3dcd231cdb62e74369d0bef6cb5'}\n\n```{.r .cell-code}\nxquants5 <- quantile(x, seq(0, 1, length.out = 5))\nxquants5 <- quantile(x, seq(0, 1, length.out = 5))\nmplot3_x(x, par.reset = F)\n# plot(density(x)) # in base R\nabline(v = xquants5, col = \"green\", lwd = 1.5)\n```\n\n::: {.cell-output-display}\n![](DataTrans_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nThe `breaks` argument of `cut()` allows us to pass either an integer to define the number of evenly-spaced breaks, or a numeric vector defining the position of breaks.\n\nWe can therefore pass the quantile values as break points.\n\nSince the quantile values begin at the lowest value in the data, we need to define \n`include.lowest = TRUE` so that the first interval is inclusive of the lowest value:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-27_5eb4fd725a73ffb3ce9fd1430a3e56c4'}\n\n```{.r .cell-code}\nx_cutq4 <- cut(x, breaks = xquants5, include.lowest = TRUE)\ntable(x_cutq4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nx_cutq4\n   [1,11.5] (11.5,23.2] (23.2,47.2]  (47.2,710] \n        250         250         250         250 \n```\n\n\n:::\n:::\n\n\nWith quantile cuts, each bin contains roughly the same number of observations (+/- 1).  \n\n## Categorical variables\n\nMany algorithms (or their implementations) do not directly support categorical variables. To use \nthem, you must therefore convert all categorical variables to some type of numerical encoding.\n\n### Integer encoding\n\nIf the categorical data is ordinal, you can simply convert it to integers.  \nFor example, the following **ordered factor**:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-28_276ebddc9c061d9305d960bbeb333e7c'}\n\n```{.r .cell-code}\nbrightness <- factor(c(\"bright\", \"brightest\", \"darkest\",\n                        \"bright\", \"dark\", \"dim\", \"dark\"),\n                      levels = c(\"darkest\", \"dark\", \"dim\", \"bright\", \"brightest\"),\n                      ordered = TRUE)\nbrightness\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] bright    brightest darkest   bright    dark      dim       dark     \nLevels: darkest < dark < dim < bright < brightest\n```\n\n\n:::\n:::\n\n\ncan be directly coerced to an integer:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-29_ae99c5846648663420e0a81b8ca58780'}\n\n```{.r .cell-code}\nas.integer(brightness)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 5 1 4 2 3 2\n```\n\n\n:::\n:::\n\n\n### One-hot encoding\n\nWhen categorical features are **not** ordinal, and your algorithm cannot handle them directly, you \ncan one-hot encode them. In one-hot encoding, each categorical feature is converted to k binary \nfeatures, where k = number of unique values in the input, such that only one feature has the value 1 \nper case. This is similar to creating dummy variables in statistics, with the difference that dummy \nvariables create `k - 1` new variables.\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-30_543c9bc04c436ca1c65d8b0ae4004ee0'}\n\n```{.r .cell-code}\nset.seed(21)\nadmission_reasons <- c(\"plannedSurgery\", \"emergencySurgery\", \"medical\")\nadmission <- sample(admission_reasons, 12, T)\nadmission\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"medical\"          \"plannedSurgery\"   \"medical\"          \"plannedSurgery\"  \n [5] \"emergencySurgery\" \"medical\"          \"plannedSurgery\"   \"medical\"         \n [9] \"medical\"          \"emergencySurgery\" \"emergencySurgery\" \"emergencySurgery\"\n```\n\n\n:::\n:::\n\n\nMultiple packages include functions that perform one-hot encoding. It's a simple operation and we don't necessarily need to install a large package with many dependencies.\n\nLet's write a simple function to perform one-hot encoding. Note, you may have heard that for loops can be slow in R, but that depends on the operations performed. Here, we loop over an integer matrix and it is plenty fast.\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-31_e6d67e362ff381154b473fa546161067'}\n\n```{.r .cell-code}\nonehot <- function(x, xname = NULL) {\n  if (is.null(xname)) xname <- deparse(substitute(x))\n  x <- factor(x)\n  .levels <- levels(x)      # Get factor levels\n  ncases <- NROW(x)         # Get number of cases\n  index <- as.integer(x)    # Convert levels to integer\n  oh <- matrix(0, ncases, length(.levels))   # Initialize zeros matrix\n  colnames(oh) <- paste(xname, .levels, sep = \"_\")  # Name columns by levels\n  for (i in seq(ncases)) oh[i, index[i]] <- 1  # Assign \"1\" to appropriate level\n  oh\n}\n```\n:::\n\n\nLet's apply our new function to the admission vector:\n\n\n::: {.cell hash='DataTrans_cache/html/unnamed-chunk-32_2ba451a5943874376a4a0592c16de7ac'}\n\n```{.r .cell-code}\nonehot(admission)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      admission_emergencySurgery admission_medical admission_plannedSurgery\n [1,]                          0                 1                        0\n [2,]                          0                 0                        1\n [3,]                          0                 1                        0\n [4,]                          0                 0                        1\n [5,]                          1                 0                        0\n [6,]                          0                 1                        0\n [7,]                          0                 0                        1\n [8,]                          0                 1                        0\n [9,]                          0                 1                        0\n[10,]                          1                 0                        0\n[11,]                          1                 0                        0\n[12,]                          1                 0                        0\n```\n\n\n:::\n:::\n\n\nNote: `deparse(substitute(x))` above is used to automatically get the name of the input object (in this case \"admission\"). This is similar to how many of R's internal functions (e.g. `plot()`) get the names of input objects.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "ca3d93463f5d1c9188632a57299bd1ec",
  "result": {
    "markdown": "---\nknitr:\n  opts_chunk:\n    comment: \"\"\n---\n\n# Reshaping {#sec-dfreshape}\n\nA **wide** dataset contains a single row per case (e.g. patient), while a \n**long ** dataset can contain multiple rows per case (e.g. for multiple \nvariables or timepoints).\n<br><br>\nWe want to be able to **reshape** from one form to the other because different \nprograms (e.g. statistical models, plotting functions) expect data in one or the \nother format for different applications (e.g. longitudinal modeling or grouped \nvisualizations).\n<br>\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Wide and Long data format example. Notice how the wide table on the left with 3 cases (3 IDs) and 3 variables can be represented as a 3 x 4 table in wide format or a 9 x 3 table in long format. The values (outlined in magenta) are present once in each table: on the wide table they form an **ID x Variable** matrix, while on the long they are stacked on a **single column**. The IDs have to be repeated on the long table, once for each variable and there is a new 'Variable' column to provide the information present in the wide table's column names.](wide_long.png){#fig-widevslong fig-align='center' width=100%}\n:::\n:::\n\n\nR's `reshape()` function is very powerful, but can seem intimidating at first,\nbecause its documentation is not very clear, especially if you're not familiar\nwith the jargon.\n<br><br>\nThis chapters includes detailed diagrams and step-by-step instructions to \nexplain how to build cals for long-to-wide and wide-to-long reshaping.\n\n## Long to Wide\n\n### Key-value pairs\n\nIt is very common to receive data in long format. For example, many tables with \nelectronic health records are stored in long format.\n<br><br>\nLet's start with a small synthetic dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_long <- data.frame(\n    Account_ID = c(8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004, \n            8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004), \n    Age = c(67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671, 67.8017038366664, 42.9198507293701, \n            46.2301756642422, 39.665983196671, 67.8017038366664, \n            42.9198507293701, 46.2301756642422, 39.665983196671, \n            67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671), \n    Admission = c(\"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\", \"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\"), \n    Lab_key = c(\"RBC\", \"RBC\", \"RBC\", \"RBC\", \"WBC\", \"WBC\", \"WBC\", \"WBC\", \n            \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \n            \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\"), \n    Lab_value = c(4.63449321082268, 3.34968550627897, 4.27037213597765, \n            4.93897736897793, 8374.22887757195, 7612.37380499927, \n            8759.27855519425, 6972.28096216548, 36.272693147236, \n            40.5716317809522, 39.9888624177955, 39.8786884058422, \n            12.6188444991545, 12.1739747363806, 15.1293426442183, \n            14.8885696185238)\n)\ndat_long <- dat_long[order(dat_long$Account_ID), ]\ndat_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Account_ID      Age Admission    Lab_key   Lab_value\n1        8001 67.80170        ED        RBC    4.634493\n5        8001 67.80170        ED        WBC 8374.228878\n9        8001 67.80170        ED Hematocrit   36.272693\n13       8001 67.80170        ED Hemoglobin   12.618844\n2        8002 42.91985   Planned        RBC    3.349686\n6        8002 42.91985   Planned        WBC 7612.373805\n10       8002 42.91985   Planned Hematocrit   40.571632\n14       8002 42.91985   Planned Hemoglobin   12.173975\n3        8003 46.23018   Planned        RBC    4.270372\n7        8003 46.23018   Planned        WBC 8759.278555\n11       8003 46.23018   Planned Hematocrit   39.988862\n15       8003 46.23018   Planned Hemoglobin   15.129343\n4        8004 39.66598        ED        RBC    4.938977\n8        8004 39.66598        ED        WBC 6972.280962\n12       8004 39.66598        ED Hematocrit   39.878688\n16       8004 39.66598        ED Hemoglobin   14.888570\n```\n\n\n:::\n:::\n\n\nThe dataset consists of an `Account_ID`, denoting a unique patient identifier,\n`Age`, `Admission`, and a pair of `Lab_key` and a `Lab_value` columns. The lab\ndata contains information on four lab results: RBC, WBC, Hematocrit, and\nHemoglobin.\n<br><br>\nUse the following figure to understand `reshape()`'s long-to-wide syntax. You \ncan use it as a reference when building a call to `reshape()` by following \nsteps 1 through 3.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![`reshape()` syntax for Long to Wide transformation.](R_reshape_long2wide.png){#fig-reshape_long2wide fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_wide <- reshape(\n    dat_long,\n    idvar = \"Account_ID\",\n    timevar = \"Lab_key\",\n    v.names = \"Lab_value\",\n    direction = \"wide\")\ndat_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Account_ID      Age Admission Lab_value.RBC Lab_value.WBC\n1       8001 67.80170        ED      4.634493      8374.229\n2       8002 42.91985   Planned      3.349686      7612.374\n3       8003 46.23018   Planned      4.270372      8759.279\n4       8004 39.66598        ED      4.938977      6972.281\n  Lab_value.Hematocrit Lab_value.Hemoglobin\n1             36.27269             12.61884\n2             40.57163             12.17397\n3             39.98886             15.12934\n4             39.87869             14.88857\n```\n\n\n:::\n:::\n\n\nYou can optionally clean up columns (See [`gsub()`](Strings.qmd#gsub)):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(dat_wide) <- gsub(\"Lab_value.\", \"\", colnames(dat_wide))\ndat_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Account_ID      Age Admission      RBC      WBC Hematocrit Hemoglobin\n1       8001 67.80170        ED 4.634493 8374.229   36.27269   12.61884\n2       8002 42.91985   Planned 3.349686 7612.374   40.57163   12.17397\n3       8003 46.23018   Planned 4.270372 8759.279   39.98886   15.12934\n4       8004 39.66598        ED 4.938977 6972.281   39.87869   14.88857\n```\n\n\n:::\n:::\n\n\n### Incomplete data\n\nIt is very common that not all cases have entries for all variables.\nWe can simulate this by removing a few lines from the data frame above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_long <- dat_long[-4, ]\ndat_long <- dat_long[-6, ]\ndat_long <- dat_long[-13, ]\n```\n:::\n\n\nIn such cases, long to wide conversion will include `NA` values where no data is\navailable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_wide <- reshape(dat_long,\n    idvar = \"Account_ID\",\n    timevar = \"Lab_key\",\n    v.names = \"Lab_value\",\n    direction = \"wide\"\n)\ndat_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Account_ID      Age Admission Lab_value.RBC Lab_value.WBC\n1       8001 67.80170        ED      4.634493      8374.229\n2       8002 42.91985   Planned      3.349686      7612.374\n3       8003 46.23018   Planned      4.270372      8759.279\n4       8004 39.66598        ED      4.938977      6972.281\n  Lab_value.Hematocrit Lab_value.Hemoglobin\n1             36.27269                   NA\n2                   NA             12.17397\n3             39.98886             15.12934\n4                   NA             14.88857\n```\n\n\n:::\n:::\n\n\n### Longitudinal data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat2 <- data.frame(\n    pat_enc_csn_id = rep(c(14568:14571), each = 5),\n    result_date = rep(c(\n        seq(as.Date(\"2019-08-01\"),\n            as.Date(\"2019-08-05\"),\n            length.out = 5\n        )), 4\n    ),\n    order_description = rep(\"WBC\", 20),\n    result_component_value = c(\n        rnorm(5, 6800, 3840),\n        rnorm(5, 7900, 3100),\n        rnorm(5, 8100, 4030),\n        rnorm(5, 3200, 1100)\n    ))\n\ndat2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   pat_enc_csn_id result_date order_description result_component_value\n1           14568  2019-08-01               WBC               6785.319\n2           14568  2019-08-02               WBC               6882.371\n3           14568  2019-08-03               WBC               5361.601\n4           14568  2019-08-04               WBC               8361.147\n5           14568  2019-08-05               WBC               5586.380\n6           14569  2019-08-01               WBC               6917.727\n7           14569  2019-08-02               WBC              11421.719\n8           14569  2019-08-03               WBC               8747.548\n9           14569  2019-08-04               WBC               7472.738\n10          14569  2019-08-05               WBC               9416.452\n11          14570  2019-08-01               WBC               4801.784\n12          14570  2019-08-02               WBC               5232.936\n13          14570  2019-08-03               WBC               7309.916\n14          14570  2019-08-04               WBC               5633.481\n15          14570  2019-08-05               WBC              11691.506\n16          14571  2019-08-01               WBC               2920.246\n17          14571  2019-08-02               WBC               3792.376\n18          14571  2019-08-03               WBC               2422.150\n19          14571  2019-08-04               WBC               4117.280\n20          14571  2019-08-05               WBC               5689.864\n```\n\n\n:::\n:::\n\n\nIn this example, we have four unique patient IDs, with five measurements taken\non different days.\n<br><br>\nFollowing the same recipe as above, we convert to wide format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat2_wide <- reshape(dat2,\n    idvar = \"pat_enc_csn_id\",\n    timevar = \"result_date\",\n    v.names = \"result_component_value\",\n    direction = \"wide\"\n)\ndat2_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   pat_enc_csn_id order_description result_component_value.2019-08-01\n1           14568               WBC                          6785.319\n6           14569               WBC                          6917.727\n11          14570               WBC                          4801.784\n16          14571               WBC                          2920.246\n   result_component_value.2019-08-02 result_component_value.2019-08-03\n1                           6882.371                          5361.601\n6                          11421.719                          8747.548\n11                          5232.936                          7309.916\n16                          3792.376                          2422.150\n   result_component_value.2019-08-04 result_component_value.2019-08-05\n1                           8361.147                          5586.380\n6                           7472.738                          9416.452\n11                          5633.481                         11691.506\n16                          4117.280                          5689.864\n```\n\n\n:::\n:::\n\n\n## Wide to Long\n\nSynthetic data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_wide <- data.frame(\n    Account_ID = c(8001, 8002, 8003, 8004), \n    Age = c(67.8017038366664, 42.9198507293701, 46.2301756642422, \n        39.665983196671), \n    RBC = c(4.63449321082268, 3.34968550627897, 4.27037213597765, \n        4.93897736897793), \n    WBC = c(8374.22887757195, 7612.37380499927, 8759.27855519425, \n        6972.28096216548), \n    Hematocrit = c(36.272693147236, 40.5716317809522, 39.9888624177955, \n        39.8786884058422), \n    Hemoglobin = c(12.6188444991545, 12.1739747363806, 15.1293426442183, \n        14.8885696185238), \n    Admission = c(\"ED\", \"Planned\", \"Planned\", \"Planned\")\n    )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2022)\ndat_wide <- data.frame(\n    Account_ID = c(8001, 8002, 8003, 8004),\n    Age = rnorm(4, 57, 12),\n    RBC = rnorm(4, 4.8, .5),\n    WBC = rnorm(4, 7250, 1500),\n    Hematocrit = rnorm(4, 40.2, 4),\n    Hemoglobin = rnorm(4, 13.6, 1.5),\n    Admission = sample(c(\"ED\", \"Planned\"), 4, T)\n)\ndat_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Account_ID      Age      RBC      WBC Hematocrit Hemoglobin Admission\n1       8001 67.80170 4.634493 8374.229   36.27269   12.61884        ED\n2       8002 42.91985 3.349686 7612.374   40.57163   12.17397   Planned\n3       8003 46.23018 4.270372 8759.279   39.98886   15.12934   Planned\n4       8004 39.66598 4.938977 6972.281   39.87869   14.88857   Planned\n```\n\n\n:::\n:::\n\n\nUse the following figure to understand `reshape()`'s wide-to-long syntax.\nUse it as a reference when building a call to `reshape()` by following \nsteps 1 through 5. It's important to note which arguments refer to the input vs. \nthe output data frames.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![`reshape()` syntax for Wide to Long transformation.](R_reshape_wide2long.png){#fig-reshape_wide2long fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_wide2long <- reshape(# Data in wide format\n                         data = dat_wide,\n                         # The column name that defines case IDs\n                         idvar = \"Account_ID\",\n                         # The columns whose values we want to keep\n                         varying = list(3:6),\n                         # The name of the new column which will contain all \n                         # the values from the columns above\n                         v.names = \"Lab value\",\n                         # The values/names, of length = (N columns in \"varying\"), \n                         # that will be recycled to indicate which column from the \n                         # wide dataset each row corresponds to\n                         times = c(colnames(dat_wide)[3:6]),\n                         # The name of the new column created to hold the values \n                         # defined by \"times\"\n                         timevar = \"Lab key\",                  \n                         direction = \"long\")\ndat_wide2long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                Account_ID      Age Admission    Lab key   Lab value\n8001.RBC              8001 67.80170        ED        RBC    4.634493\n8002.RBC              8002 42.91985   Planned        RBC    3.349686\n8003.RBC              8003 46.23018   Planned        RBC    4.270372\n8004.RBC              8004 39.66598   Planned        RBC    4.938977\n8001.WBC              8001 67.80170        ED        WBC 8374.228878\n8002.WBC              8002 42.91985   Planned        WBC 7612.373805\n8003.WBC              8003 46.23018   Planned        WBC 8759.278555\n8004.WBC              8004 39.66598   Planned        WBC 6972.280962\n8001.Hematocrit       8001 67.80170        ED Hematocrit   36.272693\n8002.Hematocrit       8002 42.91985   Planned Hematocrit   40.571632\n8003.Hematocrit       8003 46.23018   Planned Hematocrit   39.988862\n8004.Hematocrit       8004 39.66598   Planned Hematocrit   39.878688\n8001.Hemoglobin       8001 67.80170        ED Hemoglobin   12.618844\n8002.Hemoglobin       8002 42.91985   Planned Hemoglobin   12.173975\n8003.Hemoglobin       8003 46.23018   Planned Hemoglobin   15.129343\n8004.Hemoglobin       8004 39.66598   Planned Hemoglobin   14.888570\n```\n\n\n:::\n:::\n\n\nYou can also define `varying` with a character vector:\n\n`varying = list(c(\"RBC\", \"WBC\", \"Hematocrit\", \"Hemoglobin\")`  \n\nExplore the resulting data frame's attributes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(dat_wide2long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$row.names\n [1] \"8001.RBC\"        \"8002.RBC\"        \"8003.RBC\"        \"8004.RBC\"       \n [5] \"8001.WBC\"        \"8002.WBC\"        \"8003.WBC\"        \"8004.WBC\"       \n [9] \"8001.Hematocrit\" \"8002.Hematocrit\" \"8003.Hematocrit\" \"8004.Hematocrit\"\n[13] \"8001.Hemoglobin\" \"8002.Hemoglobin\" \"8003.Hemoglobin\" \"8004.Hemoglobin\"\n\n$names\n[1] \"Account_ID\" \"Age\"        \"Admission\"  \"Lab key\"    \"Lab value\" \n\n$class\n[1] \"data.frame\"\n\n$reshapeLong\n$reshapeLong$varying\n$reshapeLong$varying[[1]]\n[1] \"RBC\"        \"WBC\"        \"Hematocrit\" \"Hemoglobin\"\n\n\n$reshapeLong$v.names\n[1] \"Lab value\"\n\n$reshapeLong$idvar\n[1] \"Account_ID\"\n\n$reshapeLong$timevar\n[1] \"Lab key\"\n```\n\n\n:::\n:::\n\n\nThese attributes are present if and only if a long data.frame was created from \na wide data.frame as above. In this case, reshaping back to wide format is as \neasy as calling `reshape()` on the previously converted data.frame with no \narguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_wideagain <- reshape(dat_wide2long)\ndat_wideagain\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Account_ID      Age Admission      RBC      WBC Hematocrit Hemoglobin\n8001.RBC       8001 67.80170        ED 4.634493 8374.229   36.27269   12.61884\n8002.RBC       8002 42.91985   Planned 3.349686 7612.374   40.57163   12.17397\n8003.RBC       8003 46.23018   Planned 4.270372 8759.279   39.98886   15.12934\n8004.RBC       8004 39.66598   Planned 4.938977 6972.281   39.87869   14.88857\n```\n\n\n:::\n:::\n\n\nNote that the reverse does not work, you need to specify the wide to long \nreshaping normally.\n\n## See also\n\n- [data.table reshape](#sec-dtreshape)\n- [tidyr reshape](#sec-tidyrreshape)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "7524d9274f1cca584dac6f0237c0b29e",
  "result": {
    "markdown": "# Introduction to the System Shell {#shell}\n\nThis is a very brief introduction to some of the most commonly used shell commands.\n\nA [shell](https://en.wikipedia.org/wiki/Unix_shell) is a command line interface allowing access to \nan operating system's services. Multiple different shells exist. The most popular is probably \n[**bash**](https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29), which is the default in most Linux \ninstallations. In macOS, the default shell switched form **bash** to \n[**zsh**](https://en.wikipedia.org/wiki/Z_shell) in 2019 with the release of Catalina. In Windows,\nvarious shells are available through the \n[Windows Subsystem for Linux](https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux).\n\nThe commands listed here will work similarly in all/most shells.\n\n## Common shell commands\n\nThe first thing to look for in a new environment is the help system. In the shell, this is accessed with `man`:\n\n### `man`: Print the manual pages\n\nFor example, the following would return the manual pages for the `ls` command, explained\na little later.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nman ls\n```\n:::\n\n\n### `pwd`: Print working directory (the directory you are currently in)\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npwd\n```\n:::\n\n\n### `cd`: Set working directory to `/path/to/dir`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /path/to/dir\n```\n:::\n\n\n### `ls`: List directory contents\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls\n```\n:::\n\n\nadding the `-l` argument, prints directory contents as a list\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls -l\n```\n:::\n\n\n### `mv`: Move `file` from `/current/dir/` to `/new/dir`  \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmv /current/dir/file /new/dir\n```\n:::\n\n\n### `mv`: Rename `file` to `newfilename` \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmv /current/dir/file /current/dir/newfilename\n```\n:::\n\n\n### `cp`: Make a copy of `file` from `currentPath` into `altPath`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp /currentPath/file /altPath/file\n```\n:::\n\n\n### `rm`: Remove, i.e. delete, file\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nrm /path/to/file\n```\n:::\n\n\n### `mkdir`: Create a new directory named 'newdir'\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir /path/to/newdir\n```\n:::\n\n\n### `rmdir`: Remove, i.e. delete, **empty** directory\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nrmdir /path/to/somedir\n```\n:::\n\n\nTo remove a non-empty directory and all of its contents, you can use `rm -rf`:\n`-r` is recursive; `-f` is force.\n\nNote: Use with care! it will immediately delete all content in the directory without\nasking for confirmation\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nrm -rf /path/to/dir\n```\n:::\n\n\n### `cat`: Print contents of `file` to the console\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat /path/to/file\n```\n:::\n\n\n### `uname`: Get system information\n\n`-a` argument for \"all\"\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nuname -a\n```\n:::\n\n\n### `whoami`: Print the currently logged in user's name\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwhoami\n```\n:::\n\n\n### `id`: Return user identity\n\nThe `id` command returns, among other things, the groups a user belong to.\nThis informs you which directories and files a user can read, write, and execute.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nid username\n```\n:::\n\n\n## Running system commands within R\n\nYou can execute any system command within R using the `system()` command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem(\"uname -a\")\n```\n:::\n\n\n## Useful terminal commands for working with data\n\nIf you receive a data file, you may want to get an idea of the contents before reading it\ninto R.\n\n### `head`: Print the first few lines of a file\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead iris.csv\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSepal.Length,Sepal.Width,Petal.Length,Petal.Width,Species\n5.1,3.5,1.4,0.2,setosa\n4.9,3,1.4,0.2,setosa\n4.7,3.2,1.3,0.2,setosa\n4.6,3.1,1.5,0.2,setosa\n5,3.6,1.4,0.2,setosa\n5.4,3.9,1.7,0.4,setosa\n4.6,3.4,1.4,0.3,setosa\n5,3.4,1.5,0.2,setosa\n4.4,2.9,1.4,0.2,setosa\n```\n\n\n:::\n:::\n\n\nYou can print the first `n` lines using the syntax `head -n /path/to/file`.\n\nFor example, you can print just the first line, which would hold the column names in a\nCSV file:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead -1 iris.csv\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSepal.Length,Sepal.Width,Petal.Length,Petal.Width,Species\n```\n\n\n:::\n:::\n\n\n### `tail`: Print the last few lines of a file\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntail iris.csv\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n6.7,3.1,5.6,2.4,virginica\n6.9,3.1,5.1,2.3,virginica\n5.8,2.7,5.1,1.9,virginica\n6.8,3.2,5.9,2.3,virginica\n6.7,3.3,5.7,2.5,virginica\n6.7,3,5.2,2.3,virginica\n6.3,2.5,5,1.9,virginica\n6.5,3,5.2,2,virginica\n6.2,3.4,5.4,2.3,virginica\n5.9,3,5.1,1.8,virginica\n```\n\n\n:::\n:::\n\n\n### `wc`: Word, line, character, and byte count\n\n`wc` can print the word or line count of a file, among other things. This can be \nparticularly useful when dealing with large files\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -l iris.csv\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     151 iris.csv\n```\n\n\n:::\n:::\n\n\nThe iris dataset consist of 150 cases plus one line with the column names\n\n### `du`: Display disk usage statistics\n\n`du` can display the size of a file or directory among other things.\n\nThis can be very important when trying to determine if the contents of a data file will fit in memory.\n\nDisplay the size of a file in human-readable format (Kilobytes, Megabytes, Gigabytes, etc)\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndu -sh iris.csv\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n4.0K\tiris.csv\n```\n\n\n:::\n:::\n\n\nThe same command can be used on an entire current directory:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndu -sh .\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n785M\t.\n```\n\n\n:::\n:::\n\n\n## Further Resources\n\nBash is the default shell in most Linux distributions. \n\nZSH replaced Bash as the default\nshell in macOS with the release of macOS Catalina in 2019 (though Bash currently still\ncomes installed)\n\n- [Bash Documentation](https://www.gnu.org/software/bash/manual/)\n- [ZSH Documentation](https://zsh.sourceforge.io/Doc/)\n- [Windows Subsystem for Linux Documentation](https://learn.microsoft.com/en-us/windows/wsl/about)\n- [Windows PowerShell Documentation](https://learn.microsoft.com/en-us/powershell/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
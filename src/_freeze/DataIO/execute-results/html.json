{
  "hash": "f05b1f8c5e918558c7e4df770727685a",
  "result": {
    "markdown": "---\nknitr:\n  opts_chunk:\n    comment: \"\"\n    cache: true\n---\n\n# Data Input/Output {#sec-dataio}\n\n\n::: {.cell layout-align=\"center\" hash='DataIO_cache/html/unnamed-chunk-1_979f9aa1a623d6b57b0525729664bb0c'}\n::: {.cell-output-display}\n![Common Data Input/Output commands in R](./R_dataio.png){fig-align='center' width=80%}\n:::\n:::\n\n\nTabular data typically consists of rows and columns, where the rows correspond\nto different cases (e.g. patients) and the columns correspond to different\nvariables a.k.a. covariates a.k.a. features. Such data can be stored in\nmultiple different file formats.\n<br><br>\nThis includes **plain text** files, often in a \n[delimited format](https://en.wikipedia.org/wiki/Delimiter-separated_values){target=\"_blank\"}, and **binary** files.\n<br><br>\nCommon delimited format files includes comma- and tab-separated values \n([CSV](https://en.wikipedia.org/wiki/Comma-separated_values){target=\"_blank\"}, \n[TSV](https://en.wikipedia.org/wiki/Tab-separated_values){target=\"_blank\"}).\n<br><br>\nBinary file formats can be either open (e.g. R's RDS format) or \nproprietary (e.g. Microsoft's XLS).\n<br><br>\nR includes built-in support for reading and writing multiple file formats, \nincluding delimited format files and its own binary RDS and RData files.\n<br><br>\nThird party packages add support for working with virtually any file type.\n\n## CSV\n\n### Read local CSV\n\n`read.table()` is the core function that reads data from formatted text files \nin R, where cases correspond to lines and variables to columns. Its many \narguments allow to read different formats.\n<br><br>\n`read.csv()` is an alias for `read.table()` that defaults to commas as \nseparators and dots for decimal points. (Run `read.csv` in the console to print \nits source read the documentation with `?read.table`).\n<br><br>\nSome important arguments for `read.table()` listed here with their default \nvalues for `read.csv()`:\n\n* `sep = \",\"`: Character that separate entries. Default is a comma; use `sep = \"\\t\"` for tab-separated files (default setting in `read.delim()`)\n* `dec = \".\"`: Character for the decimal point. Default is a dot; in some cases \nwhere a comma is used as the decimal point, the entry separator `sep` may be a \nsemicolon (default setting in `read.csv2()`)\n* `na.strings = \"NA\"`: Character vector of strings to be coded as \"NA\"\n* `colClasses = NA`: Either a character vector defining each column's type \n(e.g. `c(\"character\", \"numeric\", \"numeric\")` recycled as necessary *or* a named \nvector defining specific columns' types (e.g. `c(ICD9 = \"character\", \nSex = \"factor\", SBP = \"numeric\", DOB = \"Date\")`). Unspecified columns are\nautomatically determined. Note: Set a column to `\"NULL\"` (with quotes) to exclude \nthat column.\n* `stringsAsFactors = TRUE`: Will convert all character vectors to factors\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-2_ebdacec00c258585b41893aed609aeca'}\n\n```{.r .cell-code}\nmen <-  read.csv(\"../Data/pone.0204161.s001.csv\")\n```\n:::\n\n\n::: callout-note\nWhen working in Windows, paths should use either single forward slashes (`/`) \nor double backslashes (`\\\\`).\n:::\n\n### Read CSV from the web\n\n`read.csv()` can directly read an online file. In the second example below, we \nalso define that missing data is coded with `?`  using the `na.strings` \nargument:\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-3_b7159a49bcb424810a201ec714127b11'}\n\n```{.r .cell-code}\nhf <- read.csv(\"https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv\"\n```\n:::\n\n\nThe above file is read directly from the UCI ML repository\n(See [data repositories](https://rtemis.lambdamd.org/resources.html#datasets)). \n\n### Read zipped data from the web \n\n#### using `gzcon()` and `csv.read()`\n\n`read.table()` /`read.csv()` also accepts a \"connection\" as input.  \nHere we define a connection to a zipped file by nesting `gzcon()` and `url()`:\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-4_f1e874db5f0542e9c270b4ebb1673aad'}\n\n```{.r .cell-code}\ncon <- gzcon(url(\"https://github.com/EpistasisLab/pmlb/raw/master/datasets/breast_cancer_wisconsin/breast_cancer_wisconsin.tsv.gz\"),\n             text = TRUE)\n```\n:::\n\n\nWe read the connection and specify the file is tab-separated, or call \n`read.delim()`:\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-5_d35b92215815223f67d73de378321804'}\n\n```{.r .cell-code}\nbcw <- read.csv(con, header = TRUE, sep = \"\\t\")\n\n#same as\nbcw <- read.delim(con, header = TRUE)\n```\n:::\n\n\n### Write to CSV\n\nUse the `write.csv()` function to write an R object (usually data frame or \nmatrix) to a CSV file. Setting `row.names = FALSE` is usually a good idea. \n(Instead of storing data in rownames, it's usually best to create a new column.)\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-6_612321388920d8ed00a995743bda9fc2'}\n\n```{.r .cell-code}\nwrite.csv(iris, \"../Data/iris.csv\", row.names = FALSE)\n```\n:::\n\n\nNote that in this case we did not need to save row names (which are just \nintegers 1 to  150 and would add a useless extra column in the output)\n\n## Excel .XLSX files\n\nTwo popular packages to read Excel files are \n[openxlsx](https://cran.r-project.org/package=openxlsx) and \n[readxl](https://cran.r-project.org/package=readxl).\n\n## Read .xslx \n\n### `openxlsx::read.xlsx()`\n\n`NA` strings are defined with argument `na.strings`.\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-7_984ff87088d35ac9cfe17700d6d70a64'}\n\n```{.r .cell-code}\nbcw <- openxlsx::read.xlsx(\"../Data/bcw.xlsx\", na.strings = \".\")\n```\n:::\n\n\n### `readxl::read_xlsx()`\n\n`NA` strings are defined with argument `na`.\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-8_dcd4ec3459aa4d78a47f33a3ae09a577'}\n\n```{.r .cell-code}\nbcw <- readxl::read_xlsx(\"../Data/bcw.xlsx\", na = \".\")\n```\n:::\n\n\n## Write .xlsx \n\n### `openxlsx::write.xlsx()`\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-9_76a9825beb5800447c6992b87af9cbd3'}\n\n```{.r .cell-code}\nopenxlsx::write.xlsx(bcw, \"../Data/bcw.xlsx\")\n```\n:::\n\n\nNote: The `readxl` package does not include a function to write .XLSX files.\n\n## RDS\n\n### Read single R object from an RDS file\n\nTo load an object saved in an RDS file, you read it with `readRDS()` and must\nassign it to an object:\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-10_6e7a1810ed0cee7a55101fc24dd0ec46'}\n\n```{.r .cell-code}\niris_fromFile <- readRDS(\"iris.rds\")\nall(iris == iris_fromFile)\n```\n:::\n\n\nTo read an RDS file directly from a web server, you surround the URL with\n`url()`:\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-11_b75b29c614db54993fac24815fd176e7'}\n\n```{.r .cell-code}\ndat <- readRDS(\n         url(\"https://class.lambdamd.org/pdsr/data/synth2208.rds\")\n       )\n```\n:::\n\n\n### Write single R object to an RDS file\n\nYou can write any single R object as an RDS file so that you can recover it \nlater, share it, etc. Remember that since a list can contain any number of \nobjects of any type, you can save essentially any collection of objects in an \nRDS file.\n\nFor multiple objects, see also the `save.image()` command below.\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-12_59251865e03fd681ff0c8d52bf2edde6'}\n\n```{.r .cell-code}\nsaveRDS(bcw, \"bcw.rds\")\n```\n:::\n\n\n## RData\n\n### Write multiple R objects to an RData file\n\nYou can use the `save()` function to save multiple R objects to a single .RData\nfile:\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-13_01b80fe7a0498a3856a76a64eec8feb4'}\n\n```{.r .cell-code}\nmat1 <- sapply(seq_len(10), function(i) rnorm(500))\nmat2 <- sapply(seq_len(10), function(i) rnorm(500))\nsave(mat1, mat2, file = \"./mat.RData\")\n```\n:::\n\n\nNote: we will learn how to use `sapply()` later under \n[Loop functions](#sec-loopfns)\n\nTo load the variables in the RData file you saved, use the `load()` command:\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-14_c913b1e2a2c76ae50e1d89f435127e82'}\n\n```{.r .cell-code}\nload(\"./mat.RData\")\n```\n:::\n\n\nNote that `load()` adds the objects to your workspace using their original \nnames. You do not assign them to a new object, unlike with the `readRDS()` call \nabove.\n\n### Write your entire workspace to an RData file\n\nYou can save your entire workspace to a RData file using the `save.image()` \nfunction:\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-15_9603e12d4351b0ee28b9d295f59c8bdf'}\n\n```{.r .cell-code}\nsave.image(\"workspace_2022-08-10.RData\")\n```\n:::\n\n\n### Load .Rdata\n\nSame as above, to re-load the workspace saved in the `.RData` file, use the \n`load()` command:\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-16_b30e09e51b401db5293f71f7dce37ae8'}\n\n```{.r .cell-code}\nload(\"workspace_2022-08-10.RData\")\n```\n:::\n\n\n## System commands\n\nGet working directory with `getwd()`:\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-17_26a6c9dfbddd4b91ab7c91836f6b47d6'}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\nSet the working directory with `setwd()`:\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-18_340fd1ecbd498c89c0c94bafae14e328'}\n\n```{.r .cell-code}\nsetwd(\"/Data/\")\n```\n:::\n\n\nYou can set a different working directory with `setwd()`.\n\nList files in current directory:\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-19_6391bd83d0e26ef7a81cd4c9d5b76e6e'}\n\n```{.r .cell-code}\ndir()\n```\n:::\n\n\nYou can send operating system commands using `system()`:\n\n\n::: {.cell hash='DataIO_cache/html/unnamed-chunk-20_70e3704bc253d0737832bff87d2a8d10'}\n\n```{.r .cell-code}\nsystem(\"uname -a\")\n```\n:::\n\n\nNote: See issue [here](https://stackoverflow.com/questions/27388964/rmarkdown-not-outputting-results-of-system-command-to-html-file){target=\"_blank\"}.\n\n## Read other common tabular data third-party formats\n\n| File type          | File Extension          | `package::function()`   |\n| ------------------:|------------------------:|:------------------------|\n| JSON               | `.json`                 | `jsonlite::read_json()` |\n| Stata data         | `.dta`                  | `haven::read_dta()`     |\n| SPSS data          | `.por`, `.sav`, `.zsav` | `haven::read_spss()`    |\n| SAS transport file | `.xpt`                  | `haven::read_xpt()`     |\n| Matlab data        | `.mat`                  | `rmatio::read.mat()`    |\n| Apache Arrow       | `.arrow`                | `arrow::read_arrow()`   |\n| Apache Arrow       | `.feather`              | `arrow::read_feather()` |\n| Apache Arrow       | `.parquet`              | `arrow::read_parquet()` |\n| Weka ARFF          | `.arff`                 | `farff::readARFF()`     |\n\n\n## See also\n\n- [fast data I/O with data.table](dtDataIO.qmd)\n\n## Resources\n\n- [R Data Import/Export](https://cran.r-project.org/doc/manuals/r-release/R-data.html#XML){target=\"_blank\"}\nby the R Core Team.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
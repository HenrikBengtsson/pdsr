{
  "hash": "f056d3e9ce4f8f00bf50032c8d8a993d",
  "result": {
    "markdown": "---\nexecute:\n  cache: true\nknitr:\n  opts_chunk: \n    comment: ''\n---\n\n# Control Flow {#sec-controlflow}\n\nCode is often executed non-linearly (i.e. not line-by-line). Control flow (or flow \nof control) operations define the order in which code segments are executed.\n<br><br>\nExecution is often conditional (using `if - else` or `switch()`).\n<br><br>\nSegments of code may be repeated a defined number of times (`for`-loop) or as \nlong as certain conditions are met (`while`-loop). Any loop can be cut\nshort if needed.\n<br><br>\nControl flow operations form some of the fundamental building blocks of \nprograms. Each operation is very simple - combine enough of them and you can \nbuild up to arbitrary complexity.\n<br><br>\n\n* **`if`** [Condition] [Expression] **`else`** [Alternate Expression]\n* **`for`** [Variable in Sequence] do [Expression]\n* **`while`** [Condition] do [Expression]\n* **`repeat`** [Expression] until **`break`**`\n* **`break`** - break out of **`for`**, **`while`**or **`repeat`**loop\n* **`next`** - skip current iteration and proceed to next\n\n::: callout-tip\nTo access the documentation for `if`, `for`, `while`, or `repeat`, surround the command with backticks, e.g. `?if`. Alternatively, just use `help(\"if\")`.\n:::\n\n## Conditionals \n\n### `if` - `else`\n\nConsider a [systolic blood pressure](https://www.ucsfhealth.org/medical-tests/blood-pressure-measurement) \nmeasurement:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-1_4710189c52a1a56acfd350decf3f5919'}\n\n```{.r .cell-code}\nSBP <- 146 # mmHg\nif (SBP <= 120) {\n  cat(\"SBP is normal\")\n} else {\n  cat(\"SBP is high\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSBP is high\n```\n:::\n:::\n\n\n### `if` - `else if` - `else`\n\nConsider a single [blood sodium](https://www.ucsfhealth.org/medical-tests/sodium-blood-test) result\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-2_9ed34a91f435cdfa66e93d2974911245'}\n\n```{.r .cell-code}\nNa <- 142 # mEq/L\nNa\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 142\n```\n:::\n\n```{.r .cell-code}\nif (Na > 145) {\n  result <- \"Hypernatremia\"\n} else if (Na < 135) {\n  result <- \"Hyponatremia\"\n} else {\n  result <- \"Normal\"\n}\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Normal\"\n```\n:::\n:::\n\n\n### Conditional assignment with `if` - `else`\n\nYou can directly assign the output of an `if` statement to an object.\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-3_5d8d86ff8792e4fff7f9d7747d21c4ff'}\n\n```{.r .cell-code}\nNa <- 142 # mEq/L\nresult <- if (Na > 145) {\n  \"Hypernatremia\"\n} else if (Na < 135) {\n  \"Hyponatremia\"\n} else {\n  \"Normal\"\n}\n```\n:::\n\n\n### Conditional assignment with `ifelse()`\n\n`ifelse()` is [vectorized](#vectorization) and can be a great, compact \nmethod of conditional assignment.\n\nConsider a vector of [blood bilirubin levels](https://www.ucsfhealth.org/medical-tests/bilirubin-blood-test):\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-4_e38742fedd16cd43e244e280df92a4a7'}\n\n```{.r .cell-code}\nconjBil <- sample(runif(100, min = 0, max = .5), size = 20)\nconjBil\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.461145930 0.105435041 0.229740298 0.477618796 0.412575831 0.441935319\n [7] 0.110693866 0.059623988 0.376071355 0.007490981 0.313920232 0.098713266\n[13] 0.067939554 0.124760037 0.317867626 0.020310426 0.079074538 0.080229382\n[19] 0.308797997 0.478650351\n```\n:::\n:::\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-5_45407704c419ac39d69f6642dbf59dd3'}\n\n```{.r .cell-code}\nconjBil_bin <- ifelse(conjBil > .3, \"Hyperbilirubinemia\", \"Normal\")\nconjBil_bin\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Normal\"             \"Hyperbilirubinemia\" \"Hyperbilirubinemia\"\n [4] \"Normal\"             \"Normal\"             \"Hyperbilirubinemia\"\n [7] \"Normal\"             \"Normal\"             \"Normal\"            \n[10] \"Hyperbilirubinemia\" \"Hyperbilirubinemia\" \"Normal\"            \n[13] \"Normal\"             \"Normal\"             \"Hyperbilirubinemia\"\n[16] \"Hyperbilirubinemia\" \"Hyperbilirubinemia\" \"Normal\"            \n[19] \"Hyperbilirubinemia\" \"Hyperbilirubinemia\"\n```\n:::\n:::\n\n\nThe values assigned to the \"yes\" and \"no\" conditions can be a vector of the\nsame length as the first argument.\n\nConsider an arbitrary numeric example:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-6_fc773e806b6cae8c6855d2df5909b181'}\n\n```{.r .cell-code}\na <- 1:10\ny <- ifelse(a > 5, 11:20, 21:30)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 21 22 23 24 25 16 17 18 19 20\n```\n:::\n:::\n\n\nSo what did this do?\n\nIt is equivalent to an `if-else` statement within a `for`-loop:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-7_7fd724b7afd1446633762cb23e00eb7f'}\n\n```{.r .cell-code}\nidl <- a > 5\nyes <- 11:20\nno <- 21:30\nout <- vector(\"numeric\", length = 10)\nfor (i in seq(a)) {\n  if (idl[i]) {\n    out[i] <- yes[i]\n  } else {\n    out[i] <- no[i]\n  }\n}\nout\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 21 22 23 24 25 16 17 18 19 20\n```\n:::\n:::\n\n\ni.e.\n\n* Create a logical index using `test`\n* for each element `i` in `test`:\n    * if the element `i` is TRUE, return `yes[i]`, else `no[i]`\n\nFor another example, lets take integers `1:11` and square the odd ones and cube \nthe even ones. We use the modulo operation `%%` to test if each element is odd \nor even:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-8_69d5ba9d4c71dd655a9a79656bfe5cdd'}\n\n```{.r .cell-code}\nx <- 1:11\nxsc <- ifelse(x %% 2 == 0, c(1:11)^3, c(1:11)^2)\nxsc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]    1    8    9   64   25  216   49  512   81 1000  121\n```\n:::\n:::\n\n\n## Loops\n\n### `for` loops {#forloops}\n\n::: callout-tip\nUse `for` loops to repeat execution of a block of code a certain number of \ntimes.\n:::\n\nThe for loop syntax is `for (var in vector) expression`.\n\nThe `expression` is usually surrounded by curly brackets and can include any \nnumber of lines, any amount of code:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-9_d16da63936ed88a5e8eaf028961fe6db'}\n\n```{.r .cell-code}\nfor (i in 1:3) {\n  cat(\"This is item\", i, \"\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is item 1 \nThis is item 2 \nThis is item 3 \n```\n:::\n:::\n\n\nThe loop executes for `length(vector)` times.  \nAt iteration `i`, `var = vector[i]`.  \nYou will often use the value of `var` inside the loop - but you don't have to:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-10_cadffbe1fe0b76633c367e49a2c325bb'}\n\n```{.r .cell-code}\nfor (i in seq(10)) {\n  cat(i^2, \"\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 \n4 \n9 \n16 \n25 \n36 \n49 \n64 \n81 \n100 \n```\n:::\n:::\n\n\n`letters` is a built-in constant that includes all 26 lowercase letters of the \nRoman alphabet; `LETTERS` similarly includes all 26 uppercase letters.\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-11_d51c45dd7069209042e9e5970469bac7'}\n\n```{.r .cell-code}\nfor (letter in letters[1:5]) {\n  cat(letter, \"is a letter!\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na is a letter!\nb is a letter!\nc is a letter!\nd is a letter!\ne is a letter!\n```\n:::\n:::\n\n\n#### Working on data within a for loop {#fordata}\n\nA common scenario involves working on a data object, whether a vector, matrix, \nlist, data.frame, and performing an operation on each elements, one at a time. \nWhile a lot of these operations are often performed using \n[loop functions](#loopfns) instead, for-loops can also be used.\n\nYou can start by initializing an object of the appropriate class and dimensions \nto hold the output. Then, each iteration of the for loop will assign its output \nto the corresponding element/s of this object.\n\nIn the following example we transform the `mtcars` built-in dataset's features \nto [z-scores](#zscore). The built-in command `scale()` will do this for quickly \nand conveniently, this is for demonstration purposes:\n\nFirst, initialize the output to be the desired class and dimensions:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-12_b1355c683f661132609173ffe8dc2163'}\n\n```{.r .cell-code}\nclass(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\ndim(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32 11\n```\n:::\n\n```{.r .cell-code}\nmtcars_z <- data.frame(matrix(0, nrow = 32, ncol = 11))\ncolnames(mtcars_z) <- colnames(mtcars)\n```\n:::\n\n\nor, it is simpler to just make a copy of `mtcars` to be overwritten by the \nfor loop later:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-13_d9e9589e66ac652db1c29ce060691f31'}\n\n```{.r .cell-code}\nmtcars_z <- mtcars\n```\n:::\n\n\nStandardization involves subtracting the mean and dividing by the standard \ndeviation.\n\nHere is the for loop - we iterate through each column and assign the \ntransformed data:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-14_ddc3518e5aa3abe070a3417ee6d50e3b'}\n\n```{.r .cell-code}\nfor (i in 1:ncol(mtcars)) {\n  mtcars_z[, i] <- (mtcars[, i] - mean(mtcars[, i])) / sd(mtcars[, i])\n}\n```\n:::\n\n\nLet's compare to the output of the `scale()` command by print the first 3 rows \nand columns of each:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-15_59e990cc0735c42496990bbd8d7c7158'}\n\n```{.r .cell-code}\nmtcars_z2 <- as.data.frame(scale(mtcars))\nmtcars_z[1:3, 1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    mpg        cyl       disp\nMazda RX4     0.1508848 -0.1049878 -0.5706198\nMazda RX4 Wag 0.1508848 -0.1049878 -0.5706198\nDatsun 710    0.4495434 -1.2248578 -0.9901821\n```\n:::\n\n```{.r .cell-code}\nmtcars_z2[1:3, 1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    mpg        cyl       disp\nMazda RX4     0.1508848 -0.1049878 -0.5706198\nMazda RX4 Wag 0.1508848 -0.1049878 -0.5706198\nDatsun 710    0.4495434 -1.2248578 -0.9901821\n```\n:::\n:::\n\n\nNote that we wrapped `scale()` around `as.data.frame()` because it outputs a \nmatrix.\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-16_9af082bcaaf914ae5440baaf01cdff54'}\n\n```{.r .cell-code}\nall.equal(mtcars_z, mtcars_z2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n#### Nested `for` loops\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-17_0a050208e24101e143797e6f5a89de29'}\n\n```{.r .cell-code}\na <- matrix(1:9, nrow = 3)\nfor (i in seq(3)) {\n  for (j in seq(3)) {\n    cat(\"  a[\", i, \",\", j, \"] is \", a[i, j], \"\\n\", sep = \"\")\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a[1,1] is 1\n  a[1,2] is 4\n  a[1,3] is 7\n  a[2,1] is 2\n  a[2,2] is 5\n  a[2,3] is 8\n  a[3,1] is 3\n  a[3,2] is 6\n  a[3,3] is 9\n```\n:::\n:::\n\n\n#### Printing within a `for` loop\n\nIn the R console objects get printed just by typing their name:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-18_e2801272dbc169985f3db397ff173a61'}\n\n```{.r .cell-code}\na <- 4\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n# same as\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nThis \"automatic printing\" does not happen within a `for` loop, so you simply \nuse `print()` (or `cat()` as preferred):\n\nThe following loop does not print out anything:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-19_af6dd0a3069e574ca1ee048e8eb3fcc6'}\n\n```{.r .cell-code}\na <- 0\nfor (i in 1:4) {\n  a <- a + i^2\n  a\n}\n```\n:::\n\n\nbut this does:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-20_80f80d591c70b900aeeb6354bdf402a3'}\n\n```{.r .cell-code}\na <- 0\nfor (i in 1:4) {\n  a <- a + i^2\n  print(a)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 5\n[1] 14\n[1] 30\n```\n:::\n:::\n\n\n### Conditional assignment with multiple options using `switch()`\n\nInstead of using multiple `if` - `else if` statements, we can build a more \ncompact call using `switch`, which is best suited for options that are of type \ncharacter, rather than numeric.\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-21_32f84e548b94b354dc1415bc3d5e5111'}\n\n```{.r .cell-code}\ny <- sample(letters[seq(8)], size = 1)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"f\"\n```\n:::\n\n```{.r .cell-code}\noutput <- switch(y,                      # 1. Some expression\n                 a = \"Well done\",        # 2. The possible values of the expression, unquoted\n                 b = \"Not bad\",          #    followed by the `=` and the conditional output\n                 c = \"Nice try\",\n                 d = \"Not a nice try\",\n                 e = \"This is bad\",\n                 f = \"Fail\",\n                 \"This is not even a possible grade\") # 3. An optional last argument is the default\n                                                      #    value, if there is no match above\noutput\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Fail\"\n```\n:::\n:::\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-22_f48271f41698091a247b3270afdfc697'}\n\n```{.r .cell-code}\na <- rnorm(1)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9393736\n```\n:::\n\n```{.r .cell-code}\nout <- switch(as.integer(a > 0),\n              `1` = \"Input is positive\",\n              `0` = \"Input is not positive\")\nout\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Input is positive\"\n```\n:::\n:::\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-23_dfc8879eab2cf9457f32920a5ff2f291'}\n\n```{.r .cell-code}\na <- rnorm(1)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7872802\n```\n:::\n\n```{.r .cell-code}\nout <- switch(as.character(a > 0),\n              `TRUE` = \"Input is positive\",\n              `FALSE` = \"Input is not positive\")\nout\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Input is positive\"\n```\n:::\n:::\n\n\n#### `switch` example: HTTP Status Codes\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-24_46ef65ce5be05fa75c9bf785846bde52'}\n\n```{.r .cell-code}\nstatus <- sample(400:410, size = 1)\nstatus\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 402\n```\n:::\n\n```{.r .cell-code}\nresponse <- switch(as.character(status),\n                   `400` = \"Bad Request\",\n                   `401` = \"Unauthorized\",\n                   `402` = \"Payment Required\",\n                   `403` = \"Forbidden\",\n                   `404` = \"Not Found\",\n                   `405` = \"Method Not Allowed\",\n                   `406` = \"Not Acceptable\",\n                   `407` = \"Proxy Authentication Required\",\n                   `408` = \"Request Timeout\",\n                   `409` = \"Conflict\",\n                   `410` = \"Gone\")\nresponse\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Payment Required\"\n```\n:::\n:::\n\n\n### `while` loops\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-25_fcb17b19a708ea0c357bcee9ddda4bc5'}\n\n```{.r .cell-code}\na <- 10\nwhile (a > 0) {\n  a <- a - 1\n  cat(\"a is equal to\", a, \"\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na is equal to 9 \na is equal to 8 \na is equal to 7 \na is equal to 6 \na is equal to 5 \na is equal to 4 \na is equal to 3 \na is equal to 2 \na is equal to 1 \na is equal to 0 \n```\n:::\n\n```{.r .cell-code}\ncat(\"when all is said and done, a is\", a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nwhen all is said and done, a is 0\n```\n:::\n:::\n\n\n### `break` stops execution of a loop:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-26_83d8020767fcb3d76e7cad4e58800fa9'}\n\n```{.r .cell-code}\nfor (i in seq(10)) {\n  if (i == 5) break\n  cat(i, \"squared is\", i^2, \"\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 squared is 1 \n2 squared is 4 \n3 squared is 9 \n4 squared is 16 \n```\n:::\n:::\n\n\n### `next` skips the current iteration:\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-27_12dc1489936f2560dd9bd896b18c7d0a'}\n\n```{.r .cell-code}\nfor (i in seq(7)) {\n  if (i == 5) next\n  cat(i, \"squared is\", i^2, \"\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 squared is 1 \n2 squared is 4 \n3 squared is 9 \n4 squared is 16 \n6 squared is 36 \n7 squared is 49 \n```\n:::\n:::\n\n\n### `repeat` loops\n\nA `repeat` block initiates an infinite loop and you **must** use `break` to \nexit. They are less commonly used.\n\n\n::: {.cell hash='ControlFlow_cache/html/unnamed-chunk-28_ca11c0b51de4072d7dc3b717390e5f8c'}\n\n```{.r .cell-code}\ni <- 10\nrepeat {\n  i <- i - 1\n  if (i == 0) break\n  cat(\"i is\", i, \"\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ni is 9 \ni is 8 \ni is 7 \ni is 6 \ni is 5 \ni is 4 \ni is 3 \ni is 2 \ni is 1 \n```\n:::\n:::\n\n\n::: callout-note\nAny number of control flow operations can be combined and nested as needed.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
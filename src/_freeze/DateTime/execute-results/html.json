{
  "hash": "98d6c1db2a0c80336ed5c49e79fae20c",
  "result": {
    "markdown": "---\nknitr:\n  opts_chunk:\n    comment: \"\"\n    error: true\n---\n\n# Date and Time {#datetime}\n\n\n::: {.cell}\n\n:::\n\n\nR includes support for working with date and time data. There are three builtin classes:  \n\n- **`Date`**: Represents **date** information (not time)\n- **`POSIXct`**: Represents **date & time** information as the signed number of seconds \nsince January 1, 1970 ([Unix Time a.k.a. POSIX time a.k.a. Epoch time](https://en.wikipedia.org/wiki/Unix_time))\n- **`POSIXlt`**: Represents **date & time** information as a named list \n(See `base::DateTimeClasses`)\n\nBackground info: \n[Portable Operating System Interface (POSIX)](https://en.wikipedia.org/wiki/POSIX) is a \nset of standards for maintaining compatibility among operating systems.\n\n## Date format specifications\n\nThis list serves as reference for formatting functions later in the chapter.<br><br>\n\n- **`%Y`**: Year with century, (0-9999 accepted) e.g. `2020`\n- **`%y`**: 2-digit year, e.g. `22`\n- **`%m`**: Month, 01-12, e.g. `03`\n- **`%d`**: Day, 01-31, e.g. `04`\n- **`%H`**: Hours, 00-23, e.g. `13`\n- **`%I`**: Hours, 01-12, e.g. `01`\n- **`%M`**: Minutes, 00-59, e.g. `38`\n- **`%S`**: Seconds, 00-61 (sic!) allowing for up to two leap seconds, e.g. `54`\n\nThere are many more specifications available, see the Details section in the \ndocumentation for `strptime()`.\n<br><br>\nNote that some conversions are \n[locale](https://en.wikipedia.org/wiki/Locale_(computer_software))-specific, i.e. will\nnot work the same across systems.\n<br><br>\nRegarding the ambiguous `%y`, the documentation states:\n\"`%y`   Year without century (00–99). On input, values 00 to 68 are prefixed by 20 and 69 to 99 by 19 – that is the behaviour specified by the 2018 POSIX standard, but it does also say ‘it is expected that in a future version the default century inferred from a 2-digit year will change’.\"\n\n## Date objects\n\n### Character to Date: `as.Date()`\n\nYou can create a `Date` object from a string:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-2_9d24b7ed512d94d52faedc8b4837bae7'}\n\n```{.r .cell-code}\nx <- as.Date(\"1981-02-12\")\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1981-02-12\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n\nThe `tryFormats` argument defines which format or formats are recognized.\n<br><br>\nThe default is `tryFormats = c(\"%Y-%m-%d\", \"%Y/%m/%d\")`, i.e. will recognize dates of the \nform \"2020-11-16\" or \"2020/11/16\".\n<br><br>\nLet's see what happens if a date format is *not* recognized.\nConsider the 16th of November, 2021 in the following format:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-3_cabea9db415ce354715fb96174430ea0'}\n\n```{.r .cell-code}\nx <- (\"11.16.21\")\nas.Date(x)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in charToDate(x): character string is not in a standard unambiguous format\n```\n\n\n:::\n:::\n\n\nPassing the appropriate format, will allow the date to be read correctly:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-4_0723b3ecd096d9b28c9792890de70849'}\n\n```{.r .cell-code}\nas.Date(x, tryFormats = \"%m.%d.%y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2021-11-16\"\n```\n\n\n:::\n:::\n\n\n###  Get current date & time\n\nGet current data:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-5_358a54fcd6eedaf93602a452f6ae442a'}\n\n```{.r .cell-code}\ntoday <- Sys.Date()\ntoday\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-09-26\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n\nGet current date and time:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-6_928dba3a4e9524ecd7e8ab026e5085f6'}\n\n```{.r .cell-code}\nnow <- Sys.time()\nnow\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-09-26 23:02:49 PDT\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(now)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"POSIXct\" \"POSIXt\" \n```\n\n\n:::\n:::\n\n\nGet local timezone:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-7_fefe907037b97b993e43ae0c0de782d7'}\n\n```{.r .cell-code}\nSys.timezone()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"America/Los_Angeles\"\n```\n\n\n:::\n:::\n\n\n### Math on Dates\n\nThe reason we care about Date objects in R is because we can apply useful mathematical \noperations on them.\n<br><br>\nFor example, we can subtract date objects to get time intervals:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-8_c39ee98f6c9eb58b02ec52cb56d035ea'}\n\n```{.r .cell-code}\nstart_date <- as.Date(\"2020-09-15\")\ntime_diff <- Sys.Date() - start_date\ntime_diff\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 1106 days\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(time_diff)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"difftime\"\n```\n\n\n:::\n:::\n\n\nNote: While you can use the subtraction operator `-`, it is advised you use the \n`difftime()` function to perform subtraction on dates instead, because it allows you to \nspecify units.\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-9_cafae744ea2fe1051d246342e9aa7448'}\n\n```{.r .cell-code}\ntimepoint1 <- as.Date(\"2020-01-07\")\ntimepoint2 <- as.Date(\"2020-02-03\")\ndifftime(timepoint2, timepoint1, units = \"weeks\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 3.857143 weeks\n```\n\n\n:::\n\n```{.r .cell-code}\ndifftime(timepoint2, timepoint1, units = \"days\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 27 days\n```\n\n\n:::\n\n```{.r .cell-code}\ndifftime(timepoint2, timepoint1, units = \"hours\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 648 hours\n```\n\n\n:::\n\n```{.r .cell-code}\ndifftime(timepoint2, timepoint1, units = \"mins\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 38880 mins\n```\n\n\n:::\n\n```{.r .cell-code}\ndifftime(timepoint2, timepoint1, units = \"secs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 2332800 secs\n```\n\n\n:::\n:::\n\n\n::: callout-tip\nWhy is there no option for \"months\" or \"years\" in units?\n\nBecause, unlike seconds, minutes, hours, days, and weeks,\nmonths and years do not have fixed length,\ni.e. literally a month or a year are not \"units\" of time.\n<br><br>\nYou can always get a difference in days and divide by \n[365.242](https://www.nist.gov/pml/time-and-frequency-division/popular-links/time-frequency-z/time-and-frequency-z-l).\n:::\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-10_eba1dde28fe6e4154bdfaaffcc1b7ecb'}\n\n```{.r .cell-code}\nDOB <- as.Date(\"1969-08-04\")\nAge <- difftime(Sys.Date(), DOB, units = \"days\")\nAge\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 19776 days\n```\n\n\n:::\n:::\n\n`difftime()` outputs objects of class `difftime`:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-11_ea839b77c61a8e3f6cc68a482b2b4875'}\n\n```{.r .cell-code}\nclass(Age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"difftime\"\n```\n\n\n:::\n:::\n\n\n::: callout-caution\nIf you convert the output of `difftime()` using an appropriate mathematical operation,\ne.g. division, the units, which are no longer correct, will remain. You should use \n`as.numeric()` to convert the difftime object to a regular numeric vector without units.\n:::\n\nNote that the units remain after a mathematical operation:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-12_8729013747cc87ae7ba41c2c16b0a1c0'}\n\n```{.r .cell-code}\nAge <- Age / 365.242\nAge\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 54.14492 days\n```\n\n\n:::\n:::\n\n\nEliminate them by converting to numeric:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-13_a4044bc6ec82c4e3308cb061a45f3def'}\n\n```{.r .cell-code}\nAge <- as.numeric(difftime(Sys.Date(), DOB, units = \"days\") / 365.242)\nAge\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 54.14766\n```\n\n\n:::\n:::\n\n\n### mean/median Date\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-14_8076eaabc61cef8082b3bc98dee2dcd7'}\n\n```{.r .cell-code}\nx <- as.Date(c(5480, 5723, 5987, 6992), origin = \"1970-01-01\")\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1985-01-02\" \"1985-09-02\" \"1986-05-24\" \"1989-02-22\"\n```\n\n\n:::\n:::\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-15_5926422c8c53077a45c8de4d1039f84a'}\n\n```{.r .cell-code}\nmean_date <- mean(x)\nmean_date\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1986-07-21\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(mean_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-16_6fafdf4e2f92116fe12400ffba8b6bf8'}\n\n```{.r .cell-code}\nmedian_date <- median(x)\nmedian_date\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1986-01-12\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(median_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n\nTo verify the median, we can do a mathematical operation using multiplication, subtraction,\nand addition, and the result is still a Date(!):\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-17_0757f33862ed7f0ec2a425a842f8e5af'}\n\n```{.r .cell-code}\nmedian_date_too <- x[2] + .5 * (x[3] - x[2])\n```\n:::\n\n\n### Sequence of dates\n\nYou can create a sequence of dates using `seq()`.  \nIf an integer is passed to `by`, the unit is assumed to be days:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-18_82659199bec8c8e80aab568a6b1991c8'}\n\n```{.r .cell-code}\nstart_date <- as.Date(\"2020-09-14\")\nend_date <- as.Date(\"2020-12-07\")\nseq(from = start_date, to = end_date, by = 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"2020-09-14\" \"2020-09-21\" \"2020-09-28\" \"2020-10-05\" \"2020-10-12\"\n [6] \"2020-10-19\" \"2020-10-26\" \"2020-11-02\" \"2020-11-09\" \"2020-11-16\"\n[11] \"2020-11-23\" \"2020-11-30\" \"2020-12-07\"\n```\n\n\n:::\n:::\n\n\nUnlike mathematical operations like `difftime()` which require strict units of time, \n`seq()` can work with months and years.\n\nArgument `by` can be one of:\n\n\"day\", \"week\", \"month\", \"quarter\", \"year\".\n\nThe above is therefore equivalent to:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-19_5f2528c32ac86d54c50e8ae8a0dc7506'}\n\n```{.r .cell-code}\nseq(from = start_date, to = end_date, by = \"week\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"2020-09-14\" \"2020-09-21\" \"2020-09-28\" \"2020-10-05\" \"2020-10-12\"\n [6] \"2020-10-19\" \"2020-10-26\" \"2020-11-02\" \"2020-11-09\" \"2020-11-16\"\n[11] \"2020-11-23\" \"2020-11-30\" \"2020-12-07\"\n```\n\n\n:::\n:::\n\n\nAs with numeric sequences, you can also define the `length.out` argument:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-20_2f06a20865275808a4d7413cfb30c9df'}\n\n```{.r .cell-code}\nstart_date <- as.Date(\"2020-01-20\")\nseq(from = start_date, by = \"year\", length.out = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2020-01-20\" \"2021-01-20\" \"2022-01-20\" \"2023-01-20\"\n```\n\n\n:::\n:::\n\n\nAn integer can be provided as part of character input to `by`:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-21_19ccb1d1739108cda52f19b54f72b0d8'}\n\n```{.r .cell-code}\nstart_date <- as.Date(\"2020-01-20\")\nend_date <- as.Date(\"2021-01-20\")\nseq(start_date, end_date, by = \"2 months\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2020-01-20\" \"2020-03-20\" \"2020-05-20\" \"2020-07-20\" \"2020-09-20\"\n[6] \"2020-11-20\" \"2021-01-20\"\n```\n\n\n:::\n:::\n\n\n## Date-Time objects\n\n### Character to Date-Time: `as.POSIXct()`, `as.POSIXlt()`, `strptime()`: \n\nAs always, it can be very informative to look at the source code. Many of these \nfunctions call each other internally.\n\nRead `strptime()`'s documentation for conversion specifications. These define the order\n and format of characters to be read as year, month, day, hour, minute, and second \n information.\n\nFor example, the international ISO 8601 standard is defined as:  \n`\"%Y-%m-%d %H:%M:%S\"`  \n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-22_9c03f6e980edd7ba49df4471594c4edf'}\n\n```{.r .cell-code}\ndt <- \"2020-03-04 13:38:54\"\ndt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2020-03-04 13:38:54\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(dt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\nUse `attributes()` to see the difference between the `POSIXct` and `POSIXlt` classes:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-23_b5c252ebc1adb35e417564e3f8b0b149'}\n\n```{.r .cell-code}\ndt_posixct <- as.POSIXct(dt)\ndt_posixct\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2020-03-04 13:38:54 PST\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(dt_posixct)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"POSIXct\" \"POSIXt\" \n```\n\n\n:::\n\n```{.r .cell-code}\nstr(dt_posixct)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n POSIXct[1:1], format: \"2020-03-04 13:38:54\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(dt_posixct)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$class\n[1] \"POSIXct\" \"POSIXt\" \n\n$tzone\n[1] \"\"\n```\n\n\n:::\n:::\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-24_67ad2a6d5dc88f10bd8933e26dcbe642'}\n\n```{.r .cell-code}\ndt_posixlt <- as.POSIXlt(dt)\ndt_posixlt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2020-03-04 13:38:54 PST\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(dt_posixlt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"POSIXlt\" \"POSIXt\" \n```\n\n\n:::\n\n```{.r .cell-code}\nstr(dt_posixlt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n POSIXlt[1:1], format: \"2020-03-04 13:38:54\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndt_posixlt$year\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 120\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(dt_posixlt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$names\n [1] \"sec\"    \"min\"    \"hour\"   \"mday\"   \"mon\"    \"year\"   \"wday\"   \"yday\"  \n [9] \"isdst\"  \"zone\"   \"gmtoff\"\n\n$class\n[1] \"POSIXlt\" \"POSIXt\" \n\n$tzone\n[1] \"\"    \"PST\" \"PDT\"\n\n$balanced\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nYou can compose a large number of combinations of specification to match your data.\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-25_14809f7f85f3ea47fc56b3c7da1d6260'}\n\n```{.r .cell-code}\ndt2 <- c(\"03.04.20 01:38.54 pm\")\ndt2_posix <- as.POSIXct(dt2, format = \"%m.%d.%y %I:%M.%S %p\")\ndt2_posix\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2020-03-04 13:38:54 PST\"\n```\n\n\n:::\n:::\n\n\n## `format()` Date\n\n`format()` operates on Date and POSIX objects to convert between representations\n\nDefine Date in US format:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-26_4fcadd96e3028436e95f42b5d7985ecd'}\n\n```{.r .cell-code}\ndt_us <- as.Date(\"07-04-2020\", format = \"%m-%d-%Y\")\ndt_us\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2020-07-04\"\n```\n\n\n:::\n:::\n\n\nConvert to European format:\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-27_90cf8f630e35132337e5bbc5260ee32a'}\n\n```{.r .cell-code}\ndt_eu <- format(dt_us, \"%d.%m.%y\")\ndt_eu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"04.07.20\"\n```\n\n\n:::\n:::\n\n\n## `format()` POSIXct\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-28_64bdddae986fdfffc067a7e2c0264f2c'}\n\n```{.r .cell-code}\ndt <- as.POSIXct(\"2020-03-04 13:38:54\")\ndt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2020-03-04 13:38:54 PST\"\n```\n\n\n:::\n:::\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-29_691dbdd4930d1055d0bfcf0d27a496ae'}\n\n```{.r .cell-code}\nformat(dt, \"%m/%d/%Y @ %H:%M:%S\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"03/04/2020 @ 13:38:54\"\n```\n\n\n:::\n:::\n\n\n## Extract partial date information\n\nR includes convenient functions to extract particular seasonal information\n\n- **weekdays()**: Get name of day of the week\n- **months()**: Get name of month\n- **quarters()**: Get quarter\n- **julian()**: Get number of days since a specific origin\n\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-30_ac2a8dad4378d275d5b4d8f465374d0c'}\n\n```{.r .cell-code}\nx <- as.Date(c(18266, 18299, 18359, 18465), origin = \"1970-01-01\")\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2020-01-05\" \"2020-02-07\" \"2020-04-07\" \"2020-07-22\"\n```\n\n\n:::\n:::\n\n::: {.cell hash='DateTime_cache/html/unnamed-chunk-31_dfe8aef00e2e28853a336e5733ff403c'}\n\n```{.r .cell-code}\nweekdays(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Sunday\"    \"Friday\"    \"Tuesday\"   \"Wednesday\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmonths(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"January\"  \"February\" \"April\"    \"July\"    \n```\n\n\n:::\n\n```{.r .cell-code}\nquarters(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Q1\" \"Q1\" \"Q2\" \"Q3\"\n```\n\n\n:::\n\n```{.r .cell-code}\njulian(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18266 18299 18359 18465\nattr(,\"origin\")\n[1] \"1970-01-01\"\n```\n\n\n:::\n\n```{.r .cell-code}\njulian(x, origin = as.Date(\"2020-01-01\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]   4  37  97 203\nattr(,\"origin\")\n[1] \"2020-01-01\"\n```\n\n\n:::\n:::\n\n\n## See also\n\n- [Handling Dates with **lubridate**](lubridate.qmd)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
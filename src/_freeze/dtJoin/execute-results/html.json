{
  "hash": "bc982f4de1c8921cb2fc278140538869",
  "result": {
    "markdown": "---\nknitr:\n  opts_chunk:\n    comment: \"\"\n---\n\n# Joins {#sec-dtjoin}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\n```\n:::\n\n\n`data.table` allows you to perform table joins with either:\n\n- the base `merge()` function using the same syntax as for data.frame objects or \n- Using bracket notation - unique to `data.table` objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- data.table(PID = c(1:9),\n                Hospital = c(\"UCSF\", \"HUP\", \"Stanford\", \n                             \"Stanford\", \"UCSF\", \"HUP\", \n                             \"HUP\", \"Stanford\", \"UCSF\"),\n                Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),\n                Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0),\n                key = \"PID\")\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <PID>\n     PID Hospital   Age   Sex\n   <int>   <char> <num> <num>\n1:     1     UCSF    22     1\n2:     2      HUP    34     1\n3:     3 Stanford    41     0\n4:     4 Stanford    19     1\n5:     5     UCSF    53     0\n6:     6      HUP    21     0\n7:     7      HUP    63     1\n8:     8 Stanford    22     0\n9:     9     UCSF    19     0\n```\n\n\n:::\n\n```{.r .cell-code}\nb <- data.table(PID = c(6:12),\n                V1 = c(153, 89, 112, 228,  91, 190, 101),\n                Department = c(\"Neurology\", \"Radiology\", \"Emergency\",\n                               \"Cardiology\", \"Surgery\", \"Neurology\",\n                               \"Psychiatry\"),\n                key = \"PID\")\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <PID>\n     PID    V1 Department\n   <int> <num>     <char>\n1:     6   153  Neurology\n2:     7    89  Radiology\n3:     8   112  Emergency\n4:     9   228 Cardiology\n5:    10    91    Surgery\n6:    11   190  Neurology\n7:    12   101 Psychiatry\n```\n\n\n:::\n:::\n\n\nIn the above command we use the `key` argument to set `PID` as key. This can be \nperformed after the `data.table` has been created using the `setkey()` command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetkey(a, PID)\n```\n:::\n\n\nMultiple keys can be set, in order, with the same `setkey()` command, separated \nby commas, e.g.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetkey(a, PID, Hospital)\n```\n:::\n\n\nKeys sort the data.table by the corresponding columns and can be used to \nperform left and right joins with bracket notation seen later.\n\n## Inner\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerge(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <PID>\n     PID Hospital   Age   Sex    V1 Department\n   <int>   <char> <num> <num> <num>     <char>\n1:     6      HUP    21     0   153  Neurology\n2:     7      HUP    63     1    89  Radiology\n3:     8 Stanford    22     0   112  Emergency\n4:     9     UCSF    19     0   228 Cardiology\n```\n\n\n:::\n:::\n\n\n## Outer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerge(a, b, all = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <PID>\n      PID Hospital   Age   Sex    V1 Department\n    <int>   <char> <num> <num> <num>     <char>\n 1:     1     UCSF    22     1    NA       <NA>\n 2:     2      HUP    34     1    NA       <NA>\n 3:     3 Stanford    41     0    NA       <NA>\n 4:     4 Stanford    19     1    NA       <NA>\n 5:     5     UCSF    53     0    NA       <NA>\n 6:     6      HUP    21     0   153  Neurology\n 7:     7      HUP    63     1    89  Radiology\n 8:     8 Stanford    22     0   112  Emergency\n 9:     9     UCSF    19     0   228 Cardiology\n10:    10     <NA>    NA    NA    91    Surgery\n11:    11     <NA>    NA    NA   190  Neurology\n12:    12     <NA>    NA    NA   101 Psychiatry\n```\n\n\n:::\n:::\n\n\n## Left outer\n\nUsing `merge()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerge(a, b, all.x = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <PID>\n     PID Hospital   Age   Sex    V1 Department\n   <int>   <char> <num> <num> <num>     <char>\n1:     1     UCSF    22     1    NA       <NA>\n2:     2      HUP    34     1    NA       <NA>\n3:     3 Stanford    41     0    NA       <NA>\n4:     4 Stanford    19     1    NA       <NA>\n5:     5     UCSF    53     0    NA       <NA>\n6:     6      HUP    21     0   153  Neurology\n7:     7      HUP    63     1    89  Radiology\n8:     8 Stanford    22     0   112  Emergency\n9:     9     UCSF    19     0   228 Cardiology\n```\n\n\n:::\n:::\n\n\nUsing bracket notation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb[a, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <PID>\n     PID    V1 Department Hospital   Age   Sex\n   <int> <num>     <char>   <char> <num> <num>\n1:     1    NA       <NA>     UCSF    22     1\n2:     2    NA       <NA>      HUP    34     1\n3:     3    NA       <NA> Stanford    41     0\n4:     4    NA       <NA> Stanford    19     1\n5:     5    NA       <NA>     UCSF    53     0\n6:     6   153  Neurology      HUP    21     0\n7:     7    89  Radiology      HUP    63     1\n8:     8   112  Emergency Stanford    22     0\n9:     9   228 Cardiology     UCSF    19     0\n```\n\n\n:::\n:::\n\n\nIf keys were not set for a and b, you could specify the column to match on \nusing the `on` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb[a, on = \"PID\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <PID>\n     PID    V1 Department Hospital   Age   Sex\n   <int> <num>     <char>   <char> <num> <num>\n1:     1    NA       <NA>     UCSF    22     1\n2:     2    NA       <NA>      HUP    34     1\n3:     3    NA       <NA> Stanford    41     0\n4:     4    NA       <NA> Stanford    19     1\n5:     5    NA       <NA>     UCSF    53     0\n6:     6   153  Neurology      HUP    21     0\n7:     7    89  Radiology      HUP    63     1\n8:     8   112  Emergency Stanford    22     0\n9:     9   228 Cardiology     UCSF    19     0\n```\n\n\n:::\n:::\n\n\n::: callout-note\nThe easy way to understand the bracket notation merges is to think that the \ndata.table inside the bracket is used to index the data.table on the outside, \ntherefore the resulting table will have rows dictated by the inside table's key.\n:::\n\n## Right outer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerge(a, b, all.y = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <PID>\n     PID Hospital   Age   Sex    V1 Department\n   <int>   <char> <num> <num> <num>     <char>\n1:     6      HUP    21     0   153  Neurology\n2:     7      HUP    63     1    89  Radiology\n3:     8 Stanford    22     0   112  Emergency\n4:     9     UCSF    19     0   228 Cardiology\n5:    10     <NA>    NA    NA    91    Surgery\n6:    11     <NA>    NA    NA   190  Neurology\n7:    12     <NA>    NA    NA   101 Psychiatry\n```\n\n\n:::\n:::\n\n\nUsing bracket notation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na[b, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <PID>\n     PID Hospital   Age   Sex    V1 Department\n   <int>   <char> <num> <num> <num>     <char>\n1:     6      HUP    21     0   153  Neurology\n2:     7      HUP    63     1    89  Radiology\n3:     8 Stanford    22     0   112  Emergency\n4:     9     UCSF    19     0   228 Cardiology\n5:    10     <NA>    NA    NA    91    Surgery\n6:    11     <NA>    NA    NA   190  Neurology\n7:    12     <NA>    NA    NA   101 Psychiatry\n```\n\n\n:::\n:::\n\n\n## See also\n\n- [base R joins](#sec-dfjoin)\n- [dplyr joins](#sec-dplyrjoin)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
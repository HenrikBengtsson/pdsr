{
  "hash": "53135b144510939cee397b2c23c356b7",
  "result": {
    "markdown": "---\nknitr:\n  opts_chunk:\n    comment: \"\"\n---\n\n# Git & GitHub: The Basics {#git}\n\n`git` is famously powerful and notoriously complex. This is a very brief introduction to a very small subset of `git`'s functionality. Multiple online resources can help you delve into `git` in considerably more depth.  \n\nFirst, some important definitions:\n\n* **Git**: System that tracks changes to code from multiple users\n    * Free and open source distributed version control system\n    * Developed in 2005 by Linus Torvalds to support Linux kernel development\n    * Used by 87.2% of developers as of 2018, according to Stack Overflow\n\n* **Repository**: Data (code) + metadata (i.e. log of changes over time)\n    * Data structure that holds metadata for a set of directories / files (set of commit objects, historical record of changes)\n\n* **GitHub**: Online service that holds Git repositories (public & private)\n    * Git repository hosting service\n    * Largest source code host in the world: > 40M users, > 100M repositories\n    * Acquired by Microsoft for $7.5 billion in 2018.\n\n## Installing git\n\nCheck if you system already includes an installation of git. If not you can download it from the official [git website](https://git-scm.com/downloads)\n\n## Basic git usage\n\nIn the system terminal, all git commands begin with `git` and are followed by a command name:  \n\n### Cloning (\"Downloading\")\n\nDownload a repository to your computer for the first time. Replace \"user\" with the username and \"repo\" with the repository name.\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit clone https://github.com/user/repo.git\n```\n:::\n\n\nThis will clone the remote repository to a folder name 'repo'. You can optionally provide a different folder name after the URL.  \n\nTo update a previously cloned repository:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit pull\n```\n:::\n\n\n### Pushing (\"Uploading\")\n\nGet info on local changes to repository:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit status\n```\n:::\n\n\nWorking locally, stage new or modified files:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit add /path/to/file\n```\n:::\n\n\nStill working locally, commit changes with an informative message:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit commit -m Fixed this or added that\n```\n:::\n\n\n(Note that the previous steps did not require an internet connection - this one does)\nPush one or multiple commits to remote repository:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit push\n```\n:::\n\n\n### Collaborating\n\nThe main way of contributing to a project is by a) making a new \"branch\" of the repository, b) making your edits, and c) either merging to master yourself or requesting your edits be merged by the owner/s of the repository.\nThis allows multiple people to work on the codebase without getting in each other's way. \n\n### Branching and merging\n\nScenario: you are working on **your own** project, hosted on its own repository. You want to develop a new feature, which may take some time to code and test before you  make it part of your official project code.  \n* Create a new branch, e.g. `devel`\n* Work in your new branch until all testing is successful\n* Merge back to `master` branch\n\nAlways from your system terminal, from within a directory in your repository:\nCreate a new branch:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit branch devel\n```\n:::\n\n\nSwitch to your new branch:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit checkout devel\n```\n:::\n\n\nWork on your code, using git add/commit/push as per usual.  \nWhen you are done testing and are happy to merge back to master:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit checkout master\ngit merge devel\ngit push\n```\n:::\n\nAll the commits performed while you were working in the `devel` branch will be included in that last git push from `master`.\n\n### Pull request\n\nScenario: You are contributing to a repository along with other collaborators. You want to suggest a new feature is added to the code:  \n\n* Create a new branch, e.g. `mynewfeature`\n* Work in new branch until you are ready happy to share and testing is complete\n* Go on to the repository website, select your branch and perform a \"Pull request\" asking that the changes in your `mynewfeature` branch are merged into `master`\n* The repository owner/s will review the request and can merge\n\n## Gists\n\nGitHub also offers a very convenient [pastebin](https://en.wikipedia.org/wiki/Pastebin)-like service called Gist, which lets you quickly and easily share code snippets.  \n\nTo share some R code using a gist:  \n\n* Visit the [gist site](https://gist.github.com/).\n* Write in/copy-paste some code\n* Add a name including a `.R` suffix at the top left of the entry box\n* Copy-paste the URL to share with others\n\n## Git Resources {#gitresources}\n\nGit and GitHub are very powerful and flexible, with a great deal of functionality. Some resources to \nlearn (a great deal) more:  \n\n* [Git cheat sheet](https://education.github.com/git-cheat-sheet-education.pdf)\n* [GitHub guides](https://guides.github.com/)\n# [Pro Git Book](https://git-scm.com/book/en/v2) by Scott Chacon and Ben Straub\n\n## Git and GitHub for open and reproducible science\n\nIt is recommended to create a new GitHub repository for each new research project. It may be worthwhile creating a new repository when it's time to publish a paper, to include all final working code that should accompany the publication (and e.g. exclude all trial-and-error, testing, etc. code). As Always, make sure to follow journal requirements for reporting data deposition (includes code) and accessibility.\n\n## Applications with builtin git support\n\nMany applications support git, and allow you to pull / add / commit / push and \nmore directly from the app using their GUI.  \n\n[VS Code](#vscode) developed by Microsoft, which acquired GitHub in 2018 offers\nextensive built-in support for git and is the recommended editor for working\nand collaborating with git repositories.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
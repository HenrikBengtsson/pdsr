{
  "hash": "299b3e3e9cc4b98188940f53793f9b43",
  "result": {
    "markdown": "# R packages\n\n## CRAN\n\nThe Comprehensive R Archive Network (CRAN) is the official R package repository \nand currently hosts [19930](https://cran.r-project.org/web/packages/index.html) packages (as of 2023-09-27). To install a package \nfrom CRAN, use the builtin `install.packages()` command:\n\n### Install package from CRAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"glmnet\")\n```\n:::\n\n\n### Check installed package's version\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackageVersion(\"rtemis\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] '0.95.6'\n```\n\n\n:::\n:::\n\n\n### Check for outdated packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nold.packages()\n```\n:::\n\n\n### Update installed packages\n\nIf you don't set `ask = FALSE`, you will have to accept each package update separately.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate.packages(ask = FALSE)\n```\n:::\n\n\n## GitHub\n\nGitHub contains a large number of R packages, some of which also exist in CRAN, \nbut the GitHub version may be updated (a lot) more frequently. To install from \nGitHub, you need to have the `remotes` package from CRAN first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"user/repo\")\n```\n:::\n\n\nNote: Running `remotes::install_github(\"user/repo\")` will not reinstall a \npreviously installed package, unless it has been updated.\n\n## Bioconductor\n\n[Bioconductor](https://www.bioconductor.org/) is a repository which includes \ntools for the analysis and comprehension of high-throughput genomic data, among \nothers. To install packages from Bioconductor, first install the `BiocManager` \npackage from CRAN. See Bioconductor's latest installation instructions \n[here](https://bioconductor.org/install/); learn more about BiocManager\n[here](https://cran.r-project.org/web/packages/BiocManager/vignettes/BiocManager.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"BiocManager\")\n```\n:::\n\n\nFor R versions 4.2+, proceed by installing Bioconductor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBiocManager::install(version = \"3.15\")\n```\n:::\n\n\nNow, you can use `BiocManager::install()` to install Bioconductor packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBiocManager::install(\"packageName\")\n```\n:::\n\n\n## Installed packages\n\nList all R packages installed on your system with `installed.packages()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Output has been suppressed\ninstalled.packages()\n```\n:::\n\n\nList attached packages with `search()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n[4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n[7] \"package:methods\"   \"Autoloads\"         \"package:base\"     \n```\n\n\n:::\n:::\n\n\nList attached packages with their system path:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearchpaths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \".GlobalEnv\"                                                                    \n[2] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/stats\"    \n[3] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/graphics\" \n[4] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/grDevices\"\n[5] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/utils\"    \n[6] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/datasets\" \n[7] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/methods\"  \n[8] \"Autoloads\"                                                                     \n[9] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/base\"     \n```\n\n\n:::\n:::\n\n\n## Installation from source\n\nR packages may include only R code, or may also include code in other languages,\nlike C, C++, and Fortran, which need \n[compilation](https://en.wikipedia.org/wiki/Compiler){target=\"_blank\"}. All CRAN packages \nare available in binary format for all supported operating systems. However, if you want \nto install a newer or development version that is not yet available in binary format, R \ncan compile and install the package for you, provided the appropriate compiler is\ninstalled on your system.\n\nIf you need to install compiler tools for your system, follow the instructions:\n\n- [macOS tools](https://mac.r-project.org/tools/)\n- [Windows Rtools](https://cloud.r-project.org/bin/windows/Rtools/)\n- Linux: use your systems package manager to install `gcc`\n\n## Dependencies\n\nMost R packages, whether in CRAN, Bioconductor, or GitHub, themselves rely on \nother packages to run. These are called **dependencies**. Many of these \ndependencies get installed automatically when you call `install.packages()` or \n`remotes::install_github()`, etc. This depends largely on whether they are \nessential for the new package to work. Some packages, especially if they \nprovide a large number of functions that may not all be used by all users, may \nmake some dependencies optional. In that cases, if you try to execute a \nspecific function that depends on uninstalled packages you may get a warning or \nerror or some type of message indicating that you need to install further \npackages.\n\n## Project-level dependency management\n\nAdvanced users may benefit from using a project-level set of dependencies that \ncan be saved, recalled, and updated at will. The \n[`renv`](https://github.com/rstudio/renv/) package is the latest approach to \nproviding such functionality. Follow the introduction vignette \n[here](https://rstudio.github.io/renv/articles/renv.html).\n\n## Builtin Documentation\n\nAfter you've successfully installed R and RStudio, one of the first things to \nknow is how to access and search the builtin documentation.  \n\n### Get help on a specific item\n\nIf you know the name of what you're looking for (an R function most commonly, \nbut possibly also the name of a dataset, or a package itself), just type `?` \nfollowed by the name of said function, dataset, etc. in the R prompt:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?sample\n```\n:::\n\n\nIn RStudio, the above example will bring up the documentation for the `sample` \nfunction in the dedicated \"Help\" window, commonly situated at the bottom right \n(but can be moved by the user freely). If you are running R directly at the \nsystem shell, the same information is printed directly at the console.  \nTry running the above example on your system.\n\n### Search the docs\n\nIf you do not know the name of what you are looking for, you can use double \nquestion marks, `??`, followed by your query (this is short for the \n`help.search` command that provides a number of arguments you can look up \nusing `?help.search`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n??bootstrap\n```\n:::\n\n\n## R datasets\n\n### Datasets included with R\n\nList built-in datasets with `data()` and no arguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata()\n```\n:::\n\n\nThese built-in datasets are normally readily available in the R console \nbecause the **datasets** package is automatically loaded at startup. You can \nlist all loaded packages with `search()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n[4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n[7] \"package:methods\"   \"Autoloads\"         \"package:base\"     \n```\n\n\n:::\n:::\n\n\n### Datasets included with other packages\n\nMany R packages come with included datasets. If available, we can list them\nusing the `package` argument of `data()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(package = \"glmnet\")\ndata(package = \"MASS\")\ndata(package = \"mlbench\")\n```\n:::\n\n\nTo load such a dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(Sonar, package = \"mlbench\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
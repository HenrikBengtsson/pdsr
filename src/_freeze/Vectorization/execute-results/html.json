{
  "hash": "a4add3de11516d54e9278731e5147532",
  "result": {
    "markdown": "---\nexecute:\n  cache: true\nknitr:\n  opts_chunk: \n    comment: ''\n---\n\n# Vectorized Operations {#sec-vectorization}\n\nMany built-in R functions are vectorized and so are many functions from external \npackages as well.\n\n::: callout-info\nA vectorized function operates on all elements of an object.\n:::\n\nVectorization is very efficient: it can save both human (your) time and machine \ntime.\n\n::: callout-tip\nIn many cases, applying a function on all elements simultaneously may seem like the\nobvious or expected behavior, but since not all functions are vectorized, make \nsure to check the documentation (and/or test whether a function is vectorized using a \nsimple example).\n:::\n\n## Operations between vectors of equal length\n\nSuch operations are applied between corresponding elements of each vector:\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-1_899716d2962f22b2c4b0f3398bf4fd40'}\n\n```{.r .cell-code}\nx <- 1:10\nz <- 11:20\nx + z\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 12 14 16 18 20 22 24 26 28 30\n```\n\n\n:::\n:::\n\n\ni.e. the above is equal to `c(x[1] + z[1], x[2] + z[2], ..., x[n] + z[n])`.\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-2_9721d8b3746c6db3bbd2a4ca326113f8'}\n\n```{.r .cell-code}\nWeight <- rnorm(20, mean = 80, sd = 1.7)\nWeight\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 79.36801 81.06268 79.41230 80.10540 80.87167 79.12432 79.71534 79.99593\n [9] 80.22232 78.98860 79.92995 80.51565 76.70282 80.84724 78.15982 81.09863\n[17] 76.51254 79.88208 76.89691 80.46485\n```\n\n\n:::\n\n```{.r .cell-code}\nHeight <- rnorm(20, mean = 1.7, sd = .1)\nHeight\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1.712619 1.825532 1.740072 1.746919 1.831087 1.634120 1.607686 1.880719\n [9] 1.655010 1.641103 1.686898 1.699648 1.810535 1.694773 1.666255 1.575280\n[17] 1.562882 1.463314 1.549886 1.911374\n```\n\n\n:::\n\n```{.r .cell-code}\nBMI <- Weight/Height^2\nBMI\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 27.05975 24.32441 26.22728 26.24921 24.12005 29.63071 30.84177 22.61621\n [9] 29.28829 29.32869 28.08873 27.87161 23.39902 28.14765 28.15145 32.68119\n[17] 31.32421 37.30561 32.01175 22.02494\n```\n\n\n:::\n:::\n\n\n## Operations between a vector and a scalar\n\nIn this cases, the scalar is repeated to match the length of the vector, \ni.e. it is ***recycled***:\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-3_5bd7ee91f021f8dba7c8687f689aa4c6'}\n\n```{.r .cell-code}\nx + 10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 11 12 13 14 15 16 17 18 19 20\n```\n\n\n:::\n\n```{.r .cell-code}\nx * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  2  4  6  8 10 12 14 16 18 20\n```\n\n\n:::\n\n```{.r .cell-code}\nx / 10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n```\n\n\n:::\n\n```{.r .cell-code}\nx ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   1   4   9  16  25  36  49  64  81 100\n```\n\n\n:::\n:::\n\n\n## Operations between vectors of unequal length: **value recycling**\n\nOperations between a vector and a scalar are a special case of operations \nbetween vectors of unequal length. Whenever you perform an operation between \ntwo objects of different length, \n***the shorter object's elements are recycled***:\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-4_57a7bf7838cc4a09281f4050f12ba2e0'}\n\n```{.r .cell-code}\nx + c(2:1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  3  3  5  5  7  7  9  9 11 11\n```\n\n\n:::\n:::\n\n\n:::callout-caution\nOperations between objects of unequal length can occur by mistake. If the \nshorter object's length is a multiple of the longer object's length, there will \nbe ***no error or warning***, as above. Otherwise, \nthere is a warning (which may be confusing at first) BUT \n***recycling still happens and is highly unlikely to be intentional***.\n:::\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-5_9f05eb87de9474f3c2f90b3e1920b507'}\n\n```{.r .cell-code}\nx + c(1, 3, 9)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in x + c(1, 3, 9): longer object length is not a multiple of shorter\nobject length\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  2  5 12  5  8 15  8 11 18 11\n```\n\n\n:::\n:::\n\n\n## Vectorized matrix operations\n\nOperations between matrices are similarly vectorized, i.e. performed between \ncorresponding elements:\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-6_e381ebf13e506ebd7701300992ab9e52'}\n\n```{.r .cell-code}\na <- matrix(1:4, 2)\nb <- matrix(11:14, 2)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n\n\n:::\n\n```{.r .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   11   13\n[2,]   12   14\n```\n\n\n:::\n\n```{.r .cell-code}\na + b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   12   16\n[2,]   14   18\n```\n\n\n:::\n\n```{.r .cell-code}\na * b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   11   39\n[2,]   24   56\n```\n\n\n:::\n\n```{.r .cell-code}\na / b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           [,1]      [,2]\n[1,] 0.09090909 0.2307692\n[2,] 0.16666667 0.2857143\n```\n\n\n:::\n:::\n\n\n## Vectorized functions\n\nSome examples of common mathematical operations that are vectorized:\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-7_d342db55e67922bd59e210fdbfccf817'}\n\n```{.r .cell-code}\nlog(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n [8] 2.0794415 2.1972246 2.3025851\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n```\n\n\n:::\n\n```{.r .cell-code}\nsin(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0.8414710  0.9092974  0.1411200 -0.7568025 -0.9589243 -0.2794155\n [7]  0.6569866  0.9893582  0.4121185 -0.5440211\n```\n\n\n:::\n\n```{.r .cell-code}\ncos(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0.5403023 -0.4161468 -0.9899925 -0.6536436  0.2836622  0.9601703\n [7]  0.7539023 -0.1455000 -0.9111303 -0.8390715\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
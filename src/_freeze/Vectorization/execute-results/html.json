{
  "hash": "f1bff97b7430bf1ff7c9364e266f7c92",
  "result": {
    "markdown": "---\nexecute:\n  cache: true\nknitr:\n  opts_chunk: \n    comment: ''\n---\n\n# Vectorized Operations {#sec-vectorization}\n\nMany built-in R functions are vectorized and so are many functions from external \npackages as well.\n\n::: callout-info\nA vectorized function operates on all elements of an object.\n:::\n\nVectorization is very efficient: it can save both human (your) time and machine \ntime.\n\n::: callout-tip\nIn many cases, applying a function on all elements simultaneously may seem like the\nobvious or expected behavior, but since not all functions are vectorized, make \nsure to check the documentation (and/or test whether a function is vectorized using a \nsimple example).\n:::\n\n## Operations between vectors of equal length\n\nSuch operations are applied between corresponding elements of each vector:\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-1_c894779a329e6e4268eaa28746126e19'}\n\n```{.r .cell-code}\nx <- 1:10\nz <- 11:20\nx + z\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 12 14 16 18 20 22 24 26 28 30\n```\n:::\n:::\n\n\ni.e. the above is equal to `c(x[1] + z[1], x[2] + z[2], ..., x[n] + z[n])`.\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-2_7d9eadc757b16085801a55ab4f9a7070'}\n\n```{.r .cell-code}\nWeight <- rnorm(20, mean = 80, sd = 1.7)\nWeight\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 81.89650 78.16057 78.25425 80.38263 81.32270 79.70855 82.55270 80.95214\n [9] 80.16353 81.72766 77.69531 80.60339 78.67545 80.45920 82.80568 80.91628\n[17] 77.88391 81.00645 81.89420 77.74370\n```\n:::\n\n```{.r .cell-code}\nHeight <- rnorm(20, mean = 1.7, sd = .1)\nHeight\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.767451 1.741498 1.734790 1.426387 1.703093 1.869879 1.692453 1.732852\n [9] 1.605033 1.736985 1.745468 1.763611 1.591620 1.627858 1.746615 1.783076\n[17] 1.656173 1.634436 1.659676 1.685196\n```\n:::\n\n```{.r .cell-code}\nBMI <- Weight/Height^2\nBMI\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 26.21624 25.77163 26.00244 39.50824 28.03723 22.79701 28.82028 26.95909\n [9] 31.11779 27.08800 25.50182 25.91479 31.05705 30.36286 27.14348 25.45050\n[17] 28.39463 30.32383 29.73081 27.37566\n```\n:::\n:::\n\n\n## Operations between a vector and a scalar\n\nIn this cases, the scalar is repeated to match the length of the vector, \ni.e. it is ***recycled***:\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-3_41d0ec31df21bfa4a8b0ff6d027d65e0'}\n\n```{.r .cell-code}\nx + 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 11 12 13 14 15 16 17 18 19 20\n```\n:::\n\n```{.r .cell-code}\nx * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  2  4  6  8 10 12 14 16 18 20\n```\n:::\n\n```{.r .cell-code}\nx / 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n```\n:::\n\n```{.r .cell-code}\nx ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   1   4   9  16  25  36  49  64  81 100\n```\n:::\n:::\n\n\n## Operations between vectors of unequal length: **value recycling**\n\nOperations between a vector and a scalar are a special case of operations \nbetween vectors of unequal length. Whenever you perform an operation between \ntwo objects of different length, \n***the shorter object's elements are recycled***:\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-4_1e91d873ae72c5274c6eed1ed02b856f'}\n\n```{.r .cell-code}\nx + c(2:1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  3  3  5  5  7  7  9  9 11 11\n```\n:::\n:::\n\n\n:::callout-caution\nOperations between objects of unequal length can occur by mistake. If the \nshorter object's length is a multiple of the longer object's length, there will \nbe ***no error or warning***, as above. Otherwise, \nthere is a warning (which may be confusing at first) BUT \n***recycling still happens and is highly unlikely to be intentional***.\n:::\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-5_0edb016e64881a6930d10457c5ce43b6'}\n\n```{.r .cell-code}\nx + c(1, 3, 9)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in x + c(1, 3, 9): longer object length is not a multiple of shorter\nobject length\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  2  5 12  5  8 15  8 11 18 11\n```\n:::\n:::\n\n\n## Vectorized matrix operations\n\nOperations between matrices are similarly vectorized, i.e. performed between \ncorresponding elements:\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-6_4d5b032d19e732181dfdee1ab226fcc8'}\n\n```{.r .cell-code}\na <- matrix(1:4, nrow = 2)\nb <- matrix(11:14, nrow = 2)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n:::\n\n```{.r .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]   11   13\n[2,]   12   14\n```\n:::\n\n```{.r .cell-code}\na + b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]   12   16\n[2,]   14   18\n```\n:::\n\n```{.r .cell-code}\na * b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]   11   39\n[2,]   24   56\n```\n:::\n\n```{.r .cell-code}\na / b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]      [,2]\n[1,] 0.09090909 0.2307692\n[2,] 0.16666667 0.2857143\n```\n:::\n:::\n\n\n## Vectorized functions\n\nSome examples of common mathematical operations that are vectorized:\n\n\n::: {.cell hash='Vectorization_cache/html/unnamed-chunk-7_8cd5a1c07c64e85c2abc44d2fcf6cd02'}\n\n```{.r .cell-code}\nlog(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n [8] 2.0794415 2.1972246 2.3025851\n```\n:::\n\n```{.r .cell-code}\nsqrt(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n```\n:::\n\n```{.r .cell-code}\nsin(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0.8414710  0.9092974  0.1411200 -0.7568025 -0.9589243 -0.2794155\n [7]  0.6569866  0.9893582  0.4121185 -0.5440211\n```\n:::\n\n```{.r .cell-code}\ncos(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0.5403023 -0.4161468 -0.9899925 -0.6536436  0.2836622  0.9601703\n [7]  0.7539023 -0.1455000 -0.9111303 -0.8390715\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
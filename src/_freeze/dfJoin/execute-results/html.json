{
  "hash": "2326871e85efc8b345666a9b07ffe5b7",
  "result": {
    "markdown": "---\nknitr:\n  opts_chunk:\n    comment: \"\"\n---\n\n# Joins {#sec-dfjoin}\n\nWe often have data from separate sources that we want to combine into a single \ndata.frame. Table joins allow you to specify how to perform such a merge.\n<br>\n\nThere are four main types of join operations:\n<br><br>\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Common Join Operations](R_joins.png){#fig-joins fig-align='center' width=100%}\n:::\n:::\n\n\nScenario: You have received two tables with clinical data. Each table contains \na column with a unique identifier (ID) plus a number of variables which are \nunique to each table. You want to merge them into one big table so that for \neach ID you have all available variables. You want to make sure that the same \nID number (e.g. 108) corresponds to the same case in both datasets, but not all \nIDs needs to be present in both datasets.\n\nLet's make up some synthetic data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- data.frame(PID = 101:109,\n                Hospital = c(\"UCSF\", \"HUP\", \"Stanford\",\n                             \"Stanford\", \"UCSF\", \"HUP\", \n                             \"HUP\", \"Stanford\", \"UCSF\"),\n                Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),\n                Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0))\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  PID Hospital Age Sex\n1 101     UCSF  22   1\n2 102      HUP  34   1\n3 103 Stanford  41   0\n4 104 Stanford  19   1\n5 105     UCSF  53   0\n6 106      HUP  21   0\n7 107      HUP  63   1\n8 108 Stanford  22   0\n9 109     UCSF  19   0\n```\n:::\n\n```{.r .cell-code}\ndim(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9 4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb  <- data.frame(PID = 106:112,\n                 V1 = c(153, 89, 112, 228,  91, 190, 101),\n                 Department = c(\"Neurology\", \"Radiology\",\n                                \"Emergency\", \"Cardiology\",\n                                \"Surgery\", \"Neurology\", \"Psychiatry\"))\ndim(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7 3\n```\n:::\n\n```{.r .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  PID  V1 Department\n1 106 153  Neurology\n2 107  89  Radiology\n3 108 112  Emergency\n4 109 228 Cardiology\n5 110  91    Surgery\n6 111 190  Neurology\n7 112 101 Psychiatry\n```\n:::\n:::\n\n\n## `merge()`\n\nR's `merge()` function is used to perform table joins.\n\nSyntax: `merge(x, y, by)`\n\nwhere `x` and `y` and the two data.frames to join, and `by` is the column name \nof the ID variable used to identify rows. If the two datasets' ID column has a \ndifferent name, e.g. \"PatientID\" in one and \"PID\" in the other, you can either \nrename one of them to match the other, or use the following syntax:\n\n`merge(x, y, by.x, by.y)`\n\nwhere `by.x` is the name of the ID column for the `x` dataset and `by.y` is the\n name of the ID column for the `y` dataset.\n\nIf you do not specify `by` or `by.x` and `by.y` arguments, `merge()` defaults \nto using the intersection of column names of the two input datasets. From \n`merge()`'s documentation: `by = intersect(names(x), names(y))`\n<br><br>\nIn our example datasets above, this works as expected and identifies \"PID\" as \nthe common column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintersect(names(a), names(b))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PID\"\n```\n:::\n:::\n\n\n## Inner join\n\nThe default arguments of `merge()` perform an **inner join**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nab_inner <- merge(a, b)\n# same as\nab_inner <- merge(a, b, by = \"PID\")\n# same as\nab_inner <- merge(a, b, all = FALSE)\nab_inner\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  PID Hospital Age Sex  V1 Department\n1 106      HUP  21   0 153  Neurology\n2 107      HUP  63   1  89  Radiology\n3 108 Stanford  22   0 112  Emergency\n4 109     UCSF  19   0 228 Cardiology\n```\n:::\n:::\n\n\nNote that the resulting table only contains ***cases found in both datasets***, \ni.e. IDs 106 through 109\n\n## Outer join\n\nYou can perform an **outer join** by specifying `all = TRUE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nab_outer <- merge(a, b, all = TRUE)\n# same as\nab_outer <- merge(a, b, by = \"PID\", all = TRUE)\nab_outer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   PID Hospital Age Sex  V1 Department\n1  101     UCSF  22   1  NA       <NA>\n2  102      HUP  34   1  NA       <NA>\n3  103 Stanford  41   0  NA       <NA>\n4  104 Stanford  19   1  NA       <NA>\n5  105     UCSF  53   0  NA       <NA>\n6  106      HUP  21   0 153  Neurology\n7  107      HUP  63   1  89  Radiology\n8  108 Stanford  22   0 112  Emergency\n9  109     UCSF  19   0 228 Cardiology\n10 110     <NA>  NA  NA  91    Surgery\n11 111     <NA>  NA  NA 190  Neurology\n12 112     <NA>  NA  NA 101 Psychiatry\n```\n:::\n:::\n\n\nNote that the resulting data frame contains \n***all cases found in either dataset*** and missing values are represented with \n`NA`.\n\n## Left outer join\n\nYou can perform a **left outer join** by specifying `all.x = TRUE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nab_leftOuter <- merge(a, b, all.x = TRUE)\nab_leftOuter\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  PID Hospital Age Sex  V1 Department\n1 101     UCSF  22   1  NA       <NA>\n2 102      HUP  34   1  NA       <NA>\n3 103 Stanford  41   0  NA       <NA>\n4 104 Stanford  19   1  NA       <NA>\n5 105     UCSF  53   0  NA       <NA>\n6 106      HUP  21   0 153  Neurology\n7 107      HUP  63   1  89  Radiology\n8 108 Stanford  22   0 112  Emergency\n9 109     UCSF  19   0 228 Cardiology\n```\n:::\n:::\n\n\nNote that the resulting data frame contains \n***all cases present in the left input dataset*** (i.e. the one defined first \nin the arguments) only. \n\n## Right outer join\n\nYou can perform a **right outer join** by specifying `all.y = TRUE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nab_rightOuter <- merge(a, b, all.y = TRUE)\nab_rightOuter\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  PID Hospital Age Sex  V1 Department\n1 106      HUP  21   0 153  Neurology\n2 107      HUP  63   1  89  Radiology\n3 108 Stanford  22   0 112  Emergency\n4 109     UCSF  19   0 228 Cardiology\n5 110     <NA>  NA  NA  91    Surgery\n6 111     <NA>  NA  NA 190  Neurology\n7 112     <NA>  NA  NA 101 Psychiatry\n```\n:::\n:::\n\n\nNote how the resulting data frame contains \n***all cases present in the right input dataset*** (i.e. the one defined \nsecond in the arguments) only.\n\n## Specifying columns \n\nAs mentioned above, if the ID columns in the two data.frames to be merged do \nnot have the same name, you can specify them directly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- data.frame(PID = 101:109,\n                Hospital = c(\"UCSF\", \"HUP\", \"Stanford\",\n                             \"Stanford\", \"UCSF\", \"HUP\", \n                             \"HUP\", \"Stanford\", \"UCSF\"),\n                Age = c(22, 34, 41, 19, 53, 21, 63, 22, 19),\n                Sex = c(1, 1, 0, 1, 0, 0, 1, 0, 0))\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  PID Hospital Age Sex\n1 101     UCSF  22   1\n2 102      HUP  34   1\n3 103 Stanford  41   0\n4 104 Stanford  19   1\n5 105     UCSF  53   0\n6 106      HUP  21   0\n7 107      HUP  63   1\n8 108 Stanford  22   0\n9 109     UCSF  19   0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- data.frame(PatientID = 106:112,\n                 V1 = c(153, 89, 112, 228,  91, 190, 101),\n                 Department = c(\"Neurology\", \"Radiology\",\n                                \"Emergency\", \"Cardiology\",\n                                \"Surgery\", \"Neurology\", \"Psychiatry\"))\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  PatientID  V1 Department\n1       106 153  Neurology\n2       107  89  Radiology\n3       108 112  Emergency\n4       109 228 Cardiology\n5       110  91    Surgery\n6       111 190  Neurology\n7       112 101 Psychiatry\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nab_inner <- merge(a, b, by.x = \"PID\", by.y = \"PatientID\")\nab_inner\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  PID Hospital Age Sex  V1 Department\n1 106      HUP  21   0 153  Neurology\n2 107      HUP  63   1  89  Radiology\n3 108 Stanford  22   0 112  Emergency\n4 109     UCSF  19   0 228 Cardiology\n```\n:::\n:::\n\n\n## Subsetting\n\nRemember that whatever operation you are performing on one or multiple \ndata.frames, you can always subset rows and/or columns as needed. If, for \nexample, you don't need to include the \"V1\" variables in your join, you can \ndirectly exclude it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerge(a, b[, -2], by.x = \"PID\", by.y = \"PatientID\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  PID Hospital Age Sex Department\n1 106      HUP  21   0  Neurology\n2 107      HUP  63   1  Radiology\n3 108 Stanford  22   0  Emergency\n4 109     UCSF  19   0 Cardiology\n```\n:::\n:::\n\n\n## Joining wide and long tables\n\nThe columns defined using the `by` or `by.x` and `by.y` arguments determine\nwhich rows from each table to include in the merge. These do not have to \nidentify unique rows in either dataset: for example, if you are merging on\na `PID` column, either table can include repeated PIDs. This allows merging\nwide and long tables.\n\nAs an example, we create a long and a wide table and merge them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_long <- data.frame(\n    Account_ID = c(8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004, \n            8001, 8002, 8003, 8004, 8001, 8002, 8003, 8004), \n    Age = c(67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671, 67.8017038366664, 42.9198507293701, \n            46.2301756642422, 39.665983196671, 67.8017038366664, \n            42.9198507293701, 46.2301756642422, 39.665983196671, \n            67.8017038366664, 42.9198507293701, 46.2301756642422, \n            39.665983196671), \n    Admission = c(\"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\", \"ED\", \"Planned\", \"Planned\", \"ED\", \"ED\", \"Planned\", \n            \"Planned\", \"ED\"), \n    Lab_key = c(\"RBC\", \"RBC\", \"RBC\", \"RBC\", \"WBC\", \"WBC\", \"WBC\", \"WBC\", \n            \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \"Hematocrit\", \n            \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\", \"Hemoglobin\"), \n    Lab_value = c(4.63449321082268, 3.34968550627897, 4.27037213597765, \n            4.93897736897793, 8374.22887757195, 7612.37380499927, \n            8759.27855519425, 6972.28096216548, 36.272693147236, \n            40.5716317809522, 39.9888624177955, 39.8786884058422, \n            12.6188444991545, 12.1739747363806, 15.1293426442183, \n            14.8885696185238)\n)\ndat_long <- dat_long[order(dat_long$Account_ID), ]\ndat_long\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Account_ID      Age Admission    Lab_key   Lab_value\n1        8001 67.80170        ED        RBC    4.634493\n5        8001 67.80170        ED        WBC 8374.228878\n9        8001 67.80170        ED Hematocrit   36.272693\n13       8001 67.80170        ED Hemoglobin   12.618844\n2        8002 42.91985   Planned        RBC    3.349686\n6        8002 42.91985   Planned        WBC 7612.373805\n10       8002 42.91985   Planned Hematocrit   40.571632\n14       8002 42.91985   Planned Hemoglobin   12.173975\n3        8003 46.23018   Planned        RBC    4.270372\n7        8003 46.23018   Planned        WBC 8759.278555\n11       8003 46.23018   Planned Hematocrit   39.988862\n15       8003 46.23018   Planned Hemoglobin   15.129343\n4        8004 39.66598        ED        RBC    4.938977\n8        8004 39.66598        ED        WBC 6972.280962\n12       8004 39.66598        ED Hematocrit   39.878688\n16       8004 39.66598        ED Hemoglobin   14.888570\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_wide <- data.frame(\n    Account_ID = c(8002, 8003, 8005),\n    Department = c(\"Cardiology\", \"Neurology\", \"Surgery\"),\n    Site = c(\"ZSFG\", \"Mission_Bay\", \"Mt_Zion\")\n)\ndat_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Account_ID Department        Site\n1       8002 Cardiology        ZSFG\n2       8003  Neurology Mission_Bay\n3       8005    Surgery     Mt_Zion\n```\n:::\n:::\n\n\nInner join:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerge(dat_wide, dat_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Account_ID Department        Site      Age Admission    Lab_key   Lab_value\n1       8002 Cardiology        ZSFG 42.91985   Planned        RBC    3.349686\n2       8002 Cardiology        ZSFG 42.91985   Planned        WBC 7612.373805\n3       8002 Cardiology        ZSFG 42.91985   Planned Hematocrit   40.571632\n4       8002 Cardiology        ZSFG 42.91985   Planned Hemoglobin   12.173975\n5       8003  Neurology Mission_Bay 46.23018   Planned        RBC    4.270372\n6       8003  Neurology Mission_Bay 46.23018   Planned        WBC 8759.278555\n7       8003  Neurology Mission_Bay 46.23018   Planned Hematocrit   39.988862\n8       8003  Neurology Mission_Bay 46.23018   Planned Hemoglobin   15.129343\n```\n:::\n:::\n\n\nOuter join: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerge(dat_wide, dat_long, all = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Account_ID Department        Site      Age Admission    Lab_key   Lab_value\n1        8001       <NA>        <NA> 67.80170        ED        RBC    4.634493\n2        8001       <NA>        <NA> 67.80170        ED        WBC 8374.228878\n3        8001       <NA>        <NA> 67.80170        ED Hematocrit   36.272693\n4        8001       <NA>        <NA> 67.80170        ED Hemoglobin   12.618844\n5        8002 Cardiology        ZSFG 42.91985   Planned        RBC    3.349686\n6        8002 Cardiology        ZSFG 42.91985   Planned        WBC 7612.373805\n7        8002 Cardiology        ZSFG 42.91985   Planned Hematocrit   40.571632\n8        8002 Cardiology        ZSFG 42.91985   Planned Hemoglobin   12.173975\n9        8003  Neurology Mission_Bay 46.23018   Planned        RBC    4.270372\n10       8003  Neurology Mission_Bay 46.23018   Planned        WBC 8759.278555\n11       8003  Neurology Mission_Bay 46.23018   Planned Hematocrit   39.988862\n12       8003  Neurology Mission_Bay 46.23018   Planned Hemoglobin   15.129343\n13       8004       <NA>        <NA> 39.66598        ED        RBC    4.938977\n14       8004       <NA>        <NA> 39.66598        ED        WBC 6972.280962\n15       8004       <NA>        <NA> 39.66598        ED Hematocrit   39.878688\n16       8004       <NA>        <NA> 39.66598        ED Hemoglobin   14.888570\n17       8005    Surgery     Mt_Zion       NA      <NA>       <NA>          NA\n```\n:::\n:::\n\n\nAs you see above, the output of a join between a wide and long table will be a \nlong table. Depending on the specific analysis goals, one can keep the data\nin long format, reshape one table prior to merging, or reshape the merged table\nafter joining (See @sec-dfreshape for reshaping).\n\n## Renaming non-unique columns\n\nTwo tables may contain shared column names on columns other than those used for merging.\nIn such cases, the `suffixes` argument, which defaults to `c(\".x\",\".y\")`, defines the \nsuffix to be added to the left and right tables, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisit1 <- data.frame(ID = c(8001, 8002, 8003),\n        Height = c(1.67, 1.79, 1.74),\n        SBP = c(124, 138, 129))\nvisit2 <- data.frame(ID = c(8002, 8003, 8004),\n        Department = c(\"Cardiology\", \"Neurology\", \"Surgery\"),\n        SBP = c(128, 136, 131))\nmerge(visit1, visit2, by = \"ID\", suffixes = c(\"_visit1\", \"_visit2\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    ID Height SBP_visit1 Department SBP_visit2\n1 8002   1.79        138 Cardiology        128\n2 8003   1.74        129  Neurology        136\n```\n:::\n:::\n\n\nNote that in these cases, the `by` argument, or the `by.x` and `by.y` arguments, need to be specified\nso that the other shared column is not erroneously included in the matching.\n\n## See also\n\n- [data.table joins](#sec-dtjoin)\n- [dplyr joins](#sec-dplyrjoin)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
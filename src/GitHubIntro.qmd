---
knitr:
  opts_chunk:
    comment: ""
---
# Git & GitHub: The Basics {#git}

`git` is famously powerful and notoriously complex. This is a very brief introduction to a very small subset of `git`'s functionality. Multiple online resources can help you delve into `git` in considerably more depth.  

First, some important definitions:

* **Git**: System that tracks changes to code from multiple users
    * Free and open source distributed version control system
    * Developed in 2005 by Linus Torvalds to support Linux kernel development
    * Used by 87.2% of developers as of 2018, according to Stack Overflow

* **Repository**: Data (code) + metadata (i.e. log of changes over time)
    * Data structure that holds metadata for a set of directories / files (set of commit objects, historical record of changes)

* **GitHub**: Online service that holds Git repositories (public & private)
    * Git repository hosting service
    * Largest source code host in the world: > 40M users, > 100M repositories
    * Acquired by Microsoft for $7.5 billion in 2018.

## Installing git

Check if you system already includes an installation of git. If not you can download it from the official [git website](https://git-scm.com/downloads)

## Basic git usage

In the system terminal, all git commands begin with `git` and are followed by a command name:  

### Cloning ("Downloading")

Download a repository to your computer for the first time. Replace "user" with the username and "repo" with the repository name.
```{bash eval = FALSE}
git clone https://github.com/user/repo.git
```

This will clone the remote repository to a folder name 'repo'. You can optionally provide a different folder name after the URL.  

To update a previously cloned repository:

```{bash eval = FALSE}
git pull
```

### Pushing ("Uploading")

Get info on local changes to repository:

```{bash eval = FALSE}
git status
```

Working locally, stage new or modified files:

```{bash eval = FALSE}
git add /path/to/file
```

Still working locally, commit changes with an informative message:

```{bash eval = FALSE}
git commit -m Fixed this or added that
```

(Note that the previous steps did not require an internet connection - this one does)
Push one or multiple commits to remote repository:

```{bash eval = FALSE}
git push
```

### Collaborating

The main way of contributing to a project is by a) making a new "branch" of the repository, b) making your edits, and c) either merging to master yourself or requesting your edits be merged by the owner/s of the repository.
This allows multiple people to work on the codebase without getting in each other's way. 

### Branching and merging

Scenario: you are working on **your own** project, hosted on its own repository. You want to develop a new feature, which may take some time to code and test before you  make it part of your official project code.  
* Create a new branch, e.g. `devel`
* Work in your new branch until all testing is successful
* Merge back to `master` branch

Always from your system terminal, from within a directory in your repository:
Create a new branch:

```{bash, eval = FALSE}
git branch devel
```

Switch to your new branch:

```{bash, eval = FALSE}
git checkout devel
```

Work on your code, using git add/commit/push as per usual.  
When you are done testing and are happy to merge back to master:

```{bash, eval = FALSE}
git checkout master
git merge devel
git push
```
All the commits performed while you were working in the `devel` branch will be included in that last git push from `master`.

### Pull request

Scenario: You are contributing to a repository along with other collaborators. You want to suggest a new feature is added to the code:  

* Create a new branch, e.g. `mynewfeature`
* Work in new branch until you are ready happy to share and testing is complete
* Go on to the repository website, select your branch and perform a "Pull request" asking that the changes in your `mynewfeature` branch are merged into `master`
* The repository owner/s will review the request and can merge

## Gists

GitHub also offers a very convenient [pastebin](https://en.wikipedia.org/wiki/Pastebin)-like service called Gist, which lets you quickly and easily share code snippets.  

To share some R code using a gist:  

* Visit the [gist site](https://gist.github.com/).
* Write in/copy-paste some code
* Add a name including a `.R` suffix at the top left of the entry box
* Copy-paste the URL to share with others

## Git Resources {#gitresources}

Git and GitHub are very powerful and flexible, with a great deal of functionality. Some resources to 
learn (a great deal) more:  

* [Git cheat sheet](https://education.github.com/git-cheat-sheet-education.pdf)
* [GitHub guides](https://guides.github.com/)
# [Pro Git Book](https://git-scm.com/book/en/v2) by Scott Chacon and Ben Straub

## Git and GitHub for open and reproducible science

It is recommended to create a new GitHub repository for each new research project. It may be worthwhile creating a new repository when it's time to publish a paper, to include all final working code that should accompany the publication (and e.g. exclude all trial-and-error, testing, etc. code). As Always, make sure to follow journal requirements for reporting data deposition (includes code) and accessibility.

## Applications with builtin git support

Many applications support git, and allow you to pull / add / commit / push and 
more directly from the app using their GUI.  

[VS Code](#vscode) developed by Microsoft, which acquired GitHub in 2018 offers
extensive built-in support for git and is the recommended editor for working
and collaborating with git repositories.

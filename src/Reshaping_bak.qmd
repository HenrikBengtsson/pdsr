# Reshaping {#sec-reshaping}

```{r wideLong, echo = FALSE, out.width = "100%", fig.align = "center", fig.cap = "Wide and Long data format example. Take a moment to notice how the wide table on the left with 3 cases (3 IDs) and 3 variables gets converted from a 3 x 4 table to a 9 x 3 long table on the right. The values (outlined in magenta) are present once in each table: on the wide table they form an **ID x Variable** matrix, while on the long they are stacked on a **single column**. The IDs have to be repeated on the long table, once for each variable and there is a new 'Variable' column to provide the information present in the wide table's column names." }
knitr::include_graphics("wide_long.png", dpi = NA)
```

A wide dataset contains only a single row per case (e.g. patient), while a long 
dataset can contain multiple rows per case (e.g. for multiple timepoints). We 
want to be able to reshape from one form to the other because different 
programs (e.g. statistical models, visualization) may expect data in one of the 
other format for different applications (e.g. longitudinal modeling or grouped 
visualizations).

```{r}
library(tidyr)
library(data.table)
options(datatable.print.class = TRUE)
```

## Wide to Long

Let's create an example data frame:

```{r}
dat_wide <- data.frame(ID = c(1, 2, 3),
                       mango = c(1.1, 2.1, 3.1),
                       banana = c(1.2, 2.2, 3.2),
                       tangerine = c(1.3, 2.3, 3.3),
                       Group = c("a", "b", "b"))
dat_wide
```

### base

The `reshape()` function is probably one of the more complicated builtin 
functions because its documentation is not entirely clear, especially if you're 
not used to the jargon and specifically with regards to which arguments refer 
to the input vs. output data frame. Use the following figure as a guide to 
understand `reshape()`'s syntax. You can use it as a reference when building 
your own `reshape()` command by following steps 1 through 5:

```{r wideLongSyntax, echo = FALSE, out.width = "100%", fig.align = "center", fig.cap = "`reshape()` syntax for Wide to Long transformation."}
knitr::include_graphics("R_reshape_wide2long.png", dpi = NA)
```

```{r}
dat_wide2long <- reshape(# Data in wide format
                         data = dat_wide,
                         # The column name that defines case ID
                         idvar = "ID",
                         # The columns whose values we want to keep
                         varying = list(2:4),
                         # The name of the new column which will contain all 
                         # the values from the columns above
                         v.names = "Score",
                         # The values/names, of length = (N columns in "varying"), 
                         #that will be recycled to indicate which column from the 
                         #wide dataset each row corresponds to
                         times = c(colnames(dat_wide)[2:4]),
                         # The name of the new column created to hold the values 
                         # defined by "times"
                         timevar = "Fruit",                  
                         direction = "long")
dat_wide2long
```

You can also define `varying` with a character vector:

`varying = list(c("mango", "banana","tangerine")`  

Explore the resulting data frame's attributes:

```{r}
attributes(dat_wide2long)
```

These attributes are present if and only if a long data.frame was created from 
a wide data.frame as above. In this case, reshaping back to wide format is as 
easy as calling `reshape()` on the previously converted data.frame with no 
arguments:

```{r}
dat_wideagain <- reshape(dat_wide2long)
dat_wideagain
```

Note that the reverse does not work, you need to specify the wide to long 
reshaping normally.

### tidyr

```{r}
dat_wide2long_tv <- pivot_longer(dat_wide,
                           cols = 2:4,
                           names_to = "Fruit",
                           values_to = "Score")
dat_wide2long_tv
```

### data.table

```{r}
dat_wide_dt <- as.data.table(dat_wide)
dat_wide2long_dt <- melt(dat_wide_dt,
                         id.vars = c(1, 5),
                         measure.vars = 2:4,
                         variable.name = "Fruit",
                         value.name = "Score")
setorder(dat_wide2long_dt, "ID")
dat_wide2long_dt
```

## Long to Wide

Let's recreate the same long dataset:

```{r}
dat_long <- data.frame(ID = c(1, 2, 3, 1, 2, 3, 1, 2, 3),
                       Fruit = c("mango", "mango", "mango", 
                                 "banana", "banana", "banana", 
                                 "tangerine", "tangerine", "tangerine"),
                       Score = c(1.1, 2.1, 3.1, 1.2, 2.2, 3.2, 1.3, 2.3, 3.3),
                       Group = c("a", "b", "b", "a", "b", "b", "a", "b", "b"))
dat_long
```

### base

Using base `reshape()` for long-to-wide transformation is simpler than 
wide-to-long:

```{r longWideSyntax, echo = FALSE, out.width = "100%", fig.align = "center", fig.cap = "`reshape()` syntax for Long to Wide transformation."}
knitr::include_graphics("R_reshape_long2wide.png", dpi = NA)
```

```{r}
dat_long2wide <- reshape(dat_long,
                         idvar = "ID",
                         timevar = "Fruit",
                         v.names = "Score",
                         direction = "wide")
# Optionally rename columns
colnames(dat_long2wide) <- gsub("Score.", "", colnames(dat_long2wide))
dat_long2wide
```

### tidyr

```{r}
dat_long2wide_tv <- pivot_wider(dat_long,
                                id_cols = c("ID", "Group"),
                                names_from = "Fruit",
                                values_from = "Score")
dat_long2wide_tv
```

### data.table

`data.table`'s long to wide procedure is defined with a convenient formula 
notation:

```{r}
dat_long_dt <- as.data.table(dat_long)
dat_long2wide_dt <- dcast(dat_long_dt,
                          ID + Group ~ Fruit,
                          value.var = "Score")
dat_long2wide_dt
```

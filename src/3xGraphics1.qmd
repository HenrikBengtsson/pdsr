---
execute: 
  warning: false
knitr:
  opts_knit:
    global.par: true
  opts_chunk: 
    comment: ''
    fig.width: 5
    fig.height: 5
---
# 3x Graphics {#sec-graphics3x}

```{r, comment="", results="asis"}
#| echo: false
old.hooks <- fansi::set_knit_hooks(knitr::knit_hooks)
options(crayon.enabled = TRUE)
```

Visualization is central to statistics, machine learning, data science. It is used to 
check and explore data, present modeling results, and communicate findings.

R has powerful graphical capabilities built in to the core language. It 
contains two largely separate graphics systems: 'base' graphics in the 
`graphics` package, inherited from the S language, and 'grid' graphics in the 
`grid` package: a "rewrite of the graphics layout capabilities". There is 
limited support for interaction between the two. In practice, for a given 
application, choose one or the other. There are no high level functions for the 
grid graphics system built into the base R distribution, but a few very popular 
packages have been built on top of it. Both graphics systems can produce 
beautiful, layered, high quality graphics. It is possible to build functions 
using either system to produce most, if not all, types of plots.  

## Libraries

Load libraries we will be using in this chapter:

```{r}
library(data.table)
library(ggplot2)
library(plotly)
```

```{r}
#| echo: false
par(family = "Inter")
theme_set(theme(text = element_text(family = "Inter")))

# rtemis defaults
options(rt.theme = "whiteigrid")
options(rt.fit.theme = "whiteigrid")
```

## Base graphics

Common R plotting functions like `plot`, `barplot`, `boxplot`, `heatmap`, etc. 
are built ontop of base graphics [@murrell2018r]. Their default arguments 
provide a minimalist output, but can be tweaked extensively. An advantage of 
base graphics is they are very fast and relatively easy to extend.  

The `par` function allows setting or querying graphical parameters of the base 
graphics system. Have a look at its documentation (`?par`).  
Some graphical parameters can only be set with a call to `par` prior to using a 
base plotting function. However, many parameters can also be passed using the 
`...` construct of each base plotting function.  

Some common base graphical parameters:  

- `pch`: Point character
- `col`: Color
- `cex`: Character expansion, i.e. relative size
- `bty`: Box type
- `xlab`: x-axis label
- `ylab`: y-axis label
- `main`: Main title

Always make sure that your plotting characters, axis labels and titles are 
legible. You must avoid, at all costs, ever using a huge graph with tiny 
letters spread over a whole slide in a presentation.  

- `cex`: Character expansion for the plotting characters
- `cex.axis`: cex for axis annotation
- `cex.lab`: cex for x and y labels
- `cex.main`: cex for main title

Note: All of these can be set either with a call to `par()` prior to plotting 
or passed as arguments in a plotting command, like `plot()`.  
However, there is one important distinction: `cex` set with `par()` (which 
defaults to 1), sets the baseline and all other `cex` parameters multiply it. 
However, `cex` set within `plot()` still multiplies `cex` set with `par()`, but 
only affects the plotting character size.

## Grid graphics

The two most popular packages built on top of the **`grid`** package are:  

* [lattice](https://cran.r-project.org/web/packages/lattice/lattice.pdf) [@sarkar2008]
* [ggplot2](https://ggplot2.tidyverse.org) [@wickham2011ggplot2]

### **`ggplot2`**

**`ggplot2`**, created by Hadley Wickham [@wickham2011ggplot2], follows the 
[Grammar of Graphics](https://www.springer.com/statistics/computational/book/978-0-387-24544-7) approach of Leland Wilkinson [@wilkinson2012grammar] and has a very different 
syntax than base functions.

The general idea is to start by defining the data and then add and/or modify 
graphical elements in a stepwise manner, which allows one to build complex and 
layered visualizations. A simplified interface to `ggplot` graphics is provided 
in the `qplot()` function of **`ggplot2`** (but you should avoid it and use 
learn to use the `ggplot()` command which is fun and much more flexible and 
useful to know).

## 3rd party APIs

There are also third party libraries with R APIs that provide even more modern 
graphic capabilities to the R user:  

* [plotly](https://plot.ly) [@sievert2017plotly]
* [rbokeh](https://hafen.github.io/rbokeh/index.html)

Both build interactive plots, which can be viewed in a web browser or exported 
to bitmap graphics, and both also follow the grammar of graphics paradigm, and 
therefore follow similar syntax to **`ggplot2`**.

The [**rtemis**](https://rtemis.lambdamd.org) package [@gennatas2017towards] 
provides visualization functions built on top of base graphics and **plotly**:

* [mplot3](https://rtemis.lambdamd.org/staticgraphics.html) static graphics (base)
* [dplot3](https://rtemis.lambdamd.org/interactivegraphics.html) interactive graphics (plotly)

Let's go over the most common plot types using base graphics, **`ggplot2`**, 
and **`plotly`**.

This is meant to get you started but is only scratching the surface. There is 
extensive functionality included in each plotting library and you should 
consult the respective documentation for details.

## Synthetic Data

```{r}
library(data.table)
dt <- data.table(
    PID = sample(8001:9000, size = 100),
    Age = rnorm(100, mean = 33, sd = 8),
    Weight = rnorm(100, mean = 70, sd = 9),
    SysBP = rnorm(100, mean = 120, sd = 6),
    DiaBP = rnorm(100, mean = 80, sd = 6),
    Sex = factor(sample(c("Female", "Male"), size = 100, replace = TRUE))
)
dt[, SysBP := SysBP + .5 * Age]
dt[Sex == "Male", Weight := Weight + rnorm(.N, mean = 16, sd = 1.5)]
dt[Sex == "Male", Age := Age + rnorm(.N, mean = 6, sd = 1.8)]
df <- as.data.frame(dt)
```

Define a color palette `palette` and a version of the same palette at 50% transparency,
`palette_a`:

```{r}
palette = c("#43A4AC", "#FA9860", "#C23A70", "#3574A7", "#85D3DA", "#FECD53", 
"#C45796", "#4691E9")
palette_a = adjustcolor(palette, .5)
```

## Box plot

### base

```{r}
boxplot(dt[, .(SysBP, DiaBP)],
    col = palette_a[1:2],
    border = palette[1:2])
```

### **`ggplot2`**

`ggplot` requires a categorical x-axis to draw boxplots. This means 
we need to convert our dataset from wide to long.

Here we use [**`tidyr`**'s](https://tidyr.tidyverse.org/) `pivot_longer()` 
function, since it is part of the same cult known as the 
[tidyverse](https://www.tidyverse.org/). You can instead use the built-in 
[`reshape()`](dfReshape.qmd) function or **`data.table`**'s [`melt()`](dtReshape.qmd).

```{r}
dt_long <- melt(
    dt,
    id.vars = "PID",
    measure.vars = c("SysBP", "DiaBP"),
    variable.name = "Measure",
    value.name = "Value"
)
dt_long
```

```{r}
p <- ggplot(dt_long, aes(Measure, Value)) + 
    geom_boxplot(colour = palette[1:2], fill = palette_a[1:2])
p
```

### **`plotly`**

Reference: [R plotly boxplots](https://plotly.com/r/box-plots/)

In plotly, we can use a loop to add each column's boxplot one at a time. In the 
following example, we turn off the legend, since the names also appear below 
each boxplot: 

```{r}
plt <- plot_ly(y = dt[, SysBP], type = "box", name = "SysBP",
    line = list(color = palette[1]), fillcolor = palette_a[1])  |> 
    add_boxplot(y = dt[, DiaBP], name = "DiaBP",
        line = list(color = palette[2]), fillcolor = palette_a[2])
plt |> layout(showlegend = FALSE)
```

## Histogram

### base

```{r}
hist(dt[, Age], col = palette_a[1], border = palette[1], xlab = "Age")
```

### **`ggplot2`**

```{r}
ggplot(dt, aes(Age)) + 
    geom_histogram(color = palette[1], fill = palette_a[1])
```

### **`plotly`**

```{r}
plt <- plot_ly(x = dt[, Age], type = "histogram",
    marker = list(color = palette_a[1], 
        line = list(color = palette[1], width = 2)
    )
)
plt
```

## Density plot

### base

There is no built-in high-level function to draw density plots, but the `density()` 
function returns x and y coordinates you can use to add a polygon:

```{r}
age_density <- density(dt[, Age])

plot(age_density$x, age_density$y,
     type = 'l',
     yaxs = "i",
     bty = "n",
     xlab = "",
     ylab = "Density",
     col = palette[1])

polygon(c(age_density$x, rev(age_density$x)), 
        c(age_density$y, rep(0, length(age_density$y))),
        col = palette_a[1], 
        border = NA)
```

### **`ggplot2`**

```{r}
ggplot(dt, aes(x = Age)) + 
    geom_density(color = palette[1], fill = palette_a[1])
```

### **`plotly`**

```{r}
p <- plot_ly(
    x = age_density$x, 
    y = age_density$y, 
    type = "scatter", mode = "none",
    fill = "tozeroy",
    fillcolor = palette_a[1])
)
p
```

## Barplot

```{r}
schools <- data.frame(UCSF = 4, Stanford = 7, Penn = 12)
```

### base

```{r}
barplot(as.matrix(schools), col = palette_a[1], border = palette[1])
```

### **`ggplot2`**

`ggplot` requires an explicit column in the data that define the categorical 
x-axis:

```{r}
schools_df <- data.frame(
    University = factor(colnames(schools), 
        levels = c("UCSF", "Stanford", "Penn")),
    N_schools = as.numeric(schools[1, ])
)

ggplot(schools_df, aes(University, N_schools)) +
  geom_bar(stat = "identity", 
           color = palette[1], 
           fill = palette_a[1])
```

### **`plotly`**

```{r}
plt <- plot_ly(
    x = schools_df$University,
    y = schools_df$N_schools,
    name = "Schools",
    type = "bar",
    marker = list(color = palette_a[1], 
        line = list(color = palette[1], width = 2)
    ))
plt |> layout(yaxis = list(title = "N schools"))
```

## Scatterplot

### base

```{r}
plot(dt[, Age], dt[, SysBP], pch = 16,
    col = palette_a[1], cex = 1.4, bty = "n",
    xlab = "Age", ylab = "Systolic Blood Pressure")
```

### **`ggplot2`**

```{r}
ggplot(dt, aes(Age, SysBP)) +
    geom_point(color = palette_a[1])
```

### **`plotly`**

```{r}
p <- plot_ly(
    dt, x = ~Age, y = ~SysBP, 
    type = "scatter", mode = "markers",
    marker = list(color = palette_a[1])
)
p
```

same as:

```{r}
p <- plot_ly(dt, x = ~Age, y = ~SysBP) |> 
    add_trace(type = "scatter", mode = "markers",
        marker = list(color = palette_a[1])
    )
p
```

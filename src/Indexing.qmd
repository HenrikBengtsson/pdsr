---
title: "Indexing"
---

```{r echo = FALSE}
knitr::opts_chunk$set(fig.width = 10, fig.height = 5,
                      comment = NA, cache = TRUE) 
```

An index is used to pick elements of a data structure (i.e. a vector, matrix, 
array, list, data frame, etc.). You can select (or exclude) one or multiple 
elements at a time.
<br><br>
There are three types of index vectors you can use in R to identify elements of
an object:

- **Integer vector** defining index of elements to include (or exclude)
- **Logical vector** specifying whether to include or not each element
- **Character vector** identifying elements, rows, or columns by name

```{block, type="rmdnote"}
In data science and related fields the terms **filter** and **select** are 
commonly used:

- **Filter**: identify ***cases*** i.e. rows
- **Select**: identify ***variables*** a.k.a. ***features*** i.e. columns
```

Integer indexing in R is 1-based, meaning the first item of a vector is in 
position 1. In contrast, many programming languages use 
[0-based indexing](https://en.wikipedia.org/wiki/Zero-based_numbering#Computer_programming) 
where the first element is in the 0th position, the second in the 1st, and the 
nth in the n-1 position.
<br><br>
To understand indexing, make sure you are very comfortable with the core
[R data structures](#structures): vectors, matrices, arrays, lists, and
data.frames.
<br><br>
***What is indexing used for?***

Indexing can be used to **get** values from an object or to **set** 
values in an object.
<br><br>
The main indexing operator in R is the square bracket `[]`.

Lists use double square brackets `[[]]`

## Vectors {#indexvectors}

Start with a simple vector:

```{r}
x <- 15:24
x
```

### Integer Index

Get the 5th element of a vector:

```{r}
x[5]
```

Get elements 6 through 9 of the same vector:

```{r}
x[6:9]
```

An integer index can be used to reverse order of elements:

```{r}
x[5:3]
```

Note that an integer index can be used to repeat elements. This is often
done by accident, when someone passes the wrong vector as an index, so beware.

```{r}
x[c(1, 1, 1, 4)]
```

### Logical Index

Logical indexes are usually created as the output of a logical operation, 
i.e. an elementwise comparison.
<br><br>
Select elements with value greater than 19:

```{r}
idl <- x > 19
x[idl]
```

Logical vectors can be created directly in the brackets:

```{r}
x[x > 19]
```

### Extract vs. Replace

```{r}
x <- c(24, 32, 41, 37, 999, 999, 999)
```

Indexing allows you to access specific elements, for example to perform 
calculations on them.

Get the mean of elements 1 through 4:

```{r}
mean(x[1:4])
```

You can combine indexing with assignment to replace elements of an object.

Replace values in elements 1:4 with their log:

```{r}
x[1:4] <- log(x[1:4])
x
```

Replace elements that are equal to 999 with NA:

```{r}
x[x == 999] <- NA
x
```

## Matrices {#indexmatrices}

Reminder:

- A matrix is a 2D vector and contains elements of the same type (numeric, 
integer, character, etc.).
- A data frame is a 2D list and each column can contain a different data type.

To index a 2D structure, whether a matrix or data frame, we use the form:
 `[row, column]`.

The following indexing operations are therefore the same whether applied on a 
matrix or a data frame:

```{r}
mat <- matrix(21:60, 10)
colnames(mat) <- paste0("Feature_", seq(ncol(mat)))
rownames(mat) <- paste0("Row_", seq(nrow(mat)))
mat
df <- as.data.frame(mat)
df
```

To get the contents of the fifth row, second column:

```{r}
mat[5, 2]
df[5, 2]
```

We show the following on matrices, but they work just the same on data.frames.

If you want to select an entire row or an entire column, you leave the row or 
column index blank, but you ***must include a comma***:

Get the first row:

```{r}
mat[1, ]
```

Get the second column:

```{r}
mat[, 2]
```

Note that colnames and rownames where added to the matrix above for convenience 
- if they are absent, there are no labels above each element.

You can define ranges for both rows and columns:

```{r}
mat[6:7, 2:4]
```

You can return rows and/or columns reversed if desired:

```{r}
mat[7:6, 4:2]
```

You can use vectors to specify any combination of rows and columns.

Get rows 2, 4, and 7 of columns 1, 4, and 3:

```{r}
mat[c(2, 4, 7), c(1, 4, 3)]
```

Since a matrix is a vector with 2 dimensions, you can also index the underlying vector directly. Regardless of whether a matrix was created by row or by column (default), the data is stored and acceesed by column. You can see that by converting the matrix to a 1D vector:

```{r}
as.vector(mat)
```
same as:

```{r}
c(mat)
```

For example, 'mat' has 10 rows and 4 columns, therefore the 11th element is in row 1 column 2

```{r}
mat[11]
```
is the same as:

```{r}
mat[1, 2]
```

This only works with matrices, not data.frames.

### Matrix of indexes

This is quite less common, but potentially useful. It allows you to specify a series of individual `[i, j]` indexes, i.e. is a way to select multiple individual non-contiguous elements

```{r}
idm <- matrix(c(2, 4, 7, 4, 3, 1), 3)
idm
```

An n-by-2 matrix can be used to index as a length n vector of `[row, colum]` indexes. Therefore, the above matrix, will return elements `[2, 4], [4, 3], [7, 1]`:

```{r}
mat[idm]
```

### Logical index {#matidl}

Select all rows with values greater than 15 on the second column:

The logical index for this operation is:

```{r}
mat[, 2] > 15
```

It can be used directly to index the matrix:

```{r}
mat[mat[, 2] > 15, ]
```

Indexing a matrix or a data.frame can return either a smaller matrix/data.frame or a vector.

In general, objects in R are returned in their most simple form unless otherwise specified. This means that if you extract a column or a row, you get a vector:

Get the third column:

```{r}
mat[, 3]
class(mat[, 3])
```

You can specify `drop = FALSE` to stop R from dropping the unused dimension and return a matrix or data.frame of a single column:

```{r}
mat[, 3, drop = FALSE]
df[, 3, drop = FALSE]
```

Check it is still a matrix or data.frame:

```{r}
class(mat[, 3, drop = FALSE])
class(df[, 3, drop = FALSE])
```

## Lists {#indexlists}

Reminder: A list can contain elements of different classes and of different 
lengths:

```{r}
x <- list(one = 1001:1004,
          two = sample(seq(0, 100, .1), 10),
          three = c("Neuro", "Cardio", "Radio"),
          four = median)
x
```


### Extract *single* list element:

You can access a *single* list element using:

- Using double brackets `[[` with either *name* or *integer position*
- `$` followed by name of the element (therefore only works if elements are named)

For example, to access the third element:

```{r}
x$three
```
same as:

```{r}
x[[3]]
```

same as:

```{r}
x[["three"]]
```

To access a list element programmaticaly, i.e. using a name or integer index 
stored in a variable, only the bracket notation works. Therefore, programmatically, you would always use double brackets to access different elements:

```{r}
idi <- 3
idc <- "three"
x[[idi]]
x[[idc]]
```

### Extract *one or more* list elements as a ***list***:

You can extract one or more list elements as a pruned list using
single bracket `[` notation. Similar to indexing of a vector, this can be
either a logical, integer, or character vector:

```{r}
x[3]
x["three"]
x[c(F, F, T, F)]
```

Extract multiple elements:

```{r}
x[2:3]
# same as
x[c("two", "three")]
# same as
x[c(F, T, T, F)]
```

### Recursive indexing of list

Given the following list:

```{r}
x <- list(PIDN = 2001:2020,
          Dept = c("Neuro", "Cardio", "Radio"),
          Age = rnorm(20, 57, 1.3))
```

We can access the 3rd element of the 2nd element:

```{r}
x[[2]][3]
```

or

```{r}
x[[c(2, 3)]]
```

This is called recursive partitioning and is perhaps more often
used by accident, when one instead wanted to extrant the 2nd and 3rd elements:

```{r}
x[c(2, 3)]
```

### Flatten list

You can convert a list to one lone vector containing all the individual 
components of the original list using `unlist()`. Notice how names are 
automatically created based on the original structure:

```{r}
x <- list(alpha = sample(seq(100), 10),
          beta = sample(seq(100), 10),
          gamma = sample(seq(100), 10))
x
unlist(x)
```

If you want to drop the names, you can use set the `use.names` argument to FALSE or wrap the above in `unname()`:

```{r}
unlist(x, use.names = F)
# same as
unname(unlist(x))
```

## Data frames {#indexdfs}

We've saw above that a data frame can be indexed in many ways similar to a 
matrix, i.e. by defining rows and columns. At the same time, we know that a 
data frame is a rectangular list. Like a list, its elements are vectors of any 
type (integer, double, character, factor, and more) but, unlike a list, they 
have to be of the same length. A data frame can also be indexed the same way as 
a list and similar to list indexing, notice that some methods return a smaller 
data frame, while others return vectors.  

```{block, type="rmdtip"}
You can index a data frame using all the ways you can index a list and all the ways you can index a matrix.
```  

Let's create a simple data frame:

```{r}
x <- data.frame(Feat_1 = 21:25,
                Feat_2 = rnorm(5),
                Feat_3 = paste0("rnd_", sample(seq(100), 5)))
x
```

### Extract *single* column as a vector

Just like in a list, using double brackets `[[` or the `$` operator
returns an element, i.e. a **vector**:

```{r}
x$Feat_2
```

```{r}
x[[2]]
```

```{r}
x[, 2]
```

### Extract "one or more" columns as a data.frame

Accessing a column by name using square brackets, returns a single-column 
**data.frame**:

```{r}
x["Feat_2"]
```

Accessing a column by `[row, column]` either by position or name, return a vector by default:

```{r}
x[, 2]
```

```{r}
x[, "Feat_2"]
```

As we saw earlier, we can specify `drop = FALSE` to return a `data.frame`:

```{r}
class(x[, 2, drop = FALSE])
class(x[, "Feat_2", drop = FALSE])
```

As in lists, all indexing and slicing operations, with the exception of the `$` notation, work with a variable holding either a column name of or an integer location:

```{r}
idi <- 2
idc <- "Feat_2"
x[idi]
x[idc]
x[[idi]]
x[[idc]]
x[, idi]
x[, idc]
x[, idi, drop = F]
x[, idc, drop = F]
```

Extracting multiple columns returns a data frame:

```{r}
x[, 2:3]
class(x[, 2:3])
```

### Extract rows

Unlike indexing a row of a matrix, indexing a row of a data.frame returns a single-row data.frame, since it contains multiple columns of potentially different types:

```{r}
x[1, ]
class(x[1, ])
```

Convert into a list using `c()`:

```{r}
c(x[1, ])
class(c(x[1, ]))
```

Convert into a (named) vector using `unlist()`:

```{r}
unlist(x[1, ])
class(unlist(x[1, ]))
```

### Logical index {#dfidl}

```{r}
x[x$Feat_1 > 22, ]
```

## Logical <-> Integer indexing

In this chapter, we have learned how to use both integer and logical indexes. 

```{block, type="rmdnote"}
- A logical index needs to be of the same dimensions as the object it is indexing (unless you really want to recycle values - see chapter on [vectorization](#vectorization)):  
    you are specifying whether to include or exclude each element
    
- An integer index will be shorter than the object it is indexing:
    you are specifying which subset of elements to include (or with a `-` in front, which elements to exclude)
```

It's easy to convert between the two types.  

For example, start with a sequence of integers:

```{r}
x <- 21:30
x
```

Let's create a logical index based on two inequalities:

```{r}
logical_index <- x > 23 & x < 28
logical_index
```

### Logical to integer index with `which()`:


```{block, type="rmdcaution"}
The common mistake is to attempt to convert a logical index to an integer index using `as.integer()`. This results in a vector of 1's and 0's, NOT an integer index.  
`which()` converts a logical index to an integer index.
```

`which()` literally gives the position of all `TRUE` elements in a vector, thus converting a logical to an integer index:

```{r}
integer_index <- which(logical_index)
integer_index
```

i.e. positions 4, 5, 6, 7 of the `logical_index` are TRUE


```{block, type="rmdnote"}
A logical and an integer index are equivalent if they select the exact same elements
```

Let's check than when used to index `x`, they both return the same result:

```{r}
x[logical_index]
x[integer_index]
all(x[logical_index] == x[integer_index])
```

### Integer to logical index

On the other hand, if we want to convert an integer index to a logical index, we can begin with a logical vector of the same length or dimension as the object we want to index with all FALSE values:

```{r}
logical_index_too <- vector(length = length(x))
logical_index_too
```

And use the integer index to replace the corresponding elements to TRUE:

```{r}
logical_index_too[integer_index] <- TRUE
logical_index_too
```
This, of course, is the same as the logical index we started with.

```{r}
all(logical_index == logical_index_too)
```

## Exclude cases using an index

Very often, we want to use an index, whether logical or integer, to exclude 
cases instead of to select cases.  To do that with a logical integer, we simply 
use an exclamation point in front of the index to negate each element 
(convert each TRUE to FALSE and each FALSE to TRUE):

```{r}
logical_index
!logical_index
```

```{r}
x[!logical_index]
```

To exclude elements using an integer index, R allows you to use negative 
indexing:

```{r}
x[-integer_index]
```

```{block, type="rmdnote"}
To get the complement of an index, you negate a logical index 
(`!logical_index`) or you subtract an integer index (`-integer_index`):
```

## Resources

["Indexing vectors" in *An Introduction to R*](https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Index-vectors)

---
execute: 
  warning: false
knitr:
  opts_knit:
    global.par: true
  opts_chunk: 
    comment: ''
    fig.width: 6.5
    fig.height: 6.5
---
# Colors {#sec-colors}
```{r}
#| echo: false
par(family = "Inter")
library(ggplot2)
theme_set(theme(text = element_text(family = "Inter")))

# rtemis defaults
options(rt.theme = "whiteigrid")
options(rt.fit.theme = "whiteigrid")
```

```{r, comment="", results="asis", echo=FALSE}
old.hooks <- fansi::set_knit_hooks(knitr::knit_hooks)
options(crayon.enabled = TRUE)
```

```{r}
library(rtemis)
```

Colors in R can be defined in many different ways:  

* Using names: `colors()` gives all available options
* Using a [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) [RGB](https://en.wikipedia.org/wiki/RGB_color_model) code in the form `#RRGGBBAA`, e.g. `#FF0000FF` for opaque red. Here, the max value is "FF" which corresponds to 255.
* Using the `rgb(red, green, blue, alpha)` function (outputs a hex number)
* Using the `hsv(h, s, v, alpha)` function for the [HSV color system](https://en.wikipedia.org/wiki/HSL_and_HSV) (also outputs a hex number)
* Using integers: these index the output of `palette()`, whose defaults can be changed by the user (e.g. `palette("cyan", "blue", "magenta", "red")`)

## Color names

There is a long list of color names R understands, and can be listed using 
`colors()`.

They can be passed directly as characters.

Shades of gray are provided as `gray0`/`grey0` (white) to `gray100`/`grey100` 
(black).

Absurdly wide PDFs with all built-in R colors, excluding the grays/greys, are 
available sorted [alphabeticaly](https://www.lambdamd.org/assets/RColors.pdf) 
and sorted by 
[increasing Red and decreasing Green and Blue values](https://www.lambdamd.org/assets/RColors_incRed_decBlueGreen.pdf)

## Hexadecimal codes

Hexadecimal color codes are characters starting with the pound sign, followed 
by 4 pairs of hex codes representing Red, Green, Blue, and Alpha values. Since 
RGB values go from 0 to 255, hex goes from 00 to FF. You can convert decimal to 
hex using `as.hexmode()`:

```{r}
as.hexmode(0)
as.hexmode(127)
as.hexmode(255)
```

The last two values for the alpha setting are optional: if not included, 
defaults to max, i.e. opaque.

## RGB

```{r}
rgb(0, 0, 1)
```

Note the default `maxColorValue = 1`, set to 255 to use the usual RGB range of 
0 to 255:

```{r}
rgb(0, 0, 255, maxColorValue = 255)
```

## HSV

Color can also be parameterized using the hue, saturation, and value system 
([HSV](https://en.wikipedia.org/wiki/HSL_and_HSV)). Each range from 0 to 1.  
Simplistically: Hue controls the color. Saturation 1 is max color and 0 is 
white. Value 1 is max color and 0 is black.

```{r}
hsv(1, 1, 1)
```

In the following plot, the values around the polar plot represent hue. Moving 
inwards to the center, saturation changes from 1 to 0.

```{r}
mplot_hsv()
mplot_hsv(v = .5)
```

## Transparency

An easy way to add transparency to any color is using `adjustcolor()`:

For example, to get 50% transparent blue:

```{r}
adjustcolor("blue", alpha.f = .5)
```

You can manually create the above, knowing that "FF" is hex for 255, and "80"
is 128, therefore you want 0 red, 0 green, 255 blue, 128 alpha,
therefore "#0000FF80"

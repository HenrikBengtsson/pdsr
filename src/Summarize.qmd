# Summarizing Data {#summarize}

```{r echo = FALSE}
knitr::opts_chunk$set(fig.width = 10, fig.height = 5,
                      comment = NA, cache = TRUE)
```

Let's read in a dataset from OpenML:

```{r}
heart <- read.csv("https://www.openml.org/data/get_csv/51/dataset_51_heart-h.arff",
                  na.strings = "?")
```

## Get summary of an R object with `summary()`

R includes `summary()` [methods](#s3methods) for a number of different objects. 

```{r}
summary(heart)
```

## Fast builtin column and row operations

We saw in [Loop Functions](#loopfns) how we can apply functions on rows, columns, or other subsets of our data. R has optimized builtin functions for some very common operations, with self-explanatory names:

* `colSums()`: column sums
* `rowSums()`: row sums
* `colMeans()`: column means
* `rowMeans()`: row means

```{r}
a <- matrix(1:20, 5)
a
```

```{r}
colSums(a)

# same as
apply(a, 2, sum)
```

```{r}
rowSums(a)

# same as
apply(a, 1, sum)
```

```{r}
colMeans(a)

# same as
apply(a, 2, mean)
```

```{r}
rowMeans(a)

# same as
apply(a, 1, mean)
```

## Optimized matrix operations with **matrixStats**

While the builtin operations above are already optimized and faster than the equivalent calls, the **matrixStats** package [@matrixStats2019] offers a number of futher optimized matrix operations, including drop-in replacements of the above. These should be prefered when dealing with bigger data:

```{r}
library(matrixStats)
colSums2(a)
rowSums2(a)
colMeans2(a)
rowMeans2(a)
```

Note: **matrixStats** provides replacement functions named almost identically to their base counterpart - so they are easy to find - but are different - so they don't mask the base functions (this is important and good software design).


## See also

[`aggregate()`](#aggregate) for grouped summary statistics

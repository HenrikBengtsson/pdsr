---
execute:
  cache: true
knitr:
  opts_chunk: 
    comment: ''
---
# Summarizing Data {#sec-summarize}

Let's read in a dataset on heart disease from OpenML:

```{r}
heart <- read.csv("https://www.openml.org/data/get_csv/51/dataset_51_heart-h",
                  na.strings = "?",
                  stringsAsFactors = TRUE)
```

One of the first things you might want to know is the size of the dataset:

```{r}
dim(heart)
```

Since it does not contain too many columns, you can use `str()` to get the
type of each and a preview of some of the data:

```{r}
str(heart)
```

You might want to take a look at the first few rows (defaults to 6):

```{r}
head(heart)
```

There is the equivalent `tail()` to print the last few rows:

```{r}
tail(heart)
```

## Get summary of an R object with `summary()`

R includes a `summary()` [method](ClassesAndOOP.qmd#s3) for a number of different objects,
including (of course) data.frames:

```{r}
summary(heart)
```

## Fast builtin column and row operations

R has optimized builtin functions for some very common row and columns
operations, with self-explanatory names that can be applied to matrices and
data.frames:

* `colSums()`: column sums
* `rowSums()`: row sums
* `colMeans()`: column means
* `rowMeans()`: row means

```{r}
a <- data.frame(matrix(1:20, nrow = 5))
a
```

```{r}
colSums(a)
```

```{r}
rowSums(a)
```

```{r}
colMeans(a)
```

```{r}
rowMeans(a)
```

## See also

- [`aggregate()`](Aggregate.qmd) for grouped summary statistics
- [Loop Functions](LoopFunctions.qmd) for applying any function on subsets of data. 

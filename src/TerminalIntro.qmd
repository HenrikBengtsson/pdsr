# Introduction to the system shell {#shell}

This is a very brief introduction to some of the most commonly used shell commands.

A [shell](https://en.wikipedia.org/wiki/Unix_shell) is a command line interface allowing access to 
an operating system's services. Multiple different shells exist. The most popular is probably 
[**bash**](https://en.wikipedia.org/wiki/zsh_%28Unix_shell%29), which is the default in most Linux 
installations. In MacOS, the default shell switched form **zsh** to 
[**zsh**](https://en.wikipedia.org/wiki/Z_shell) in 2019 with the release of Catalina. In Windows,
various shells are available through the 
[Windows Subsystem for Linux](https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux).

The commands listed here will work similarly in all/most shells.

## Common shell commands

The first thing to look for in a new environment is the help system. In the shell, this is accessed with `man`:

* `man`: Print the manual pages

```{bash eval = false}
man man
```

* `pwd`: Print working directory (the directory you are currently in)

```{bash eval = FALSE}
pwd
```

* `cd`: Set working directory to `/path/to/dir`

```{bash eval = FALSE}
cd /path/to/dir
```

* `mv`: Move `file` from `/current/dir/` to `/new/dir`  

```{bash eval = FALSE}
mv /current/dir/file /new/dir
```

* `mv`: Rename `file` to `newfilename` 

```{bash eval = FALSE}
mv /current/dir/file /current/dir/newfilename
```

* `cp`: Make a copy of `file` from `currentPath` into `altPath`

```{bash eval = FALSE}
cp /currentPath/file /altPath/file
```

* `rm`: Remove, i.e. delete, file

```{bash eval = FALSE}
rm /path/to/file
```

* `mkdir`: Create a new directory named 'somedir'

```{bash eval = FALSE}
mkdir /path/to/somedir
```

* `rmdir`: Remove, i.e. delete, **empty** directory

```{bash eval = FALSE}
rmdir /path/to/somedir
```

To remove a non-empty directory and all of its contents, you can use `rm -rf`:
`-r` is recursive; `-f` is force - use with care! it will immediately delete

```{bash eval = FALSE}
rm -rf /path/to/dir
```

* `cat`: Print contents of `file` to the console

```{bash eval = FALSE}
cat /path/to/file
```

* `uname`: Get system information

```{bash eval = FALSE}
uname -a
```

* `whoami`: Get the currently logged in user's name

```{bash eval = FALSE}
whoami
```

## Running system commands within R

You can execute any system command within R using the `system()` command:

```{bash eval = FALSE}
system("uname -a")
```

## Useful terminal commands for working with data

If you receive a data file, you may want to get an idea of the contents before reading it
into R.

* `head`: Print the first few lines

```{bash eval = FALSE}
head ~/icloud/Data/iris.csv
```
